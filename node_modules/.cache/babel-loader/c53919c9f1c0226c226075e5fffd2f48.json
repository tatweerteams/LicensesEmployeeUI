{"ast":null,"code":"import { getBranchWorkTime, updateBranchWorkTime, activationBranchWorkTime, updateAllWorkTime } from \"../API/Index.js\";\nimport { createHelpers } from \"vuex-map-fields\";\nconst {\n  getDataFields,\n  updateDataField\n} = createHelpers({\n  getterType: \"getDataFields\",\n  mutationType: \"updateDataField\"\n});\nexport default {\n  namespaced: true,\n  state: {\n    branchWorkTimes: [],\n    isEmpty: false\n  },\n  getters: {\n    getDataFields\n  },\n  mutations: {\n    updateDataField,\n    SET_DATA_BRANCH_WORK_TIME(state, items) {\n      state.branchWorkTimes = items;\n    },\n    RESET_DATA(state) {\n      state.isEmpty = false;\n      state.branchWorkTimes = [];\n    },\n    SET_IS_EMPTY(state, item) {\n      state.isEmpty = item;\n    }\n  },\n  actions: {\n    ClearDataItem({\n      commit\n    }) {\n      commit(\"RESET_DATA\");\n    },\n    GetBranchWorkTime({\n      commit\n    }, filter) {\n      return new Promise((resolve, reject) => {\n        getBranchWorkTime(filter).then(response => {\n          if (response.result.length == 0) {\n            commit(\"SET_IS_EMPTY\", true);\n            resolve(response);\n            return;\n          }\n          commit(\"SET_DATA_BRANCH_WORK_TIME\", response.result);\n          resolve(response);\n        }).catch(error => {\n          commit(\"SET_IS_EMPTY\", true);\n          reject(error);\n        });\n      });\n    },\n    UpdateBranchWorkTime({\n      commit\n    }, data) {\n      return new Promise((resolve, reject) => {\n        updateBranchWorkTime(data).then(response => {\n          console.log(commit);\n          commit(\"SET_IS_EMPTY\", false);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          commit(\"SET_IS_EMPTY\", true);\n          reject(error);\n        });\n      });\n    },\n    ActivationBranchWorkTime({\n      commit\n    }, item) {\n      const param = {\n        branchWorkTimeId: item.id,\n        isActive: item.isActive\n      };\n      return new Promise((resolve, reject) => {\n        activationBranchWorkTime(param).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    UpdateAllWorkTime({\n      commit\n    }, item) {\n      return new Promise((resolve, reject) => {\n        updateAllWorkTime(item).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["getBranchWorkTime","updateBranchWorkTime","activationBranchWorkTime","updateAllWorkTime","createHelpers","getDataFields","updateDataField","getterType","mutationType","namespaced","state","branchWorkTimes","isEmpty","getters","mutations","SET_DATA_BRANCH_WORK_TIME","items","RESET_DATA","SET_IS_EMPTY","item","actions","ClearDataItem","commit","GetBranchWorkTime","filter","Promise","resolve","reject","then","response","result","length","catch","error","UpdateBranchWorkTime","data","console","log","messages","ActivationBranchWorkTime","param","branchWorkTimeId","id","isActive","UpdateAllWorkTime"],"sources":["D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/src/views/Branch/Stores/BranchWorkTime.js"],"sourcesContent":["import {\r\n  getBranchWorkTime,\r\n  updateBranchWorkTime,\r\n  activationBranchWorkTime,\r\n  updateAllWorkTime,\r\n} from \"../API/Index.js\";\r\n\r\nimport { createHelpers } from \"vuex-map-fields\";\r\nconst { getDataFields, updateDataField } = createHelpers({\r\n  getterType: \"getDataFields\",\r\n  mutationType: \"updateDataField\",\r\n});\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    branchWorkTimes: [],\r\n    isEmpty: false,\r\n  },\r\n\r\n  getters: {\r\n    getDataFields,\r\n  },\r\n\r\n  mutations: {\r\n    updateDataField,\r\n\r\n    SET_DATA_BRANCH_WORK_TIME(state, items) {\r\n      state.branchWorkTimes = items;\r\n    },\r\n    RESET_DATA(state) {\r\n      state.isEmpty = false;\r\n      state.branchWorkTimes = [];\r\n    },\r\n\r\n    SET_IS_EMPTY(state, item) {\r\n      state.isEmpty = item;\r\n    },\r\n  },\r\n\r\n  actions: {\r\n    ClearDataItem({ commit }) {\r\n      commit(\"RESET_DATA\");\r\n    },\r\n\r\n    GetBranchWorkTime({ commit }, filter) {\r\n      return new Promise((resolve, reject) => {\r\n        getBranchWorkTime(filter)\r\n          .then((response) => {\r\n            if (response.result.length == 0) {\r\n              commit(\"SET_IS_EMPTY\", true);\r\n              resolve(response);\r\n              return;\r\n            }\r\n            commit(\"SET_DATA_BRANCH_WORK_TIME\", response.result);\r\n            resolve(response);\r\n          })\r\n          .catch((error) => {\r\n            commit(\"SET_IS_EMPTY\", true);\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n    UpdateBranchWorkTime({ commit }, data) {\r\n      return new Promise((resolve, reject) => {\r\n        updateBranchWorkTime(data)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            commit(\"SET_IS_EMPTY\", false);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            commit(\"SET_IS_EMPTY\", true);\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    ActivationBranchWorkTime({ commit }, item) {\r\n      const param = {\r\n        branchWorkTimeId: item.id,\r\n        isActive: item.isActive,\r\n      };\r\n      return new Promise((resolve, reject) => {\r\n        activationBranchWorkTime(param)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    UpdateAllWorkTime({ commit }, item) {\r\n      return new Promise((resolve, reject) => {\r\n        updateAllWorkTime(item)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n     \r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}