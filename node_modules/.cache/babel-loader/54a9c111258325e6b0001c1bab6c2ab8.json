{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport { getBranchs, getActiveBranchs, insertBranch } from \"../API/Index.js\";\nimport { createHelpers } from \"vuex-map-fields\";\nvar _createHelpers = createHelpers({\n    getterType: \"getDataFields\",\n    mutationType: \"updateDataField\"\n  }),\n  getDataFields = _createHelpers.getDataFields,\n  updateDataField = _createHelpers.updateDataField;\nexport default {\n  namespaced: true,\n  state: {\n    branchs: [],\n    activeBranchs: [],\n    pageCount: 0,\n    editedItem: {\n      id: null,\n      name: null,\n      branchNo: null,\n      branchRegionId: null,\n      lastSerialCertified: 0,\n      lastSerial: 0,\n      lastCountChekBook: 0,\n      branchSetting: {\n        accountChekBook: null,\n        companyFrom: 1,\n        companyTo: 1000,\n        certifiedFrom: 1,\n        certifiedTo: 1000,\n        individualFrom: 1,\n        individualTo: 1000,\n        individualRequestAccountDay: true,\n        individualQuentityOfDay: 1\n      }\n    },\n    defaultItem: {\n      id: null,\n      name: null,\n      branchNo: null,\n      branchRegionId: null,\n      lastSerialCertified: 0,\n      lastSerial: 0,\n      lastCountChekBook: 0,\n      branchSetting: {\n        accountChekBook: null,\n        companyFrom: 1,\n        companyTo: 1000,\n        certifiedFrom: 1,\n        certifiedTo: 1000,\n        individualFrom: 1,\n        individualTo: 1000,\n        individualRequestAccountDay: true,\n        individualQuentityOfDay: 1\n      }\n    }\n  },\n  getters: {\n    getDataFields: getDataFields\n  },\n  mutations: {\n    updateDataField: updateDataField,\n    SET_DATA_BRANCHS: function SET_DATA_BRANCHS(state, items) {\n      state.branchs = items;\n    },\n    SET_DATA_ACTIVE_BRANCHS: function SET_DATA_ACTIVE_BRANCHS(state, items) {\n      state.activeBranchs = items;\n    },\n    SET_PAGE_COUNT: function SET_PAGE_COUNT(state, pageCount) {\n      state.pageCount = pageCount;\n    },\n    RESET_DATA: function RESET_DATA(state) {\n      state.editedItem = Object.assign({}, state.defaultItem);\n      state.editedItem.branchSetting = Object.assign({}, state.defaultItem.branchSetting);\n    },\n    SET_ITEM_BRANCH: function SET_ITEM_BRANCH(state, item) {\n      console.log(state);\n      console.log(item);\n    }\n  },\n  actions: {\n    ClearDataItem: function ClearDataItem(_ref) {\n      var commit = _ref.commit;\n      commit(\"RESET_DATA\");\n    },\n    SetDataUpdate: function SetDataUpdate(_ref2, item) {\n      var commit = _ref2.commit;\n      commit(\"SET_ITEM_BRANCH\", item);\n    },\n    GetBranchs: function GetBranchs(_ref3, filter) {\n      var commit = _ref3.commit;\n      return new Promise(function (resolve, reject) {\n        getBranchs(filter).then(function (response) {\n          commit(\"SET_DATA_BRANCHS\", response.result.data);\n          commit(\"SET_PAGE_COUNT\", response.result.pageCount);\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    GetActiveBranchs: function GetActiveBranchs(_ref4, filter) {\n      var commit = _ref4.commit;\n      return new Promise(function (resolve, reject) {\n        getActiveBranchs(filter).then(function (response) {\n          commit(\"SET_DATA_ACTIVE_BRANCHS\", response.result);\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    InsertBranch: function InsertBranch(_ref5) {\n      var commit = _ref5.commit,\n        state = _ref5.state;\n      var data = state.editedItem;\n      return new Promise(function (resolve, reject) {\n        insertBranch(data).then(function (response) {\n          commit(\"RESET_DATA\");\n          resolve(response.messages[0]);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    } //   UpdateBank({ commit, state }) {\n    //     const data = {\n    //       name: state.editedItem.name,\n    //       bankNo: state.editedItem.bankNo,\n    //       id: state.editedItem.id,\n    //     };\n    //     return new Promise((resolve, reject) => {\n    //       updateBank(data)\n    //         .then((response) => {\n    //           commit(\"RESET_DATA\");\n    //           resolve(response.messages[0]);\n    //         })\n    //         .catch((error) => {\n    //           reject(error);\n    //         });\n    //     });\n    //   },\n    //   ActivateBank({ commit }, item) {\n    //     const param = {\n    //       bankId: item.bankId,\n    //       isActive: item.isActive,\n    //     };\n    //     return new Promise((resolve, reject) => {\n    //       activationBank(param)\n    //         .then((response) => {\n    //           console.log(commit);\n    //           resolve(response.messages[0]);\n    //         })\n    //         .catch((error) => {\n    //           reject(error);\n    //         });\n    //     });\n    //   },\n    //   DeleteBank({ commit }, item) {\n    //     const param = {\n    //       bankId: item.bankId\n    //     };\n    //     return new Promise((resolve, reject) => {\n    //       deleteBank(param)\n    //         .then((response) => {\n    //           console.log(commit);\n    //           resolve(response.messages[0]);\n    //         })\n    //         .catch((error) => {\n    //           reject(error);\n    //         });\n    //     });\n    //   },\n  }\n};","map":{"version":3,"names":["getBranchs","getActiveBranchs","insertBranch","createHelpers","getterType","mutationType","getDataFields","updateDataField","namespaced","state","branchs","activeBranchs","pageCount","editedItem","id","name","branchNo","branchRegionId","lastSerialCertified","lastSerial","lastCountChekBook","branchSetting","accountChekBook","companyFrom","companyTo","certifiedFrom","certifiedTo","individualFrom","individualTo","individualRequestAccountDay","individualQuentityOfDay","defaultItem","getters","mutations","SET_DATA_BRANCHS","items","SET_DATA_ACTIVE_BRANCHS","SET_PAGE_COUNT","RESET_DATA","Object","assign","SET_ITEM_BRANCH","item","console","log","actions","ClearDataItem","commit","SetDataUpdate","GetBranchs","filter","Promise","resolve","reject","then","response","result","data","catch","error","GetActiveBranchs","InsertBranch","messages"],"sources":["D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/src/views/Branch/Stores/Index.js"],"sourcesContent":["import { getBranchs, getActiveBranchs, insertBranch } from \"../API/Index.js\";\r\n\r\nimport { createHelpers } from \"vuex-map-fields\";\r\nconst { getDataFields, updateDataField } = createHelpers({\r\n  getterType: \"getDataFields\",\r\n  mutationType: \"updateDataField\",\r\n});\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    branchs: [],\r\n    activeBranchs: [],\r\n    pageCount: 0,\r\n\r\n    editedItem: {\r\n      id: null,\r\n      name: null,\r\n      branchNo: null,\r\n      branchRegionId: null,\r\n      lastSerialCertified: 0,\r\n      lastSerial: 0,\r\n      lastCountChekBook: 0,\r\n      branchSetting: {\r\n        accountChekBook: null,\r\n        companyFrom: 1,\r\n        companyTo: 1000,\r\n        certifiedFrom: 1,\r\n        certifiedTo: 1000,\r\n        individualFrom: 1,\r\n        individualTo: 1000,\r\n        individualRequestAccountDay: true,\r\n        individualQuentityOfDay: 1,\r\n      },\r\n    },\r\n\r\n    defaultItem: {\r\n      id: null,\r\n      name: null,\r\n      branchNo: null,\r\n      branchRegionId: null,\r\n      lastSerialCertified: 0,\r\n      lastSerial: 0,\r\n      lastCountChekBook: 0,\r\n      branchSetting: {\r\n        accountChekBook: null,\r\n        companyFrom: 1,\r\n        companyTo: 1000,\r\n        certifiedFrom: 1,\r\n        certifiedTo: 1000,\r\n        individualFrom: 1,\r\n        individualTo: 1000,\r\n        individualRequestAccountDay: true,\r\n        individualQuentityOfDay: 1,\r\n      },\r\n    },\r\n  },\r\n\r\n  getters: {\r\n    getDataFields,\r\n  },\r\n\r\n  mutations: {\r\n    updateDataField,\r\n\r\n    SET_DATA_BRANCHS(state, items) {\r\n      state.branchs = items;\r\n    },\r\n\r\n    SET_DATA_ACTIVE_BRANCHS(state, items) {\r\n      state.activeBranchs = items;\r\n    },\r\n\r\n    SET_PAGE_COUNT(state, pageCount) {\r\n      state.pageCount = pageCount;\r\n    },\r\n\r\n    RESET_DATA(state) {\r\n      state.editedItem = Object.assign({}, state.defaultItem);\r\n      state.editedItem.branchSetting = Object.assign(\r\n        {},\r\n        state.defaultItem.branchSetting\r\n      );\r\n    },\r\n    SET_ITEM_BRANCH(state, item) {\r\n      console.log(state);\r\n      console.log(item);\r\n    },\r\n  },\r\n\r\n  actions: {\r\n    ClearDataItem({ commit }) {\r\n      commit(\"RESET_DATA\");\r\n    },\r\n\r\n    SetDataUpdate({ commit }, item) {\r\n      commit(\"SET_ITEM_BRANCH\", item);\r\n    },\r\n\r\n    GetBranchs({ commit }, filter) {\r\n      return new Promise((resolve, reject) => {\r\n        getBranchs(filter)\r\n          .then((response) => {\r\n            commit(\"SET_DATA_BRANCHS\", response.result.data);\r\n            commit(\"SET_PAGE_COUNT\", response.result.pageCount);\r\n\r\n            resolve(response);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    GetActiveBranchs({ commit }, filter) {\r\n      return new Promise((resolve, reject) => {\r\n        getActiveBranchs(filter)\r\n          .then((response) => {\r\n            commit(\"SET_DATA_ACTIVE_BRANCHS\", response.result);\r\n            resolve(response);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    InsertBranch({ commit, state }) {\r\n      const data =state.editedItem;\r\n      return new Promise((resolve, reject) => {\r\n        insertBranch(data)\r\n          .then((response) => {\r\n            commit(\"RESET_DATA\");\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    //   UpdateBank({ commit, state }) {\r\n    //     const data = {\r\n    //       name: state.editedItem.name,\r\n    //       bankNo: state.editedItem.bankNo,\r\n    //       id: state.editedItem.id,\r\n    //     };\r\n\r\n    //     return new Promise((resolve, reject) => {\r\n    //       updateBank(data)\r\n    //         .then((response) => {\r\n    //           commit(\"RESET_DATA\");\r\n    //           resolve(response.messages[0]);\r\n    //         })\r\n    //         .catch((error) => {\r\n    //           reject(error);\r\n    //         });\r\n    //     });\r\n    //   },\r\n\r\n    //   ActivateBank({ commit }, item) {\r\n    //     const param = {\r\n    //       bankId: item.bankId,\r\n    //       isActive: item.isActive,\r\n    //     };\r\n    //     return new Promise((resolve, reject) => {\r\n    //       activationBank(param)\r\n    //         .then((response) => {\r\n    //           console.log(commit);\r\n    //           resolve(response.messages[0]);\r\n    //         })\r\n    //         .catch((error) => {\r\n    //           reject(error);\r\n    //         });\r\n    //     });\r\n    //   },\r\n\r\n    //   DeleteBank({ commit }, item) {\r\n    //     const param = {\r\n    //       bankId: item.bankId\r\n    //     };\r\n    //     return new Promise((resolve, reject) => {\r\n    //       deleteBank(param)\r\n    //         .then((response) => {\r\n    //           console.log(commit);\r\n    //           resolve(response.messages[0]);\r\n    //         })\r\n    //         .catch((error) => {\r\n    //           reject(error);\r\n    //         });\r\n    //     });\r\n    //   },\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}