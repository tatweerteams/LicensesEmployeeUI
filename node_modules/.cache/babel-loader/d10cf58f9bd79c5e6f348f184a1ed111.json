{"ast":null,"code":"import { getOrderRequests, insertOrderRequest, updateOrderRequest, deleteOrderRequest, sendOrderRequest, approvedOrderRequest, rejectOrderRequest } from \"../Apis/Index.js\";\nimport { createHelpers } from \"vuex-map-fields\";\nconst {\n  getDataFields,\n  updateDataField\n} = createHelpers({\n  getterType: \"getDataFields\",\n  mutationType: \"updateDataField\"\n});\nexport default {\n  namespaced: true,\n  state: {\n    grids: [],\n    pageCount: 0,\n    editedItem: {\n      id: null,\n      note: null,\n      orderRequestType: null,\n      branchId: null,\n      printOutCenter: false\n    },\n    defaultItem: {\n      id: null,\n      note: null,\n      orderRequestType: null,\n      branchId: null,\n      printOutCenter: false\n    }\n  },\n  getters: {\n    getDataFields\n  },\n  mutations: {\n    updateDataField,\n    SET_DATA_ORDER_REQUESTS(state, items) {\n      state.grids = items;\n    },\n    SET_PAGE_COUNT(state, pageCount) {\n      state.pageCount = pageCount;\n    },\n    RESET_DATA(state) {\n      state.editedItem = Object.assign({}, state.defaultItem);\n    },\n    SET_ITEM_ORDER_REQUEST(state, item) {\n      state.editedItem.id = item.id;\n      state.editedItem.note = item.note;\n      state.editedItem.orderRequestType = item.orderRequestType;\n      state.editedItem.branchId = item.branchId;\n    }\n  },\n  actions: {\n    ClearDataItem({\n      commit\n    }) {\n      commit(\"RESET_DATA\");\n    },\n    SetDataUpdate({\n      commit\n    }, item) {\n      commit(\"SET_ITEM_ORDER_REQUEST\", item);\n    },\n    GetOrderRequests({\n      commit\n    }, filter) {\n      return new Promise((resolve, reject) => {\n        getOrderRequests(filter).then(response => {\n          commit(\"SET_DATA_ORDER_REQUESTS\", response.result.data);\n          commit(\"SET_PAGE_COUNT\", response.result.pageCount);\n          resolve(response);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    InsertOrderRequest({\n      commit,\n      state,\n      rootState\n    }) {\n      const data = {\n        note: state.editedItem.note,\n        orderRequestType: state.editedItem.orderRequestType,\n        branchId: state.editedItem.branchId ?? rootState.auth.userInfo.branchId,\n        printOutCenter: state.editedItem.printOutCenter\n      };\n      return new Promise((resolve, reject) => {\n        insertOrderRequest(data).then(response => {\n          commit(\"RESET_DATA\");\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    UpdateOrderRequest({\n      commit,\n      state,\n      rootState\n    }) {\n      const data = {\n        id: state.editedItem.id,\n        note: state.editedItem.note,\n        orderRequestType: state.editedItem.orderRequestType,\n        branchId: state.editedItem.branchId ?? rootState.auth.userInfo.branchId,\n        printOutCenter: state.editedItem.printOutCenter\n      };\n      return new Promise((resolve, reject) => {\n        updateOrderRequest(data).then(response => {\n          commit(\"RESET_DATA\");\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    DeleteOrderRequest({\n      commit\n    }, item) {\n      const param = {\n        orderRequestId: item.orderRequestId\n      };\n      return new Promise((resolve, reject) => {\n        deleteOrderRequest(param).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    SendOrderRequest({\n      commit\n    }, item) {\n      return new Promise((resolve, reject) => {\n        sendOrderRequest(item).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    ApprovedOrderRequest({\n      commit\n    }, item) {\n      return new Promise((resolve, reject) => {\n        approvedOrderRequest(item).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    RejectOrderRequest({\n      commit\n    }, item) {\n      return new Promise((resolve, reject) => {\n        rejectOrderRequest(item).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["getOrderRequests","insertOrderRequest","updateOrderRequest","deleteOrderRequest","sendOrderRequest","approvedOrderRequest","rejectOrderRequest","createHelpers","getDataFields","updateDataField","getterType","mutationType","namespaced","state","grids","pageCount","editedItem","id","note","orderRequestType","branchId","printOutCenter","defaultItem","getters","mutations","SET_DATA_ORDER_REQUESTS","items","SET_PAGE_COUNT","RESET_DATA","Object","assign","SET_ITEM_ORDER_REQUEST","item","actions","ClearDataItem","commit","SetDataUpdate","GetOrderRequests","filter","Promise","resolve","reject","then","response","result","data","catch","error","InsertOrderRequest","rootState","auth","userInfo","messages","UpdateOrderRequest","DeleteOrderRequest","param","orderRequestId","console","log","SendOrderRequest","ApprovedOrderRequest","RejectOrderRequest"],"sources":["D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/src/views/OrderRequest/stores/Index.js"],"sourcesContent":["import {\r\n  getOrderRequests,\r\n  insertOrderRequest,\r\n  updateOrderRequest,\r\n  deleteOrderRequest,\r\n  sendOrderRequest,\r\n  approvedOrderRequest,\r\n  rejectOrderRequest,\r\n} from \"../Apis/Index.js\";\r\n\r\nimport { createHelpers } from \"vuex-map-fields\";\r\nconst { getDataFields, updateDataField } = createHelpers({\r\n  getterType: \"getDataFields\",\r\n  mutationType: \"updateDataField\",\r\n});\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    grids: [],\r\n    pageCount: 0,\r\n\r\n    editedItem: {\r\n      id: null,\r\n      note: null,\r\n      orderRequestType: null,\r\n      branchId: null,\r\n      printOutCenter:false,\r\n    },\r\n\r\n    defaultItem: {\r\n      id: null,\r\n      note: null,\r\n      orderRequestType: null,\r\n      branchId: null,\r\n      printOutCenter:false,\r\n    },\r\n  },\r\n\r\n  getters: {\r\n    getDataFields,\r\n  },\r\n\r\n  mutations: {\r\n    updateDataField,\r\n\r\n    SET_DATA_ORDER_REQUESTS(state, items) {\r\n      state.grids = items;\r\n    },\r\n\r\n    SET_PAGE_COUNT(state, pageCount) {\r\n      state.pageCount = pageCount;\r\n    },\r\n\r\n    RESET_DATA(state) {\r\n      state.editedItem = Object.assign({}, state.defaultItem);\r\n    },\r\n\r\n    SET_ITEM_ORDER_REQUEST(state, item) {\r\n      state.editedItem.id = item.id;\r\n      state.editedItem.note = item.note;\r\n      state.editedItem.orderRequestType = item.orderRequestType;\r\n      state.editedItem.branchId = item.branchId;\r\n    },\r\n  },\r\n\r\n  actions: {\r\n    ClearDataItem({ commit }) {\r\n      commit(\"RESET_DATA\");\r\n    },\r\n\r\n    SetDataUpdate({ commit }, item) {\r\n      commit(\"SET_ITEM_ORDER_REQUEST\", item);\r\n    },\r\n\r\n    GetOrderRequests({ commit }, filter) {\r\n      return new Promise((resolve, reject) => {\r\n        getOrderRequests(filter)\r\n          .then((response) => {\r\n            commit(\"SET_DATA_ORDER_REQUESTS\", response.result.data);\r\n            commit(\"SET_PAGE_COUNT\", response.result.pageCount);\r\n\r\n            resolve(response);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    InsertOrderRequest({ commit, state ,rootState}) {\r\n\r\n      const data= {\r\n        \r\n        note: state.editedItem.note,\r\n        orderRequestType: state.editedItem.orderRequestType,\r\n        branchId: state.editedItem.branchId ?? rootState.auth.userInfo.branchId,\r\n        printOutCenter:state.editedItem.printOutCenter,\r\n      };\r\n\r\n      return new Promise((resolve, reject) => {\r\n        insertOrderRequest(data)\r\n          .then((response) => {\r\n            commit(\"RESET_DATA\");\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    UpdateOrderRequest({ commit, state,rootState }) {\r\n      const data= {\r\n        id: state.editedItem.id,\r\n        note: state.editedItem.note,\r\n        orderRequestType: state.editedItem.orderRequestType,\r\n        branchId: state.editedItem.branchId ?? rootState.auth.userInfo.branchId,\r\n        printOutCenter:state.editedItem.printOutCenter,\r\n      };\r\n      return new Promise((resolve, reject) => {\r\n        updateOrderRequest(data)\r\n          .then((response) => {\r\n            commit(\"RESET_DATA\");\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    DeleteOrderRequest({ commit }, item) {\r\n      const param = {\r\n        orderRequestId: item.orderRequestId,\r\n      };\r\n      return new Promise((resolve, reject) => {\r\n        deleteOrderRequest(param)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    SendOrderRequest({ commit }, item) {\r\n      return new Promise((resolve, reject) => {\r\n        sendOrderRequest(item)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n    ApprovedOrderRequest({ commit }, item) {\r\n      return new Promise((resolve, reject) => {\r\n        approvedOrderRequest(item)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    RejectOrderRequest({ commit }, item) {\r\n      return new Promise((resolve, reject) => {\r\n        rejectOrderRequest(item)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}