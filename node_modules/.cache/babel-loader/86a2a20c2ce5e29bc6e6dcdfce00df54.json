{"ast":null,"code":"import * as enums from \"./enum.js\";\nexport function OrderRequestTypeToTextPublic(orderRequestType) {\n  return enums.OrderRequestTypeList.find(pred => pred.id == orderRequestType)?.name;\n}\nexport function InputTypeToTextPublic(inputType) {\n  return enums.InputTypeList.find(pred => pred.id == inputType)?.name;\n}\nexport function OrderItemStateToTextPublic(orderItemState) {\n  return enums.OrderItemStateList.find(pred => pred.id == orderItemState)?.name;\n}\nexport function OrderRequestStateToTextPublic(orderRequestState) {\n  return enums.OrderRequestStateList.find(pred => pred.id == orderRequestState)?.name;\n}\nexport function ChangeColorOrderRequestTypePublic(orderRequestType) {\n  let color = \"\";\n  switch (orderRequestType) {\n    case enums.OrderRequestType.Individual:\n      color = \"indigo\";\n      break;\n    case enums.OrderRequestType.Companies:\n      color = \"green\";\n      break;\n    case enums.OrderRequestType.Certified:\n      color = \"orange\";\n      break;\n    default:\n      break;\n  }\n  return color;\n}\nexport function ValidateAccountCountWithMinBranchCountPublic(item) {\n  return item?.accountCount < item?.minOrderItemBranch;\n}\nexport function ValidateOrderRequestStatePublic(item) {\n  return item?.orderRequestState != enums.OrderRequestState.Process;\n}\nexport function OrderRequestStateColorPublic(orderRequestState) {\n  let color = \"\";\n  switch (orderRequestState) {\n    case enums.OrderRequestState.Process:\n      color = \"orange\";\n      break;\n    case enums.OrderRequestState.Pinding:\n      color = \"#E91D62\";\n      break;\n    case enums.OrderRequestState.GeneretedCode:\n      color = \"indigo\";\n      break;\n    case enums.OrderRequestState.SendRequestBranch:\n      color = \"green\";\n      break;\n    case enums.OrderRequestState.RejectRequest:\n      color = \"error\";\n      break;\n    case enums.OrderRequestState.PrintOutCenter:\n      color = \"indigo\";\n      break;\n    case enums.OrderRequestState.OrderRequestPrinting:\n      color = \"indigo\";\n      break;\n    case enums.OrderRequestState.OrderRequestPrintedDone:\n      color = \"green\";\n      break;\n    case enums.OrderRequestState.IsFrozen:\n      color = \"error\";\n      break;\n    case enums.OrderRequestState.IsRejectedByCenter:\n      color = \"error\";\n      break;\n    default:\n      break;\n  }\n  return color;\n}\nexport function UserTypeStateToTextPublic(userType) {\n  return enums.UserTypeStateList.find(pred => pred.id == userType)?.name;\n}\nexport function HasPermassion(userPermasstions = [], isAccess = []) {\n  return userPermasstions.some(item => isAccess.includes(item));\n}\nexport function AccountStatusToText(status) {\n  let message = \"\";\n  switch (status) {\n    case enums.AccountState.IsActive:\n      message = true;\n      break;\n    case enums.AccountState.IsSuspended:\n      message = false;\n      break;\n  }\n  return message;\n}\nexport function LogActionTypeToText(logAction) {\n  return enums.LogActionType.find(pred => pred.id == logAction)?.name;\n}","map":{"version":3,"names":["enums","OrderRequestTypeToTextPublic","orderRequestType","OrderRequestTypeList","find","pred","id","name","InputTypeToTextPublic","inputType","InputTypeList","OrderItemStateToTextPublic","orderItemState","OrderItemStateList","OrderRequestStateToTextPublic","orderRequestState","OrderRequestStateList","ChangeColorOrderRequestTypePublic","color","OrderRequestType","Individual","Companies","Certified","ValidateAccountCountWithMinBranchCountPublic","item","accountCount","minOrderItemBranch","ValidateOrderRequestStatePublic","OrderRequestState","Process","OrderRequestStateColorPublic","Pinding","GeneretedCode","SendRequestBranch","RejectRequest","PrintOutCenter","OrderRequestPrinting","OrderRequestPrintedDone","IsFrozen","IsRejectedByCenter","UserTypeStateToTextPublic","userType","UserTypeStateList","HasPermassion","userPermasstions","isAccess","some","includes","AccountStatusToText","status","message","AccountState","IsActive","IsSuspended","LogActionTypeToText","logAction","LogActionType"],"sources":["D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/src/models/mothedPublic.js"],"sourcesContent":["import * as enums from \"./enum.js\";\r\n\r\nexport function OrderRequestTypeToTextPublic(orderRequestType) {\r\n  return enums.OrderRequestTypeList.find((pred) => pred.id == orderRequestType)\r\n    ?.name;\r\n}\r\n\r\nexport function InputTypeToTextPublic(inputType) {\r\n  return enums.InputTypeList.find((pred) => pred.id == inputType)?.name;\r\n}\r\nexport function OrderItemStateToTextPublic(orderItemState) {\r\n  return enums.OrderItemStateList.find((pred) => pred.id == orderItemState)\r\n    ?.name;\r\n}\r\n\r\nexport function OrderRequestStateToTextPublic(orderRequestState) {\r\n  return enums.OrderRequestStateList.find(\r\n    (pred) => pred.id == orderRequestState\r\n  )?.name;\r\n}\r\n\r\nexport function ChangeColorOrderRequestTypePublic(orderRequestType) {\r\n  let color = \"\";\r\n  switch (orderRequestType) {\r\n    case enums.OrderRequestType.Individual:\r\n      color = \"indigo\";\r\n      break;\r\n    case enums.OrderRequestType.Companies:\r\n      color = \"green\";\r\n      break;\r\n    case enums.OrderRequestType.Certified:\r\n      color = \"orange\";\r\n      break;\r\n\r\n    default:\r\n      break;\r\n  }\r\n  return color;\r\n}\r\n\r\nexport function ValidateAccountCountWithMinBranchCountPublic(item) {\r\n  return item?.accountCount < item?.minOrderItemBranch;\r\n}\r\n\r\nexport function ValidateOrderRequestStatePublic(item) {\r\n  return item?.orderRequestState != enums.OrderRequestState.Process;\r\n}\r\n\r\nexport function OrderRequestStateColorPublic(orderRequestState) {\r\n  let color = \"\";\r\n  switch (orderRequestState) {\r\n    case enums.OrderRequestState.Process:\r\n      color = \"orange\";\r\n      break;\r\n    case enums.OrderRequestState.Pinding:\r\n      color = \"#E91D62\";\r\n      break;\r\n    case enums.OrderRequestState.GeneretedCode:\r\n      color = \"indigo\";\r\n      break;\r\n    case enums.OrderRequestState.SendRequestBranch:\r\n      color = \"green\";\r\n      break;\r\n    case enums.OrderRequestState.RejectRequest:\r\n      color = \"error\";\r\n      break;\r\n    case enums.OrderRequestState.PrintOutCenter:\r\n      color = \"indigo\";\r\n      break;\r\n    case enums.OrderRequestState.OrderRequestPrinting:\r\n      color = \"indigo\";\r\n      break;\r\n    case enums.OrderRequestState.OrderRequestPrintedDone:\r\n      color = \"green\";\r\n      break;\r\n    case enums.OrderRequestState.IsFrozen:\r\n      color = \"error\";\r\n      break;\r\n    case enums.OrderRequestState.IsRejectedByCenter:\r\n      color = \"error\";\r\n      break;\r\n    default:\r\n      break;\r\n  }\r\n\r\n  return color;\r\n}\r\n\r\nexport function UserTypeStateToTextPublic(userType) {\r\n  return enums.UserTypeStateList.find((pred) => pred.id == userType)?.name;\r\n}\r\n\r\nexport function HasPermassion(userPermasstions = [], isAccess = []) {\r\n  return userPermasstions.some((item) => isAccess.includes(item));\r\n}\r\n\r\nexport function AccountStatusToText(status) {\r\n  let message = \"\";\r\n  switch (status) {\r\n    case enums.AccountState.IsActive:\r\n      message = true;\r\n      break;\r\n    case enums.AccountState.IsSuspended:\r\n      message = false;\r\n      break;\r\n  }\r\n\r\n  return message;\r\n}\r\n\r\nexport function LogActionTypeToText(logAction) {\r\n  return enums.LogActionType.find((pred) => pred.id == logAction)?.name;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}