{"ast":null,"code":"import { getAccounts, insertAccount, insertAccounts, updateAccount, deleteAccount, activateAccount, activatePrintExternally } from \"../Apis/index.js\";\nimport { createHelpers } from \"vuex-map-fields\";\nconst {\n  getDataFields,\n  updateDataField\n} = createHelpers({\n  getterType: \"getDataFields\",\n  mutationType: \"updateDataField\"\n});\nexport default {\n  namespaced: true,\n  state: {\n    grids: [],\n    excelData: [],\n    activeBranchs: [],\n    pageCount: 0,\n    editedItem: {\n      id: null,\n      accountName: null,\n      accountNo: null,\n      branchId: null,\n      accountType: null,\n      accountState: null,\n      phoneNumber: null,\n      inputType: null\n    },\n    defaultItem: {\n      id: null,\n      accountName: null,\n      accountNo: null,\n      branchId: null,\n      accountType: null,\n      accountState: null,\n      phoneNumber: null,\n      inputType: null\n    }\n  },\n  getters: {\n    getDataFields\n  },\n  mutations: {\n    updateDataField,\n    SET_DATA_ACCOUNTS(state, items) {\n      state.grids = items;\n    },\n    SET_DATA_ACTIVE_ACCOUNTS(state, items) {\n      state.activeBranchs = items;\n    },\n    SET_PAGE_COUNT(state, pageCount) {\n      state.pageCount = pageCount;\n    },\n    RESET_DATA(state) {\n      state.editedItem = Object.assign({}, state.defaultItem);\n    },\n    RESET_EXCEL_DATA(state) {\n      state.excelData = [];\n    },\n    SET_ITEM_ACCOUNTS(state, item) {\n      state.editedItem.id = item.id;\n      state.editedItem.accountName = item.accountName;\n      state.editedItem.accountNo = item.accountNo;\n      state.editedItem.branchId = item.branchId;\n      state.editedItem.accountType = item.accountTypeValue;\n      state.editedItem.accountState = item.accountState;\n      state.editedItem.phoneNumber = item.phoneNumber;\n    }\n  },\n  actions: {\n    ClearDataItem({\n      commit\n    }) {\n      commit(\"RESET_DATA\");\n    },\n    ClearExcelData({\n      commit\n    }) {\n      commit(\"RESET_EXCEL_DATA\");\n    },\n    InsertAccount({\n      commit,\n      state\n    }) {\n      return new Promise((resolve, reject) => {\n        insertAccount(state.editedItem).then(response => {\n          commit(\"RESET_DATA\");\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    InsertListOfAccounts({\n      commit,\n      state\n    }) {\n      return new Promise((resolve, reject) => {\n        insertAccounts(state.excelData).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    UpdateAccount({\n      commit,\n      state\n    }) {\n      let updateModel = {\n        Id: state.editedItem.id,\n        AccountName: state.editedItem.accountName,\n        AccountNo: state.editedItem.accountNo,\n        BranchId: state.editedItem.branchId,\n        AccountType: state.editedItem.accountType,\n        PhoneNumber: state.editedItem.phoneNumber\n      };\n      return new Promise((resolve, reject) => {\n        updateAccount(updateModel).then(response => {\n          commit(\"RESET_DATA\");\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    DeleteAccount({\n      commit\n    }, item) {\n      const param = {\n        id: item.id\n      };\n      return new Promise((resolve, reject) => {\n        deleteAccount(param).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    ActivateAccount({\n      commit\n    }, item) {\n      const param = {\n        id: item.id,\n        accountState: item.accountStateValue\n      };\n      return new Promise((resolve, reject) => {\n        activateAccount(param).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    ActivatePrintExternally({\n      commit\n    }, item) {\n      const param = {\n        id: item.id,\n        status: item.printExternally\n      };\n      return new Promise((resolve, reject) => {\n        activatePrintExternally(param).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    SetDataUpdate({\n      commit\n    }, item) {\n      commit(\"SET_ITEM_ACCOUNTS\", item);\n    },\n    GetAccounts({\n      commit\n    }, filter) {\n      return new Promise((resolve, reject) => {\n        getAccounts(filter).then(response => {\n          commit(\"SET_DATA_ACCOUNTS\", response.result.data);\n          commit(\"SET_PAGE_COUNT\", response.result.pageCount);\n          resolve(response);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["getAccounts","insertAccount","insertAccounts","updateAccount","deleteAccount","activateAccount","activatePrintExternally","createHelpers","getDataFields","updateDataField","getterType","mutationType","namespaced","state","grids","excelData","activeBranchs","pageCount","editedItem","id","accountName","accountNo","branchId","accountType","accountState","phoneNumber","inputType","defaultItem","getters","mutations","SET_DATA_ACCOUNTS","items","SET_DATA_ACTIVE_ACCOUNTS","SET_PAGE_COUNT","RESET_DATA","Object","assign","RESET_EXCEL_DATA","SET_ITEM_ACCOUNTS","item","accountTypeValue","actions","ClearDataItem","commit","ClearExcelData","InsertAccount","Promise","resolve","reject","then","response","messages","catch","error","InsertListOfAccounts","console","log","UpdateAccount","updateModel","Id","AccountName","AccountNo","BranchId","AccountType","PhoneNumber","DeleteAccount","param","ActivateAccount","accountStateValue","ActivatePrintExternally","status","printExternally","SetDataUpdate","GetAccounts","filter","result","data"],"sources":["D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/src/views/Account/Stores/index.js"],"sourcesContent":["import {\r\n  getAccounts,\r\n  insertAccount,\r\n  insertAccounts,\r\n  updateAccount,\r\n  deleteAccount,\r\n  activateAccount,\r\n  activatePrintExternally,\r\n} from \"../Apis/index.js\";\r\n\r\nimport { createHelpers } from \"vuex-map-fields\";\r\nconst { getDataFields, updateDataField } = createHelpers({\r\ngetterType: \"getDataFields\",\r\nmutationType: \"updateDataField\",\r\n});\r\n\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    grids: [],\r\n    \r\n    excelData: [],\r\n\r\n    activeBranchs: [],\r\n    pageCount: 0,\r\n    \r\n    editedItem: {\r\n      id: null,\r\n      accountName: null,\r\n      accountNo: null,\r\n      branchId:null,\r\n      accountType: null,\r\n      accountState:null,\r\n      phoneNumber:null,\r\n      inputType:null,\r\n    },\r\n    \r\n    defaultItem: {\r\n      id: null,\r\n      accountName: null,\r\n      accountNo: null,\r\n      branchId:null,\r\n      accountType: null,\r\n      accountState:null,\r\n      phoneNumber:null,\r\n      inputType:null,\r\n    },\r\n  },\r\n\r\n  getters: {\r\n    getDataFields,\r\n  },\r\n\r\n  mutations: {\r\n    updateDataField,\r\n\r\n    SET_DATA_ACCOUNTS(state, items) {\r\n      state.grids = items;\r\n    },\r\n\r\n    SET_DATA_ACTIVE_ACCOUNTS(state, items) {\r\n      state.activeBranchs = items;\r\n    },\r\n\r\n    SET_PAGE_COUNT(state, pageCount) {\r\n      state.pageCount = pageCount;\r\n    },\r\n\r\n    RESET_DATA(state) {\r\n      state.editedItem = Object.assign({}, state.defaultItem);\r\n    },\r\n\r\n    RESET_EXCEL_DATA(state) {\r\n      state.excelData = [];\r\n    },\r\n    \r\n    SET_ITEM_ACCOUNTS(state, item) {\r\n      state.editedItem.id = item.id;\r\n      state.editedItem.accountName = item.accountName;\r\n      state.editedItem.accountNo = item.accountNo;\r\n      state.editedItem.branchId = item.branchId;\r\n      state.editedItem.accountType = item.accountTypeValue;\r\n      state.editedItem.accountState = item.accountState;\r\n      state.editedItem.phoneNumber = item.phoneNumber;\r\n    },\r\n\r\n  },\r\n\r\n  actions: {\r\n\r\n    ClearDataItem({ commit }) {\r\n      commit(\"RESET_DATA\");\r\n    },\r\n\r\n    ClearExcelData({ commit }) {\r\n      commit(\"RESET_EXCEL_DATA\");\r\n    },\r\n\r\n    InsertAccount({ commit, state }) {\r\n      return new Promise((resolve, reject) => {\r\n        insertAccount(state.editedItem)\r\n          .then((response) => {\r\n            commit(\"RESET_DATA\");\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    InsertListOfAccounts({ commit, state }) {\r\n      return new Promise((resolve, reject) => {\r\n        insertAccounts(state.excelData)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    UpdateAccount({ commit, state }) {\r\n      let updateModel = {\r\n        Id : state.editedItem.id,\r\n        AccountName : state.editedItem.accountName,\r\n        AccountNo : state.editedItem.accountNo,\r\n        BranchId : state.editedItem.branchId,\r\n        AccountType : state.editedItem.accountType,\r\n        PhoneNumber : state.editedItem.phoneNumber,\r\n      };\r\n\r\n      return new Promise((resolve, reject) => {\r\n        updateAccount(updateModel)\r\n          .then((response) => {\r\n            commit(\"RESET_DATA\");\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    DeleteAccount({ commit }, item) {\r\n      const param = {\r\n        id: item.id\r\n      };\r\n      return new Promise((resolve, reject) => {\r\n        deleteAccount(param)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    ActivateAccount({ commit }, item) {\r\n      const param = {\r\n        id: item.id,\r\n        accountState: item.accountStateValue\r\n      };\r\n      return new Promise((resolve, reject) => {\r\n        activateAccount(param)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    ActivatePrintExternally({ commit }, item) {\r\n      const param = {\r\n        id: item.id,\r\n        status: item.printExternally\r\n      };\r\n      return new Promise((resolve, reject) => {\r\n        activatePrintExternally(param)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    SetDataUpdate({ commit }, item) {\r\n      commit(\"SET_ITEM_ACCOUNTS\", item);\r\n    },\r\n\r\n    GetAccounts({ commit }, filter) {\r\n      return new Promise((resolve, reject) => {\r\n        getAccounts(filter)\r\n          .then((response) => {\r\n            commit(\"SET_DATA_ACCOUNTS\", response.result.data);\r\n            commit(\"SET_PAGE_COUNT\", response.result.pageCount);\r\n            resolve(response);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n  },\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}