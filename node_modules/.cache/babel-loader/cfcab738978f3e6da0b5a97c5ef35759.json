{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { EventBus } from \"../../../eventBus.js\";\nimport { mapActions } from \"vuex\";\nimport { createHelpers } from \"vuex-map-fields\";\nconst {\n  mapFields\n} = createHelpers({\n  getterType: \"getDataFields\",\n  mutationType: \"updateDataField\"\n});\nimport BranchSettingComponent from \"../../SharedComponents/branchSettingComponent.vue\";\nimport { validationInput } from \"../../../models/validationInput.js\";\nexport default {\n  name: \"insert-Or-Update\",\n  props: {\n    updateItemProp: {},\n    dialogProp: {}\n  },\n  components: {\n    BranchSettingComponent\n  },\n  data: () => ({\n    dialog: false,\n    valid: false,\n    validationInput: validationInput,\n    banks: [],\n    isLoading: false,\n    selectedBank: null,\n    searchBank: null,\n    filterBankData: {\n      bankName: null\n    },\n    regions: [],\n    isLoadingRegion: false,\n    selectedRegion: null,\n    searchRegion: null,\n    filterRegionData: {\n      bankId: null,\n      regionName: null\n    }\n  }),\n  computed: {\n    ...mapFields(\"branchStore\", {\n      branchNo: \"editedItem.branchNo\",\n      branchId: \"editedItem.id\",\n      name: \"editedItem.name\",\n      branchRegionId: \"editedItem.branchRegionId\",\n      lastSerialCertified: \"editedItem.lastSerialCertified\",\n      lastSerial: \"editedItem.lastSerial\",\n      lastCountChekBook: \"editedItem.lastCountChekBook\"\n    }),\n    // ...mapFields(\"bankRegionStore\", {\n    //   regions: \"activeBankRegions\",\n    // }),\n    // ...mapFields(\"bankStore\", {\n    //   banks: \"grids\",\n    // }),\n\n    formTitle() {\n      return this.branchId ? \"تعديل بيانات الفرع\" : \"إضافة فرع جديد\";\n    },\n    isInsert() {\n      return !this.branchId;\n    }\n  },\n  watch: {\n    updateItemProp: {\n      handler(data) {\n        if (data) this.editSelected(data);\n      },\n      immediate: true\n    },\n    searchBank(val) {\n      if (this.isLoading) return;\n      this.filterBankData.bankName = val;\n    },\n    searchRegion(val) {\n      if (this.isLoadingRegion) return;\n      this.filterRegionData.regionName = val;\n    },\n    selectedBank(val) {\n      if (!val) this.clearRegionData();\n    }\n  },\n  methods: {\n    ...mapActions({\n      ClearDataItemStore: \"branchStore/ClearDataItem\",\n      SetDataUpdateStore: \"branchStore/SetDataUpdate\",\n      InsertBranchStore: \"branchStore/InsertBranch\",\n      UpdateBranchStore: \"branchStore/UpdateBranch\",\n      GetActiveBankRegions: \"bankRegionStore/GetActiveBankRegions\",\n      GetBankStore: \"bankStore/GetBanks\"\n    }),\n    openDialog() {\n      this.dialog = true;\n    },\n    hasPermassion(crrentUser) {\n      this.userPermasstion = this.$store.getters[\"auth/getRole\"];\n      var result = this.userPermasstion.some(item => crrentUser.includes(item));\n      return result;\n    },\n    getRegionByBankId() {\n      if (!this.selectedBank) return;\n      this.clearRegionData();\n      this.filterRegionData.bankId = this.selectedBank?.bankId;\n      this.getBankRegions();\n    },\n    getBankRegions() {\n      try {\n        this.isLoadingRegion = true;\n        this.GetActiveBankRegions(this.filterRegionData).then(() => {\n          this.regions = [...this.$store.getters[\"bankRegionStore/GET_ACTIVE_BANKREGIONS\"]];\n          this.isLoadingRegion = false;\n        }).catch(() => {\n          this.isLoadingRegion = false;\n        });\n      } catch (error) {\n        this.isLoadingRegion = false;\n        this.notify(error, \"#1d262d\");\n      }\n    },\n    clearRegionData() {\n      this.isLoadingRegion = false;\n      this.regions = [];\n      this.selectedRegion = null;\n      this.searchRegion = null;\n      this.filterRegionData.bankId = null;\n      this.filterRegionData.regionName = null;\n    },\n    clearBankData() {\n      this.isLoading = false;\n      this.banks = [];\n      this.selectedBank = null;\n      this.searchBank = null;\n      this.filterBankData.bankName = null;\n    },\n    getBanks() {\n      try {\n        this.isLoading = true;\n        this.GetBankStore(this.filterBankData).then(() => {\n          this.banks = [...this.$store.getters[\"bankStore/GET_ACTIVE_BANKS\"]];\n          this.isLoading = false;\n        }).catch(error => {\n          this.notify(`${error}`, \"#1d262d\");\n          this.isLoading = false;\n        });\n      } catch (error) {\n        this.isLoading = false;\n        this.notify(error, \"#1d262d\");\n      }\n    },\n    editSelected(item) {\n      this._selectedBankEdit(item);\n      this._selectedBankRegionEdit(item);\n      this.SetDataUpdateStore(item);\n      this.dialog = true;\n    },\n    _selectedBankEdit(item) {\n      if (item.bankId && item.bankName) {\n        this.banks.push({\n          name: item.bankName,\n          bankId: item.bankId\n        });\n        this.selectedBank = this.banks.find(pred => pred.bankId == item.bankId);\n      }\n    },\n    _selectedBankRegionEdit(item) {\n      if (item.branchRegionId && item.branchRegionName) {\n        this.regions.push({\n          regionName: item.branchRegionName,\n          bankRegionId: item.branchRegionId\n        });\n        this.selectedRegion = this.regions.find(pred => pred.bankRegionId == item.branchRegionId);\n      }\n    },\n    close() {\n      setTimeout(() => {\n        this.clearBankData();\n        this.clearRegionData();\n        this.ClearDataItemStore();\n      }, 300);\n      this.dialog = false;\n      this.resetValidation();\n      EventBus.$emit(\"closeDialogUpdateBranch\");\n    },\n    save() {\n      if (this.branchId) {\n        this.updateBranch();\n      } else {\n        this.insertBranch();\n      }\n    },\n    insertBranch() {\n      this.branchRegionId = this.selectedRegion?.bankRegionId ?? null;\n      this.$store.dispatch(\"loading\", true);\n      this.InsertBranchStore().then(res => {\n        this.notify(`${res}`, \"#1d262d\");\n        EventBus.$emit(\"refreshData\");\n        this.close();\n      }).catch(error => {\n        this.notify(`${error}`, \"#1d262d\");\n        this.$store.dispatch(\"loading\", false);\n      });\n    },\n    updateBranch() {\n      this.$store.dispatch(\"loading\", true);\n      this.UpdateBranchStore().then(res => {\n        this.notify(`${res}`, \"#1d262d\");\n        EventBus.$emit(\"refreshData\");\n        this.close();\n      }).catch(error => {\n        this.notify(`${error}`, \"#1d262d\");\n        this.$store.dispatch(\"loading\", false);\n      });\n    },\n    resetValidation() {\n      this.$refs.formBranch?.reset();\n    },\n    notify(text, color) {\n      this.$store.commit(\"showMessage\", {\n        text: text,\n        color: color\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AAiMA;AACA;AACA;AACA;EAAAA;AAAA;EACAC;EACAC;AACA;AAEA;AACA;AACA;EACAC;EACAC;IACAC;IACAC;EACA;EACAC;IACAC;EACA;EAEAC;IACAC;IACAC;IACAC;IAEAC;IACAC;IACAC;IACAC;IACAC;MACAC;IACA;IAEAC;IACAC;IACAC;IACAC;IACAC;MACAC;MACAC;IACA;EACA;EAEAC;IACA;MACAC;MACAC;MACAzB;MACA0B;MACAC;MACAC;MACAC;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;;IAEAC;MACA;IACA;IAEAC;MACA;IACA;EACA;EAEAC;IACA9B;MACA+B;QACA;MACA;MACAC;IACA;IACArB;MACA;MAEA;IACA;IAEAM;MACA;MACA;IACA;IAEAP;MACA;IACA;EACA;EACAuB;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;IACAC;MACA;IACA;IACAC;MACA;MACA,+CACAC,0BACA;MACA;IACA;IAIAC;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;QACA;QACA,iDACAC;UACA;UACA;QACA,GACAC;UACA;QACA;MACA;QACA;QACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IACAC;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;QACA;QACA,uCACAJ;UACA;UACA;QACA,GACAC;UACA;UACA;QACA;MACA;QACA;QACA;MACA;IACA;IAEAI;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;QACA;UACArD;UACAqB;QACA;QAGA,oCACAiC,mCACA;MACA;IACA;IACAC;MACA;QACA;UACAjC;UACAkC;QACA;QAEA,wCACAF,iDACA;MACA;IACA;IAEAG;MACAC;QACA;QACA;QACA;MACA;MACA;MACA;MACAC;IACA;IAEAC;MACA;QACA;MACA;QACA;MACA;IACA;IAEAC;MACA;MACA;MACA,yBACAd;QACA;QACAY;QACA;MACA,GACAX;QACA;QACA;MACA;IACA;IACAc;MACA;MACA,yBACAf;QACA;QACAY;QACA;MACA,GACAX;QACA;QACA;MACA;IACA;IAEAe;MACA;IACA;IAEAC;MACA;QAAAC;QAAAC;MAAA;IACA;EACA;AACA","names":["mapFields","getterType","mutationType","name","props","updateItemProp","dialogProp","components","BranchSettingComponent","data","dialog","valid","validationInput","banks","isLoading","selectedBank","searchBank","filterBankData","bankName","regions","isLoadingRegion","selectedRegion","searchRegion","filterRegionData","bankId","regionName","computed","branchNo","branchId","branchRegionId","lastSerialCertified","lastSerial","lastCountChekBook","formTitle","isInsert","watch","handler","immediate","methods","ClearDataItemStore","SetDataUpdateStore","InsertBranchStore","UpdateBranchStore","GetActiveBankRegions","GetBankStore","openDialog","hasPermassion","crrentUser","getRegionByBankId","getBankRegions","then","catch","clearRegionData","clearBankData","getBanks","editSelected","_selectedBankEdit","pred","_selectedBankRegionEdit","bankRegionId","close","setTimeout","EventBus","save","insertBranch","updateBranch","resetValidation","notify","text","color"],"sourceRoot":"src/views/Branch/Components","sources":["InsertOrUpdateComponent.vue"],"sourcesContent":["<template>\r\n  <v-dialog v-model=\"dialog\" max-width=\"800px\" persistent>\r\n    <template v-slot:activator=\"{ on }\">\r\n      <template>\r\n        <v-btn\r\n          color=\"#536DFE\"\r\n          class=\"white--text \"\r\n          @click=\"openDialog\"\r\n          v-on=\"on\"\r\n          elevation=\"5\"\r\n        >\r\n          <v-icon class=\"ml-2\">mdi-plus-circle</v-icon><span> إضافة فرع</span>\r\n        </v-btn>\r\n      </template>\r\n    </template>\r\n    <v-card>\r\n      <v-card-title>\r\n        <span class=\"headline\">{{ formTitle }}</span>\r\n      </v-card-title>\r\n\r\n      <v-divider></v-divider>\r\n\r\n      <v-card-text>\r\n        <v-container>\r\n          <v-form ref=\"formBranch\" v-model=\"valid\">\r\n            <v-row>\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-text-field\r\n                  prepend-icon=\"mdi-numeric\"\r\n                  v-model=\"branchNo\"\r\n                  label=\"رقم الفرع\"\r\n                  :rules=\"[\r\n                    validationInput.isEmpty,\r\n                    validationInput.numberOnly,\r\n                    validationInput.minLength,\r\n                    validationInput.numberNotZero,\r\n                  ]\"\r\n                  required\r\n                  dense\r\n                  maxLength=\"3\"\r\n                ></v-text-field>\r\n              </v-col>\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-text-field\r\n                  prepend-icon=\"location_city\"\r\n                  v-model=\"name\"\r\n                  dense\r\n                  :rules=\"[\r\n                    validationInput.isEmpty,\r\n                    validationInput.isArabic,\r\n                    validationInput.minLength,\r\n                    validationInput.currectInput,\r\n                  ]\"\r\n                  label=\"إسم الفرع\"\r\n                  required\r\n                  maxLength=\"50\"\r\n                ></v-text-field>\r\n              </v-col>\r\n              <v-col cols=\"12\" sm=\"6\" v-if=\"hasPermassion(['AdminSystem'])\">\r\n                <v-autocomplete\r\n                  v-model=\"selectedBank\"\r\n                  :items=\"banks\"\r\n                  dense\r\n                  :loading=\"isLoading\"\r\n                  single-line\r\n                  :search-input.sync=\"searchBank\"\r\n                  @keyup=\"getBanks\"\r\n                  item-text=\"name\"\r\n                  item-value=\"bankId\"\r\n                  label=\"اختر المصرف\"\r\n                  placeholder=\"يجب إختيار المصرف\"\r\n                  return-object\r\n                  no-data-text=\"قم بالبحث عن اسم المصرف\"\r\n                  clearable\r\n                  :disabled=\"!isInsert\"\r\n                  :rules=\"isInsert ? [validationInput.selectedValidation] : []\"\r\n                  required\r\n                  prepend-icon=\"mdi-bank\"\r\n                  @change=\"getRegionByBankId\"\r\n                ></v-autocomplete>\r\n              </v-col>\r\n              <!--  -->\r\n              <v-col\r\n                cols=\"12\"\r\n                sm=\"6\"\r\n                v-if=\"hasPermassion(['AddBranchOtherRegions','AdminSystem'])\"\r\n              >\r\n                <v-autocomplete\r\n                  v-model=\"selectedRegion\"\r\n                  :items=\"regions\"\r\n                  :loading=\"isLoadingRegion\"\r\n                  single-line\r\n                  dense\r\n                  :disabled=\"!isInsert\"\r\n                  :rules=\"isInsert ? [validationInput.selectedValidation] : []\"\r\n                  required\r\n                  :search-input.sync=\"searchRegion\"\r\n                  item-text=\"regionName\"\r\n                  item-value=\"bankRegionId\"\r\n                  label=\"اختر المنطقة\"\r\n                  placeholder=\"يجب إختيار المنطقة\"\r\n                  return-object\r\n                  no-data-text=\"قم يالبحث عن اسم المنطقة\"\r\n                  clearable\r\n                  @keyup=\"getBankRegions\"\r\n                  prepend-icon=\"mdi-map-marker\"\r\n                ></v-autocomplete>\r\n              </v-col>\r\n              <v-col\r\n                cols=\"12\"\r\n                sm=\"6\"\r\n                v-if=\"hasPermassion(['AdminSystem']) || isInsert\"\r\n              >\r\n                <v-text-field\r\n                  prepend-icon=\"mdi-numeric\"\r\n                  v-model=\"lastSerialCertified\"\r\n                  :rules=\"[validationInput.numberOnly]\"\r\n                  label=\"أخر تسلسل صكوك المصدقة\"\r\n                  required\r\n                  dense\r\n                  maxLength=\"10\"\r\n                ></v-text-field>\r\n              </v-col>\r\n              <v-col\r\n                cols=\"12\"\r\n                sm=\"6\"\r\n                v-if=\"hasPermassion(['AdminSystem']) || isInsert\"\r\n              >\r\n                <v-text-field\r\n                  prepend-icon=\"mdi-numeric\"\r\n                  v-model=\"lastSerial\"\r\n                  label=\"أخر تسلسل لدفاتر (افراد - شركات )\"\r\n                  required\r\n                  :rules=\"[validationInput.numberOnly]\"\r\n                  dense\r\n                  maxLength=\"10\"\r\n                ></v-text-field>\r\n              </v-col>\r\n              <v-col\r\n                cols=\"12\"\r\n                sm=\"6\"\r\n                v-if=\"hasPermassion(['AdminSystem']) || isInsert\"\r\n              >\r\n                <v-text-field\r\n                  prepend-icon=\"mdi-numeric\"\r\n                  v-model=\"lastCountChekBook\"\r\n                  label=\"عداد الطلبيات\"\r\n                  :rules=\"[validationInput.numberOnly]\"\r\n                  required\r\n                  dense\r\n                  maxLength=\"10\"\r\n                ></v-text-field>\r\n              </v-col>\r\n            </v-row>\r\n            <template v-if=\"isInsert\">\r\n              <v-row class=\"mb-5\">\r\n                <v-col cols=\"12\">\r\n                  <v-divider color=\"#E0E0E0\"></v-divider>\r\n                </v-col>\r\n                <v-col cols=\"12\">\r\n                  <span class=\"text-h6\"\r\n                    ><v-icon>mdi-cog-outline</v-icon> إعدادات الفرع</span\r\n                  >\r\n                </v-col>\r\n              </v-row>\r\n              <BranchSettingComponent></BranchSettingComponent>\r\n            </template>\r\n          </v-form>\r\n        </v-container>\r\n      </v-card-text>\r\n\r\n      <v-card-actions>\r\n        <div style=\"width: 100%;text-align: center;\">\r\n          <v-btn\r\n            @click=\"save\"\r\n            class=\"mx-2 white--text\"\r\n            :disabled=\"!valid\"\r\n            color=\"#536DFE\"\r\n          >\r\n            <v-icon>save</v-icon>\r\n            <span>حفظ البيانات</span>\r\n          </v-btn>\r\n          <v-btn class=\"mx-2 white--text\" @click=\"close\" color=\"#E91D62\">\r\n            <v-icon dark>clear</v-icon>\r\n            <span>إلغاء</span>\r\n          </v-btn>\r\n        </div>\r\n      </v-card-actions>\r\n    </v-card>\r\n  </v-dialog>\r\n</template>\r\n\r\n<script>\r\nimport { EventBus } from \"../../../eventBus.js\";\r\nimport { mapActions } from \"vuex\";\r\nimport { createHelpers } from \"vuex-map-fields\";\r\nconst { mapFields } = createHelpers({\r\n  getterType: \"getDataFields\",\r\n  mutationType: \"updateDataField\",\r\n});\r\n\r\nimport BranchSettingComponent from \"../../SharedComponents/branchSettingComponent.vue\";\r\nimport { validationInput } from \"../../../models/validationInput.js\";\r\nexport default {\r\n  name: \"insert-Or-Update\",\r\n  props: {\r\n    updateItemProp: {},\r\n    dialogProp: {},\r\n  },\r\n  components: {\r\n    BranchSettingComponent,\r\n  },\r\n\r\n  data: () => ({\r\n    dialog: false,\r\n    valid: false,\r\n    validationInput: validationInput,\r\n\r\n    banks:[],\r\n    isLoading: false,\r\n    selectedBank: null,\r\n    searchBank: null,\r\n    filterBankData: {\r\n      bankName: null,\r\n    },\r\n\r\n    regions:[],\r\n    isLoadingRegion: false,\r\n    selectedRegion: null,\r\n    searchRegion: null,\r\n    filterRegionData: {\r\n      bankId: null,\r\n      regionName: null,\r\n    },\r\n  }),\r\n\r\n  computed: {\r\n    ...mapFields(\"branchStore\", {\r\n      branchNo: \"editedItem.branchNo\",\r\n      branchId: \"editedItem.id\",\r\n      name: \"editedItem.name\",\r\n      branchRegionId: \"editedItem.branchRegionId\",\r\n      lastSerialCertified: \"editedItem.lastSerialCertified\",\r\n      lastSerial: \"editedItem.lastSerial\",\r\n      lastCountChekBook: \"editedItem.lastCountChekBook\",\r\n    }),\r\n\r\n    // ...mapFields(\"bankRegionStore\", {\r\n    //   regions: \"activeBankRegions\",\r\n    // }),\r\n    // ...mapFields(\"bankStore\", {\r\n    //   banks: \"grids\",\r\n    // }),\r\n\r\n    formTitle() {\r\n      return this.branchId ? \"تعديل بيانات الفرع\" : \"إضافة فرع جديد\";\r\n    },\r\n\r\n    isInsert() {\r\n      return !this.branchId;\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    updateItemProp: {\r\n      handler(data) {\r\n        if (data) this.editSelected(data);\r\n      },\r\n      immediate: true,\r\n    },\r\n    searchBank(val) {\r\n      if (this.isLoading) return;\r\n\r\n      this.filterBankData.bankName = val;\r\n    },\r\n\r\n    searchRegion(val) {\r\n      if (this.isLoadingRegion) return;\r\n      this.filterRegionData.regionName = val;\r\n    },\r\n\r\n    selectedBank(val) {\r\n      if (!val) this.clearRegionData();\r\n    },\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      ClearDataItemStore: \"branchStore/ClearDataItem\",\r\n      SetDataUpdateStore: \"branchStore/SetDataUpdate\",\r\n      InsertBranchStore: \"branchStore/InsertBranch\",\r\n      UpdateBranchStore: \"branchStore/UpdateBranch\",\r\n      GetActiveBankRegions: \"bankRegionStore/GetActiveBankRegions\",\r\n      GetBankStore: \"bankStore/GetBanks\",\r\n    }),\r\n    openDialog() {\r\n      this.dialog = true;\r\n    },\r\n    hasPermassion(crrentUser) {\r\n      this.userPermasstion = this.$store.getters[\"auth/getRole\"];\r\n      var result = this.userPermasstion.some((item) =>\r\n        crrentUser.includes(item)\r\n      );\r\n      return result;\r\n    },\r\n\r\n    \r\n\r\n    getRegionByBankId() {\r\n      if (!this.selectedBank) return;\r\n      this.clearRegionData();\r\n      this.filterRegionData.bankId = this.selectedBank?.bankId;\r\n      this.getBankRegions();\r\n    },\r\n\r\n    getBankRegions() {\r\n      try {\r\n        this.isLoadingRegion = true;\r\n        this.GetActiveBankRegions(this.filterRegionData)\r\n          .then(() => {\r\n            this.regions=[...this.$store.getters[\"bankRegionStore/GET_ACTIVE_BANKREGIONS\"]];\r\n            this.isLoadingRegion = false;\r\n          })\r\n          .catch(() => {\r\n            this.isLoadingRegion = false;\r\n          });\r\n      } catch (error) {\r\n        this.isLoadingRegion = false;\r\n        this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n\r\n    clearRegionData() {\r\n      this.isLoadingRegion = false;\r\n      this.regions = [];\r\n      this.selectedRegion = null;\r\n      this.searchRegion = null;\r\n      this.filterRegionData.bankId = null;\r\n      this.filterRegionData.regionName = null;\r\n    },\r\n    clearBankData() {\r\n      this.isLoading = false;\r\n      this.banks = [];\r\n      this.selectedBank = null;\r\n      this.searchBank = null;\r\n      this.filterBankData.bankName = null;\r\n    },\r\n\r\n    getBanks() {\r\n      try {\r\n        this.isLoading = true;\r\n        this.GetBankStore(this.filterBankData)\r\n          .then(() => {\r\n            this.banks = [...this.$store.getters[\"bankStore/GET_ACTIVE_BANKS\"]];\r\n            this.isLoading = false;\r\n          })\r\n          .catch((error) => {\r\n            this.notify(`${error}`, \"#1d262d\");\r\n            this.isLoading = false;\r\n          });\r\n      } catch (error) {\r\n        this.isLoading = false;\r\n        this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n\r\n    editSelected(item) {\r\n      this._selectedBankEdit(item);\r\n      this._selectedBankRegionEdit(item);\r\n      this.SetDataUpdateStore(item);\r\n      this.dialog = true;\r\n    },\r\n\r\n    _selectedBankEdit(item) {\r\n      if (item.bankId && item.bankName) {\r\n        this.banks.push({\r\n          name: item.bankName,\r\n          bankId: item.bankId,\r\n        });\r\n      \r\n\r\n        this.selectedBank = this.banks.find(\r\n          (pred) => pred.bankId == item.bankId\r\n        );\r\n      }\r\n    },\r\n    _selectedBankRegionEdit(item) {\r\n      if (item.branchRegionId && item.branchRegionName) {\r\n        this.regions.push({\r\n          regionName: item.branchRegionName,\r\n          bankRegionId: item.branchRegionId,\r\n        });\r\n\r\n        this.selectedRegion = this.regions.find(\r\n          (pred) => pred.bankRegionId == item.branchRegionId\r\n        );\r\n      }\r\n    },\r\n\r\n    close() {\r\n      setTimeout(() => {\r\n        this.clearBankData();\r\n        this.clearRegionData();\r\n        this.ClearDataItemStore();\r\n      }, 300);\r\n      this.dialog = false;\r\n      this.resetValidation();\r\n      EventBus.$emit(\"closeDialogUpdateBranch\");\r\n    },\r\n\r\n    save() {\r\n      if (this.branchId) {\r\n        this.updateBranch();\r\n      } else {\r\n        this.insertBranch();\r\n      }\r\n    },\r\n\r\n    insertBranch() {\r\n      this.branchRegionId = this.selectedRegion?.bankRegionId ?? null;\r\n      this.$store.dispatch(\"loading\", true);\r\n      this.InsertBranchStore()\r\n        .then((res) => {\r\n          this.notify(`${res}`, \"#1d262d\");\r\n          EventBus.$emit(\"refreshData\");\r\n          this.close();\r\n        })\r\n        .catch((error) => {\r\n          this.notify(`${error}`, \"#1d262d\");\r\n          this.$store.dispatch(\"loading\", false);\r\n        });\r\n    },\r\n    updateBranch() {\r\n      this.$store.dispatch(\"loading\", true);\r\n      this.UpdateBranchStore()\r\n        .then((res) => {\r\n          this.notify(`${res}`, \"#1d262d\");\r\n          EventBus.$emit(\"refreshData\");\r\n          this.close();\r\n        })\r\n        .catch((error) => {\r\n          this.notify(`${error}`, \"#1d262d\");\r\n          this.$store.dispatch(\"loading\", false);\r\n        });\r\n    },\r\n\r\n    resetValidation() {\r\n      this.$refs.formBranch?.reset();\r\n    },\r\n\r\n    notify(text, color) {\r\n      this.$store.commit(\"showMessage\", { text: text, color: color });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module"}