{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { validationInput } from \"../../../../models/validationInput.js\";\nimport { UserTypeStateList } from \"../../../../models/enum\";\nimport { mapActions } from \"vuex\";\n// import { createHelpers } from \"vuex-map-fields\";\n// const { mapMultiRowFields  } = createHelpers({\n//   getterType: \"getDataFields\",\n//   mutationType: \"updateDataField\",\n// });\nexport default {\n  name: \"insert-Or-Update\",\n  props: {\n    updateItemProp: {}\n  },\n  components: {},\n  data: () => ({\n    dialog: false,\n    valid: false,\n    showPassword: false,\n    validationInput: validationInput,\n    editItem: {\n      id: null,\n      userType: 0,\n      name: null,\n      email: null,\n      roleId: null,\n      phoneNumber: null,\n      branchNumber: null,\n      employeeNumber: null,\n      branchId: null,\n      branchName: null,\n      regionId: null,\n      regionName: null,\n      bankId: null,\n      bankName: null,\n      passwordHash: null,\n      sendPassword: false\n    },\n    defaultItem: {\n      id: null,\n      userType: 0,\n      name: null,\n      email: null,\n      roleId: null,\n      phoneNumber: null,\n      branchNumber: null,\n      employeeNumber: null,\n      branchId: null,\n      branchName: null,\n      regionId: null,\n      regionName: null,\n      bankId: null,\n      bankName: null,\n      passwordHash: null,\n      sendPassword: false\n    },\n    roles: [],\n    searchRole: null,\n    selectedRole: null,\n    filterDataRole: {\n      name: null,\n      userType: 0\n    },\n    banks: [],\n    isLoading: false,\n    selectedBank: null,\n    searchBank: null,\n    filterBankData: {\n      bankName: null\n    },\n    regions: [],\n    isLoadingRegion: false,\n    selectedRegion: null,\n    searchRegion: null,\n    filterRegionData: {\n      bankId: null,\n      regionName: null\n    },\n    branchs: [],\n    isLoadingBranch: false,\n    selectedBranch: null,\n    searchBranch: null,\n    filterBranchData: {\n      branchRegionId: null,\n      nameOrNumber: null\n    },\n    userTypes: UserTypeStateList,\n    selectUserType: null\n  }),\n  computed: {\n    formTitle() {\n      return this.editItem.id ? \"تعديل بيانات المستخدم\" : \"إضافة مستخدم جديد\";\n    },\n    isUpdate() {\n      return this.editItem.id;\n    }\n  },\n  watch: {\n    updateItemProp: {\n      handler(data) {\n        if (data) this.editSelected(data);\n      },\n      immediate: true\n    },\n    searchPermisstion(data) {\n      this.filterDataPermisstion.name = data;\n    },\n    searchBank(val) {\n      if (this.isLoading) return;\n      this.filterBankData.bankName = val;\n    },\n    searchRegion(val) {\n      if (this.isLoadingRegion) return;\n      this.filterRegionData.regionName = val;\n    },\n    searchBranch(val) {\n      this.filterBranchData.nameOrNumber = val;\n    },\n    selectedBank(val) {\n      if (!val) this.clearRegionData();\n    },\n    selectedRegion(val) {\n      if (!val) this.clearBranchData();\n    }\n  },\n  methods: {\n    ...mapActions({\n      InsertUserStore: \"userStore/InsertUser\",\n      UpdateUserStore: \"userStore/UpdateUser\",\n      GetRoles: \"roleStore/GetActiveRoles\",\n      GetActiveBankRegions: \"bankRegionStore/GetActiveBankRegions\",\n      GetBankStore: \"bankStore/GetBanks\",\n      GetActiveBranchs: \"branchStore/GetActiveBranchs\"\n    }),\n    hasPermassion(crrentUser) {\n      this.userPermasstion = this.$store.getters[\"auth/getRole\"];\n      var result = this.userPermasstion.some(item => crrentUser.includes(item));\n      return result;\n    },\n    generatePassword() {\n      let min = 1000;\n      let max = 99999;\n      var password = Math.floor(Math.random() * (max - min + 1)) + min;\n      this.editItem.passwordHash = `${password}`;\n    },\n    getRoles() {\n      if (!this.selectUserType) return;\n      this.filterDataRole.userType = this.selectUserType;\n      this.GetRoles(this.filterDataRole).then(() => {\n        this.roles = [...this.$store.getters[\"roleStore/GET_ACTIVE_ROLES\"]];\n      }).catch(error => {\n        this.notify(`${error}`, \"#1d262d\");\n      });\n    },\n    openDialog() {\n      this.dialog = true;\n    },\n    editSelected(item) {\n      this.editItem = Object.assign({}, item);\n      this._selectedBankEdit(item);\n      this._selectedBankRegionEdit(item);\n      this._selectedBranchEdit(item);\n      this._selectedRoleEdit(item);\n      this.selectUserType = item.userType;\n      this.dialog = true;\n    },\n    _selectedBankEdit(item) {\n      if (item.bankId && item.bankName) {\n        this.banks.push({\n          name: item.bankName,\n          bankId: item.bankId\n        });\n        this.selectedBank = this.banks.find(pred => pred.bankId == item.bankId);\n      }\n    },\n    _selectedBankRegionEdit(item) {\n      if (item.regionId && item.regionName) {\n        this.regions.push({\n          regionName: item.regionName,\n          bankRegionId: item.regionId\n        });\n        this.selectedRegion = this.regions.find(pred => pred.bankRegionId == item.regionId);\n      }\n    },\n    _selectedBranchEdit(item) {\n      if (item.branchId && item.branchName) {\n        this.branchs.push({\n          name: item.branchName,\n          id: item.branchId,\n          branchNo: item.branchNumber\n        });\n        this.selectedBranch = this.branchs.find(pred => pred.id == item.branchId);\n      }\n    },\n    _selectedRoleEdit(item) {\n      if (item.roleId && item.roleName) {\n        this.roles.push({\n          name: item.roleName,\n          id: item.roleId\n        });\n        this.selectedRole = this.roles.find(pred => pred.id == item.roleId);\n      }\n    },\n    clearRole() {\n      this.searchRole = null;\n      this.filterDataRole.name = null;\n      this.filterDataRole.userType = 0;\n      this.selectedRole = null;\n      this.roles = [];\n    },\n    close() {\n      this.resetValidation();\n      this.editItem = Object.assign({}, this.defaultItem);\n      this.selectUserType = null;\n      this.dialog = false;\n      this.clearRole();\n      this.clearBankData();\n      this.clearRegionData();\n      this.clearBranchData();\n      this.$emit(\"close-dialog-InsertOrUpdate\");\n    },\n    save() {\n      if (!this.$refs.formUser.validate()) {\n        this.notify(\"يجب إدخال جميع الحقول المطلوبة\", \"#1d262d\");\n        return;\n      }\n      this.editItem.userType = this.selectUserType;\n      this.editItem.bankId = this.selectedBank?.bankId ?? null;\n      this.editItem.bankName = this.selectedBank?.name ?? null;\n      this.editItem.regionId = this.selectedRegion?.bankRegionId ?? null;\n      this.editItem.regionName = this.selectedRegion?.regionName ?? null;\n      this.editItem.branchId = this.selectedBranch?.id ?? null;\n      this.editItem.branchName = this.selectedBranch?.name ?? null;\n      this.editItem.branchNumber = this.selectedBranch?.branchNo ?? null;\n      this.editItem.roleId = this.selectedRole?.id ?? null;\n      if (this.editItem.id) {\n        this.UpdateUser();\n      } else {\n        this.InsertUser();\n      }\n    },\n    UpdateUser() {\n      this.$store.dispatch(\"loading\", true);\n      this.UpdateUserStore(this.editItem).then(res => {\n        this.notify(`${res}`, \"#1d262d\");\n        this.$emit(\"refresh-data\");\n        this.close();\n      }).catch(error => {\n        this.notify(`${error}`, \"#1d262d\");\n        this.$store.dispatch(\"loading\", false);\n      });\n    },\n    InsertUser() {\n      this.$store.dispatch(\"loading\", true);\n      this.InsertUserStore(this.editItem).then(res => {\n        this.notify(`${res}`, \"#1d262d\");\n        this.$emit(\"refresh-data\");\n        this.close();\n      }).catch(error => {\n        this.notify(`${error}`, \"#1d262d\");\n        this.$store.dispatch(\"loading\", false);\n      });\n    },\n    getRegionByBankId() {\n      this.clearRegionData();\n      this.getBankRegions();\n    },\n    getBankRegions() {\n      // if (!this.selectedBank) return;\n      this.filterRegionData.bankId = this.selectedBank?.bankId ?? null;\n      try {\n        this.isLoadingRegion = true;\n        this.GetActiveBankRegions(this.filterRegionData).then(() => {\n          this.regions = [...this.$store.getters[\"bankRegionStore/GET_ACTIVE_BANKREGIONS\"]];\n          this.isLoadingRegion = false;\n        }).catch(error => {\n          this.notify(`${error}`, \"#1d262d\");\n          this.isLoadingRegion = false;\n        });\n      } catch (error) {\n        this.isLoadingRegion = false;\n        this.notify(error, \"#1d262d\");\n      }\n    },\n    searchBranchRegion() {\n      this.clearBranchData();\n      this.getBankRegions();\n    },\n    clearRegionData() {\n      this.isLoadingRegion = false;\n      this.regions = [];\n      this.selectedRegion = null;\n      this.searchRegion = null;\n      this.filterRegionData.bankId = null;\n      this.filterRegionData.regionName = null;\n    },\n    getBanks() {\n      try {\n        this.isLoading = true;\n        this.GetBankStore(this.filterBankData).then(() => {\n          this.banks = [...this.$store.getters[\"bankStore/GET_ACTIVE_BANKS\"]];\n          this.isLoading = false;\n        }).catch(error => {\n          this.notify(`${error}`, \"#1d262d\");\n          this.isLoading = false;\n        });\n      } catch (error) {\n        this.isLoading = false;\n        this.notify(error, \"#1d262d\");\n      }\n    },\n    clearBankData() {\n      this.isLoading = false;\n      this.banks = [];\n      this.selectedBank = null;\n      this.searchBank = null;\n      this.filterBankData.bankName = null;\n    },\n    getBranchs() {\n      if (!this.selectedRegion) return;\n      this.filterBranchData.branchRegionId = this.selectedRegion?.bankRegionId;\n      this.isLoadingBranch = true;\n      this.GetActiveBranchs(this.filterBranchData).then(() => {\n        this.branchs = [...this.$store.getters[\"branchStore/GET_ACTIVE_BRANCHS\"]];\n        this.isLoadingBranch = false;\n      }).catch(error => {\n        this.notify(`${error}`, \"#1d262d\");\n        this.isLoadingBranch = false;\n      });\n    },\n    getBranchByRegionId() {\n      this.getBranchs();\n    },\n    clearBranchData() {\n      this.isLoadingBranch = false;\n      this.branchs = [];\n      this.selectedBranch = null;\n      this.searchBranch = null;\n      this.filterBranchData.branchRegionId = null;\n      this.filterBranchData.nameOrNumber = null;\n    },\n    resetValidation() {\n      this.$refs.formUser?.reset();\n    },\n    notify(text, color) {\n      this.$store.commit(\"showMessage\", {\n        text: text,\n        color: color\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AAmQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;EACAA;EACAC;IACAC;EACA;EACAC;EAEAC;IACAC;IACAC;IACAC;IACAC;IAEAC;MACAC;MACAC;MACAX;MACAY;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;IAEAC;MACAf;MACAC;MACAX;MACAY;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;IAEAE;IAEAC;IACAC;IACAC;MACA7B;MACAW;IACA;IAEAmB;IACAC;IACAC;IACAC;IACAC;MACAZ;IACA;IAEAa;IACAC;IACAC;IACAC;IACAC;MACAlB;MACAD;IACA;IAEAoB;IACAC;IACAC;IACAC;IACAC;MACAC;MACAC;IACA;IAEAC;IACAC;EACA;EAEAC;IACAC;MACA;IACA;IACAC;MACA;IACA;EACA;EAEAC;IACAlD;MACAmD;QACA;MACA;MACAC;IACA;IACAC;MACA;IACA;IACAtB;MACA;MAEA;IACA;IAEAK;MACA;MACA;IACA;IACAK;MACA;IACA;IAEAX;MACA;IACA;IACAK;MACA;IACA;EACA;EACAmB;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;IACAC;MACA;MACA,+CACAC,0BACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA,mCACAC;QACA;MACA,GACAC;QACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;QACA;UACAvE;UACAqB;QACA;QAEA,oCACAmD,mCACA;MACA;IACA;IACAC;MACA;QACA;UACArD;UACAsD;QACA;QAEA,wCACAF,2CACA;MACA;IACA;IACAG;MACA;QACA;UACA3E;UACAU;UACAkE;QACA;QAEA,wCACAJ,iCACA;MACA;IACA;IACAK;MACA;QACA;UACA7E;UACAU;QACA;QAEA;MACA;IACA;IAEAoE;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MAEA;QACA;QACA;MACA;MAGA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;QACA;MACA;QACA;MACA;IACA;IAEAC;MACA;MACA,oCACAd;QACA;QACA;QACA;MACA,GACAC;QACA;QACA;MACA;IACA;IACAc;MACA;MACA,oCACAf;QACA;QACA;QAEA;MACA,GACAC;QACA;QACA;MACA;IACA;IAEAe;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;QACA;QACA,iDACAjB;UACA,gBACA,iEACA;UACA;QACA,GACAC;UACA;UACA;QACA;MACA;QACA;QACA;MACA;IACA;IAEAiB;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;QACA;QACA,uCACApB;UACA;UACA;QACA,GACAC;UACA;UACA;QACA;MACA;QACA;QACA;MACA;IACA;IAEAoB;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA,6CACAtB;QACA,gBACA,yDACA;QACA;MACA,GACAC;QACA;QACA;MACA;IACA;IAEAsB;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;QAAAC;QAAAC;MAAA;IACA;EACA;AACA","names":["name","props","updateItemProp","components","data","dialog","valid","showPassword","validationInput","editItem","id","userType","email","roleId","phoneNumber","branchNumber","employeeNumber","branchId","branchName","regionId","regionName","bankId","bankName","passwordHash","sendPassword","defaultItem","roles","searchRole","selectedRole","filterDataRole","banks","isLoading","selectedBank","searchBank","filterBankData","regions","isLoadingRegion","selectedRegion","searchRegion","filterRegionData","branchs","isLoadingBranch","selectedBranch","searchBranch","filterBranchData","branchRegionId","nameOrNumber","userTypes","selectUserType","computed","formTitle","isUpdate","watch","handler","immediate","searchPermisstion","methods","InsertUserStore","UpdateUserStore","GetRoles","GetActiveBankRegions","GetBankStore","GetActiveBranchs","hasPermassion","crrentUser","generatePassword","getRoles","then","catch","openDialog","editSelected","_selectedBankEdit","pred","_selectedBankRegionEdit","bankRegionId","_selectedBranchEdit","branchNo","_selectedRoleEdit","clearRole","close","save","UpdateUser","InsertUser","getRegionByBankId","getBankRegions","searchBranchRegion","clearRegionData","getBanks","clearBankData","getBranchs","getBranchByRegionId","clearBranchData","resetValidation","notify","text","color"],"sourceRoot":"src/views/userManagment/user/components","sources":["insertOrUpdateUserComponent.vue"],"sourcesContent":["<template>\r\n  <v-dialog v-model=\"dialog\" max-width=\"800px\" persistent>\r\n    <template v-slot:activator=\"{ on }\">\r\n      <template>\r\n        <v-btn\r\n          color=\"#536DFE\"\r\n          class=\"white--text \"\r\n          @click=\"openDialog\"\r\n          v-on=\"on\"\r\n          elevation=\"5\"\r\n        >\r\n          <v-icon class=\"ml-2\">mdi-plus-circle</v-icon\r\n          ><span> إضافة مستخدم</span>\r\n        </v-btn>\r\n      </template>\r\n    </template>\r\n    <v-card>\r\n      <v-card-title>\r\n        <span class=\"headline\">{{ formTitle }}</span>\r\n      </v-card-title>\r\n\r\n      <v-divider></v-divider>\r\n\r\n      <v-card-text>\r\n        <v-container>\r\n          <v-form ref=\"formUser\" v-model=\"valid\">\r\n            <v-row>\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-text-field\r\n                  v-model=\"editItem.employeeNumber\"\r\n                  prepend-icon=\"mdi-file-document-alert\"\r\n                  dense\r\n                  :rules=\"[\r\n                    validationInput.isEmpty,\r\n                    validationInput.numberOnly,\r\n                    validationInput.minLength,\r\n                    validationInput.numberNotZero,\r\n                  ]\"\r\n                  label=\"رقم الوظيفي\"\r\n                  required\r\n                  maxLength=\"4\"\r\n                ></v-text-field>\r\n              </v-col>\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-text-field\r\n                  v-model=\"editItem.name\"\r\n                  prepend-icon=\"mdi-file-document-alert\"\r\n                  dense\r\n                  :rules=\"[\r\n                    validationInput.isEmpty,\r\n                    validationInput.isArabic,\r\n                    validationInput.minLength,\r\n                    validationInput.currectInput,\r\n                  ]\"\r\n                  label=\"اسم المستخدم\"\r\n                  required\r\n                  maxLength=\"50\"\r\n                ></v-text-field>\r\n              </v-col>\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-text-field\r\n                  v-model=\"editItem.phoneNumber\"\r\n                  prepend-icon=\"mdi-file-document-alert\"\r\n                  dense\r\n                  :rules=\"[\r\n                    validationInput.isEmpty,\r\n                    validationInput.numberOnly,\r\n                    validationInput.phoneNumber,\r\n                    validationInput.phoneNumberNotZero,\r\n                    validationInput.phoneLength,\r\n                  ]\"\r\n                  label=\"رقم الهاتف\"\r\n                  required\r\n                  maxLength=\"10\"\r\n                ></v-text-field>\r\n              </v-col>\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-text-field\r\n                  v-model=\"editItem.email\"\r\n                  prepend-icon=\"mdi-file-document-alert\"\r\n                  dense\r\n                  :rules=\"[validationInput.isEmpty,validationInput.emailRules]\"\r\n                  label=\"بريد الإلكتروني\"\r\n                  required\r\n                  maxLength=\"50\"\r\n                ></v-text-field>\r\n              </v-col>\r\n              <v-col cols=\"12\" sm=\"6\" v-if=\"!isUpdate\">\r\n                <v-text-field\r\n                  v-model=\"editItem.passwordHash\"\r\n                  prepend-icon=\"mdi-file-document-alert\"\r\n                  dense\r\n                  :rules=\"[\r\n                    validationInput.isEmpty,\r\n                    validationInput.numberOnly,\r\n                    validationInput.numberNotZero,\r\n                  ]\"\r\n                  label=\"كلمة المرور\"\r\n                  placeholder=\"إصدار كلمة المرور\"\r\n                  required\r\n                  readonly\r\n                  maxLength=\"50\"\r\n                  :append-icon=\"showPassword ? 'mdi-eye' : 'mdi-eye-off'\"\r\n                  :type=\"showPassword ? 'text' : 'password'\"\r\n                  @click:append=\"showPassword = !showPassword\"\r\n                ></v-text-field>\r\n              </v-col>\r\n              <v-col cols=\"12\" sm=\"6\" v-if=\"!isUpdate\">\r\n                <v-btn\r\n                  color=\"#536DFE\"\r\n                  class=\"white--text \"\r\n                  @click=\"generatePassword\"\r\n                  elevation=\"5\"\r\n                  small\r\n                >\r\n                  <v-icon class=\"ml-2\">mdi-lock-reset</v-icon\r\n                  ><span>ضبط كلمة المرور</span>\r\n                </v-btn>\r\n              </v-col>\r\n              <v-col cols=\"12\" sm=\"6\" v-if=\"hasPermassion(['AdminSystem'])\">\r\n                <v-autocomplete\r\n                  v-model=\"selectedBank\"\r\n                  :items=\"banks\"\r\n                  dense\r\n                  :loading=\"isLoading\"\r\n                  single-line\r\n                  :search-input.sync=\"searchBank\"\r\n                  @keyup=\"getBanks\"\r\n                  item-text=\"name\"\r\n                  item-value=\"bankId\"\r\n                  label=\"اختر المصرف\"\r\n                  placeholder=\"يجب إختيار المصرف\"\r\n                  return-object\r\n                  no-data-text=\"قم بالبحث عن إسم المصرف\"\r\n                  clearable\r\n                  :rules=\"[validationInput.selectedValidation]\"\r\n                  required\r\n                  prepend-icon=\"mdi-bank\"\r\n                  @change=\"getRegionByBankId\"\r\n                ></v-autocomplete>\r\n              </v-col>\r\n              <v-col\r\n                cols=\"12\"\r\n                sm=\"6\"\r\n                v-if=\"hasPermassion(['AddUserOtherBranchs', 'AdminSystem'])\"\r\n              >\r\n                <v-autocomplete\r\n                  v-model=\"selectedRegion\"\r\n                  :items=\"regions\"\r\n                  :loading=\"isLoadingRegion\"\r\n                  single-line\r\n                  dense\r\n                  :rules=\"[validationInput.selectedValidation]\"\r\n                  required\r\n                  :search-input.sync=\"searchRegion\"\r\n                  item-text=\"regionName\"\r\n                  item-value=\"bankRegionId\"\r\n                  label=\"اختر المنطقة\"\r\n                  placeholder=\"يجب إختيار المنطقة\"\r\n                  return-object\r\n                  no-data-text=\"لايوجد بيانات\"\r\n                  clearable\r\n                  @keyup=\"searchBranchRegion\"\r\n                  @change=\"getBranchByRegionId\"\r\n                  prepend-icon=\"mdi-map-marker\"\r\n                ></v-autocomplete>\r\n              </v-col>\r\n              <v-col\r\n                cols=\"12\"\r\n                sm=\"6\"\r\n                v-if=\"hasPermassion(['AddUserOtherBranchs', 'AdminSystem'])\"\r\n              >\r\n                <v-autocomplete\r\n                  v-model=\"selectedBranch\"\r\n                  :items=\"branchs\"\r\n                  :loading=\"isLoadingBranch\"\r\n                  single-line\r\n                  :search-input.sync=\"searchBranch\"\r\n                  item-text=\"name\"\r\n                  item-value=\"id\"\r\n                  label=\"اختر الفرع\"\r\n                  placeholder=\"بحث عن طريق الفرع\"\r\n                  return-object\r\n                  no-data-text=\"لايوجد بيانات\"\r\n                  clearable\r\n                  @keyup=\"getBranchs\"\r\n                  prepend-icon=\"mdi-bank\"\r\n                  dense\r\n                ></v-autocomplete>\r\n              </v-col>\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-select\r\n                  v-model=\"selectUserType\"\r\n                  :items=\"userTypes\"\r\n                  item-text=\"name\"\r\n                  item-value=\"id\"\r\n                  clearable\r\n                  prepend-icon=\"search\"\r\n                  label=\"التبعية\"\r\n                  dense\r\n                  :rules=\"[validationInput.selectedValidation]\"\r\n                  required\r\n                  @change=\"getRoles\"\r\n                >\r\n                </v-select>\r\n              </v-col>\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-select\r\n                  v-model=\"selectedRole\"\r\n                  :items=\"roles\"\r\n                  label=\"الدور\"\r\n                  placeholder=\"اختر الدور\"\r\n                  :rules=\"[validationInput.selectedValidation]\"\r\n                  required\r\n                  item-text=\"name\"\r\n                  item-value=\"id\"\r\n                  :search-input.sync=\"searchRole\"\r\n                  @keyup=\"getRoles\"\r\n                  dense\r\n                  return-object\r\n                  persistent-hint\r\n                ></v-select>\r\n              </v-col>\r\n              <v-col cols=\"12\" v-if=\"!isUpdate\">\r\n                <v-switch\r\n                  label=\"إرسال كلمة المرور إلي رقم الهاتف و البريد الإلكتروني\"\r\n                  color=\"#536DFE\"\r\n                  dense\r\n                  class=\"justify-center text-center d-inline-block\"\r\n                  v-model=\"editItem.sendPassword\"\r\n                ></v-switch>\r\n              </v-col>\r\n            </v-row>\r\n          </v-form>\r\n        </v-container>\r\n      </v-card-text>\r\n\r\n      <v-card-actions>\r\n        <div style=\"width: 100%;text-align: center;\">\r\n          <v-btn\r\n            @click=\"save\"\r\n            class=\"mx-2 white--text\"\r\n            :disabled=\"!valid\"\r\n            color=\"#536DFE\"\r\n          >\r\n            <v-icon>save</v-icon>\r\n            <span>حفظ البيانات</span>\r\n          </v-btn>\r\n          <v-btn class=\"mx-2 white--text\" @click=\"close\" color=\"#E91D62\">\r\n            <v-icon dark>clear</v-icon>\r\n            <span>إغلاق</span>\r\n          </v-btn>\r\n        </div>\r\n      </v-card-actions>\r\n    </v-card>\r\n  </v-dialog>\r\n</template>\r\n\r\n<script>\r\nimport { validationInput } from \"../../../../models/validationInput.js\";\r\nimport { UserTypeStateList } from \"../../../../models/enum\";\r\n\r\nimport { mapActions } from \"vuex\";\r\n// import { createHelpers } from \"vuex-map-fields\";\r\n// const { mapMultiRowFields  } = createHelpers({\r\n//   getterType: \"getDataFields\",\r\n//   mutationType: \"updateDataField\",\r\n// });\r\nexport default {\r\n  name: \"insert-Or-Update\",\r\n  props: {\r\n    updateItemProp: {},\r\n  },\r\n  components: {},\r\n\r\n  data: () => ({\r\n    dialog: false,\r\n    valid: false,\r\n    showPassword: false,\r\n    validationInput: validationInput,\r\n\r\n    editItem: {\r\n      id: null,\r\n      userType: 0,\r\n      name: null,\r\n      email: null,\r\n      roleId: null,\r\n      phoneNumber: null,\r\n      branchNumber: null,\r\n      employeeNumber: null,\r\n      branchId: null,\r\n      branchName: null,\r\n      regionId: null,\r\n      regionName: null,\r\n      bankId: null,\r\n      bankName: null,\r\n      passwordHash: null,\r\n      sendPassword: false,\r\n    },\r\n\r\n    defaultItem: {\r\n      id: null,\r\n      userType: 0,\r\n      name: null,\r\n      email: null,\r\n      roleId: null,\r\n      phoneNumber: null,\r\n      branchNumber: null,\r\n      employeeNumber: null,\r\n      branchId: null,\r\n      branchName: null,\r\n      regionId: null,\r\n      regionName: null,\r\n      bankId: null,\r\n      bankName: null,\r\n      passwordHash: null,\r\n      sendPassword: false,\r\n    },\r\n\r\n    roles: [],\r\n\r\n    searchRole: null,\r\n    selectedRole: null,\r\n    filterDataRole: {\r\n      name: null,\r\n      userType: 0,\r\n    },\r\n\r\n    banks: [],\r\n    isLoading: false,\r\n    selectedBank: null,\r\n    searchBank: null,\r\n    filterBankData: {\r\n      bankName: null,\r\n    },\r\n\r\n    regions: [],\r\n    isLoadingRegion: false,\r\n    selectedRegion: null,\r\n    searchRegion: null,\r\n    filterRegionData: {\r\n      bankId: null,\r\n      regionName: null,\r\n    },\r\n\r\n    branchs: [],\r\n    isLoadingBranch: false,\r\n    selectedBranch: null,\r\n    searchBranch: null,\r\n    filterBranchData: {\r\n      branchRegionId: null,\r\n      nameOrNumber: null,\r\n    },\r\n\r\n    userTypes: UserTypeStateList,\r\n    selectUserType: null,\r\n  }),\r\n\r\n  computed: {\r\n    formTitle() {\r\n      return this.editItem.id ? \"تعديل بيانات المستخدم\" : \"إضافة مستخدم جديد\";\r\n    },\r\n    isUpdate() {\r\n      return this.editItem.id;\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    updateItemProp: {\r\n      handler(data) {\r\n        if (data) this.editSelected(data);\r\n      },\r\n      immediate: true,\r\n    },\r\n    searchPermisstion(data) {\r\n      this.filterDataPermisstion.name = data;\r\n    },\r\n    searchBank(val) {\r\n      if (this.isLoading) return;\r\n\r\n      this.filterBankData.bankName = val;\r\n    },\r\n\r\n    searchRegion(val) {\r\n      if (this.isLoadingRegion) return;\r\n      this.filterRegionData.regionName = val;\r\n    },\r\n    searchBranch(val) {\r\n      this.filterBranchData.nameOrNumber = val;\r\n    },\r\n\r\n    selectedBank(val) {\r\n      if (!val) this.clearRegionData();\r\n    },\r\n    selectedRegion(val) {\r\n      if (!val) this.clearBranchData();\r\n    },\r\n  },\r\n  methods: {\r\n    ...mapActions({\r\n      InsertUserStore: \"userStore/InsertUser\",\r\n      UpdateUserStore: \"userStore/UpdateUser\",\r\n      GetRoles: \"roleStore/GetActiveRoles\",\r\n      GetActiveBankRegions: \"bankRegionStore/GetActiveBankRegions\",\r\n      GetBankStore: \"bankStore/GetBanks\",\r\n      GetActiveBranchs: \"branchStore/GetActiveBranchs\",\r\n    }),\r\n    hasPermassion(crrentUser) {\r\n      this.userPermasstion = this.$store.getters[\"auth/getRole\"];\r\n      var result = this.userPermasstion.some((item) =>\r\n        crrentUser.includes(item)\r\n      );\r\n      return result;\r\n    },\r\n\r\n    generatePassword() {\r\n      let min = 1000;\r\n      let max = 99999;\r\n      var password = Math.floor(Math.random() * (max - min + 1)) + min;\r\n      this.editItem.passwordHash = `${password}`;\r\n    },\r\n\r\n    getRoles() {\r\n      if (!this.selectUserType) return;\r\n      this.filterDataRole.userType = this.selectUserType;\r\n      this.GetRoles(this.filterDataRole)\r\n        .then(() => {\r\n          this.roles = [...this.$store.getters[\"roleStore/GET_ACTIVE_ROLES\"]];\r\n        })\r\n        .catch((error) => {\r\n          this.notify(`${error}`, \"#1d262d\");\r\n        });\r\n    },\r\n\r\n    openDialog() {\r\n      this.dialog = true;\r\n    },\r\n\r\n    editSelected(item) {\r\n      this.editItem = Object.assign({}, item);\r\n      this._selectedBankEdit(item);\r\n      this._selectedBankRegionEdit(item);\r\n      this._selectedBranchEdit(item);\r\n      this._selectedRoleEdit(item);\r\n      this.selectUserType = item.userType;\r\n      this.dialog = true;\r\n    },\r\n\r\n    _selectedBankEdit(item) {\r\n      if (item.bankId && item.bankName) {\r\n        this.banks.push({\r\n          name: item.bankName,\r\n          bankId: item.bankId,\r\n        });\r\n\r\n        this.selectedBank = this.banks.find(\r\n          (pred) => pred.bankId == item.bankId\r\n        );\r\n      }\r\n    },\r\n    _selectedBankRegionEdit(item) {\r\n      if (item.regionId && item.regionName) {\r\n        this.regions.push({\r\n          regionName: item.regionName,\r\n          bankRegionId: item.regionId,\r\n        });\r\n\r\n        this.selectedRegion = this.regions.find(\r\n          (pred) => pred.bankRegionId == item.regionId\r\n        );\r\n      }\r\n    },\r\n    _selectedBranchEdit(item) {\r\n      if (item.branchId && item.branchName) {\r\n        this.branchs.push({\r\n          name: item.branchName,\r\n          id: item.branchId,\r\n          branchNo: item.branchNumber,\r\n        });\r\n\r\n        this.selectedBranch = this.branchs.find(\r\n          (pred) => pred.id == item.branchId\r\n        );\r\n      }\r\n    },\r\n    _selectedRoleEdit(item) {\r\n      if (item.roleId && item.roleName) {\r\n        this.roles.push({\r\n          name: item.roleName,\r\n          id: item.roleId,\r\n        });\r\n\r\n        this.selectedRole = this.roles.find((pred) => pred.id == item.roleId);\r\n      }\r\n    },\r\n\r\n    clearRole() {\r\n      this.searchRole = null;\r\n      this.filterDataRole.name = null;\r\n      this.filterDataRole.userType = 0;\r\n      this.selectedRole = null;\r\n      this.roles = [];\r\n    },\r\n\r\n    close() {\r\n      this.resetValidation();\r\n      this.editItem = Object.assign({}, this.defaultItem);\r\n      this.selectUserType = null;\r\n      this.dialog = false;\r\n      this.clearRole();\r\n      this.clearBankData();\r\n      this.clearRegionData();\r\n      this.clearBranchData();\r\n      this.$emit(\"close-dialog-InsertOrUpdate\");\r\n    },\r\n\r\n    save() {\r\n\r\n      if (!this.$refs.formUser.validate()) {\r\n        this.notify(\"يجب إدخال جميع الحقول المطلوبة\", \"#1d262d\");\r\n        return;\r\n      }\r\n\r\n\r\n      this.editItem.userType = this.selectUserType;\r\n      this.editItem.bankId = this.selectedBank?.bankId ?? null;\r\n      this.editItem.bankName = this.selectedBank?.name ?? null;\r\n      this.editItem.regionId = this.selectedRegion?.bankRegionId ?? null;\r\n      this.editItem.regionName = this.selectedRegion?.regionName ?? null;\r\n      this.editItem.branchId = this.selectedBranch?.id ?? null;\r\n      this.editItem.branchName = this.selectedBranch?.name ?? null;\r\n      this.editItem.branchNumber = this.selectedBranch?.branchNo ?? null;\r\n      this.editItem.roleId = this.selectedRole?.id ?? null;\r\n\r\n      if (this.editItem.id) {\r\n        this.UpdateUser();\r\n      } else {\r\n        this.InsertUser();\r\n      }\r\n    },\r\n\r\n    UpdateUser() {\r\n      this.$store.dispatch(\"loading\", true);\r\n      this.UpdateUserStore(this.editItem)\r\n        .then((res) => {\r\n          this.notify(`${res}`, \"#1d262d\");\r\n          this.$emit(\"refresh-data\");\r\n          this.close();\r\n        })\r\n        .catch((error) => {\r\n          this.notify(`${error}`, \"#1d262d\");\r\n          this.$store.dispatch(\"loading\", false);\r\n        });\r\n    },\r\n    InsertUser() {\r\n      this.$store.dispatch(\"loading\", true);\r\n      this.InsertUserStore(this.editItem)\r\n        .then((res) => {\r\n          this.notify(`${res}`, \"#1d262d\");\r\n          this.$emit(\"refresh-data\");\r\n\r\n          this.close();\r\n        })\r\n        .catch((error) => {\r\n          this.notify(`${error}`, \"#1d262d\");\r\n          this.$store.dispatch(\"loading\", false);\r\n        });\r\n    },\r\n\r\n    getRegionByBankId() {\r\n      this.clearRegionData();\r\n      this.getBankRegions();\r\n    },\r\n\r\n    getBankRegions() {\r\n      // if (!this.selectedBank) return;\r\n      this.filterRegionData.bankId = this.selectedBank?.bankId ??null;\r\n      try {\r\n        this.isLoadingRegion = true;\r\n        this.GetActiveBankRegions(this.filterRegionData)\r\n          .then(() => {\r\n            this.regions = [\r\n              ...this.$store.getters[\"bankRegionStore/GET_ACTIVE_BANKREGIONS\"],\r\n            ];\r\n            this.isLoadingRegion = false;\r\n          })\r\n          .catch((error) => {\r\n            this.notify(`${error}`, \"#1d262d\");\r\n            this.isLoadingRegion = false;\r\n          });\r\n      } catch (error) {\r\n        this.isLoadingRegion = false;\r\n        this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n\r\n    searchBranchRegion() {\r\n      this.clearBranchData();\r\n      this.getBankRegions();\r\n    },\r\n\r\n    clearRegionData() {\r\n      this.isLoadingRegion = false;\r\n      this.regions = [];\r\n      this.selectedRegion = null;\r\n      this.searchRegion = null;\r\n      this.filterRegionData.bankId = null;\r\n      this.filterRegionData.regionName = null;\r\n    },\r\n\r\n    getBanks() {\r\n      try {\r\n        this.isLoading = true;\r\n        this.GetBankStore(this.filterBankData)\r\n          .then(() => {\r\n            this.banks = [...this.$store.getters[\"bankStore/GET_ACTIVE_BANKS\"]];\r\n            this.isLoading = false;\r\n          })\r\n          .catch((error) => {\r\n            this.notify(`${error}`, \"#1d262d\");\r\n            this.isLoading = false;\r\n          });\r\n      } catch (error) {\r\n        this.isLoading = false;\r\n        this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n\r\n    clearBankData() {\r\n      this.isLoading = false;\r\n      this.banks = [];\r\n      this.selectedBank = null;\r\n      this.searchBank = null;\r\n      this.filterBankData.bankName = null;\r\n    },\r\n\r\n    getBranchs() {\r\n      if (!this.selectedRegion) return;\r\n      this.filterBranchData.branchRegionId = this.selectedRegion?.bankRegionId;\r\n      this.isLoadingBranch = true;\r\n      this.GetActiveBranchs(this.filterBranchData)\r\n        .then(() => {\r\n          this.branchs = [\r\n            ...this.$store.getters[\"branchStore/GET_ACTIVE_BRANCHS\"],\r\n          ];\r\n          this.isLoadingBranch = false;\r\n        })\r\n        .catch((error) => {\r\n          this.notify(`${error}`, \"#1d262d\");\r\n          this.isLoadingBranch = false;\r\n        });\r\n    },\r\n\r\n    getBranchByRegionId() {\r\n      this.getBranchs();\r\n    },\r\n\r\n    clearBranchData() {\r\n      this.isLoadingBranch = false;\r\n      this.branchs = [];\r\n      this.selectedBranch = null;\r\n      this.searchBranch = null;\r\n      this.filterBranchData.branchRegionId = null;\r\n      this.filterBranchData.nameOrNumber = null;\r\n    },\r\n\r\n    resetValidation() {\r\n      this.$refs.formUser?.reset();\r\n    },\r\n\r\n    notify(text, color) {\r\n      this.$store.commit(\"showMessage\", { text: text, color: color });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module"}