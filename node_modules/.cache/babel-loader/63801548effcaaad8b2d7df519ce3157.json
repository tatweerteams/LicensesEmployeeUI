{"ast":null,"code":"import _slicedToArray from \"D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.map.js\";\n// Styles\nimport \"../../../src/components/VTreeview/VTreeview.sass\"; // Components\n\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'; // Mixins\n\nimport Themeable from '../../mixins/themeable';\nimport { provide as RegistrableProvide } from '../../mixins/registrable'; // Utils\n\nimport { arrayDiff, deepEqual, getObjectValueByPath } from '../../util/helpers';\nimport mixins from '../../util/mixins';\nimport { consoleWarn } from '../../util/console';\nimport { filterTreeItems, filterTreeItem } from './util/filterTreeItems';\nexport default mixins(RegistrableProvide('treeview'), Themeable\n/* @vue/component */).extend({\n  name: 'v-treeview',\n  provide: function provide() {\n    return {\n      treeview: this\n    };\n  },\n  props: _objectSpread({\n    active: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    dense: Boolean,\n    disabled: Boolean,\n    filter: Function,\n    hoverable: Boolean,\n    items: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false // TODO: Should be true in next major\n    },\n\n    search: String,\n    value: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    }\n  }, VTreeviewNodeProps),\n  data: function data() {\n    return {\n      level: -1,\n      activeCache: new Set(),\n      nodes: {},\n      openCache: new Set(),\n      selectedCache: new Set()\n    };\n  },\n  computed: {\n    excludedItems: function excludedItems() {\n      var excluded = new Set();\n      if (!this.search) return excluded;\n      for (var i = 0; i < this.items.length; i++) {\n        filterTreeItems(this.filter || filterTreeItem, this.items[i], this.search, this.itemKey, this.itemText, this.itemChildren, excluded);\n      }\n      return excluded;\n    }\n  },\n  watch: {\n    items: {\n      handler: function handler() {\n        var _this = this;\n        var oldKeys = Object.keys(this.nodes).map(function (k) {\n          return getObjectValueByPath(_this.nodes[k].item, _this.itemKey);\n        });\n        var newKeys = this.getKeys(this.items);\n        var diff = arrayDiff(newKeys, oldKeys); // We only want to do stuff if items have changed\n\n        if (!diff.length && newKeys.length < oldKeys.length) return; // If nodes are removed we need to clear them from this.nodes\n\n        diff.forEach(function (k) {\n          return delete _this.nodes[k];\n        });\n        var oldSelectedCache = _toConsumableArray(this.selectedCache);\n        this.selectedCache = new Set();\n        this.activeCache = new Set();\n        this.openCache = new Set();\n        this.buildTree(this.items); // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n\n        if (!deepEqual(oldSelectedCache, _toConsumableArray(this.selectedCache))) this.emitSelected();\n      },\n      deep: true\n    },\n    active: function active(value) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive);\n    },\n    value: function value(_value) {\n      this.handleNodeCacheWatcher(_value, this.selectedCache, this.updateSelected, this.emitSelected);\n    },\n    open: function open(value) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen);\n    }\n  },\n  created: function created() {\n    var _this2 = this;\n    var getValue = function getValue(key) {\n      return _this2.returnObject ? getObjectValueByPath(key, _this2.itemKey) : key;\n    };\n    this.buildTree(this.items);\n    var _iterator = _createForOfIteratorHelper(this.value.map(getValue)),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var value = _step.value;\n        this.updateSelected(value, true, true);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    var _iterator2 = _createForOfIteratorHelper(this.active.map(getValue)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var active = _step2.value;\n        this.updateActive(active, true);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  },\n  mounted: function mounted() {\n    var _this3 = this;\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this);\n    }\n    if (this.openAll) {\n      this.updateAll(true);\n    } else {\n      this.open.forEach(function (key) {\n        return _this3.updateOpen(_this3.returnObject ? getObjectValueByPath(key, _this3.itemKey) : key, true);\n      });\n      this.emitOpen();\n    }\n  },\n  methods: {\n    /** @public */updateAll: function updateAll(value) {\n      var _this4 = this;\n      Object.keys(this.nodes).forEach(function (key) {\n        return _this4.updateOpen(getObjectValueByPath(_this4.nodes[key].item, _this4.itemKey), value);\n      });\n      this.emitOpen();\n    },\n    getKeys: function getKeys(items) {\n      var keys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      for (var i = 0; i < items.length; i++) {\n        var key = getObjectValueByPath(items[i], this.itemKey);\n        keys.push(key);\n        var children = getObjectValueByPath(items[i], this.itemChildren);\n        if (children) {\n          keys.push.apply(keys, _toConsumableArray(this.getKeys(children)));\n        }\n      }\n      return keys;\n    },\n    buildTree: function buildTree(items) {\n      var _this5 = this;\n      var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var _a;\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var key = getObjectValueByPath(item, this.itemKey);\n        var children = (_a = getObjectValueByPath(item, this.itemChildren)) !== null && _a !== void 0 ? _a : [];\n        var oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false,\n          isIndeterminate: false,\n          isActive: false,\n          isOpen: false,\n          vnode: null\n        };\n        var node = {\n          vnode: oldNode.vnode,\n          parent: parent,\n          children: children.map(function (c) {\n            return getObjectValueByPath(c, _this5.itemKey);\n          }),\n          item: item\n        };\n        this.buildTree(children, key); // This fixed bug with dynamic children resetting selected parent state\n\n        if (this.selectionType !== 'independent' && parent !== null && !this.nodes.hasOwnProperty(key) && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected;\n        } else {\n          node.isSelected = oldNode.isSelected;\n          node.isIndeterminate = oldNode.isIndeterminate;\n        }\n        node.isActive = oldNode.isActive;\n        node.isOpen = oldNode.isOpen;\n        this.nodes[key] = node;\n        if (children.length && this.selectionType !== 'independent') {\n          var _this$calculateState = this.calculateState(key, this.nodes),\n            isSelected = _this$calculateState.isSelected,\n            isIndeterminate = _this$calculateState.isIndeterminate;\n          node.isSelected = isSelected;\n          node.isIndeterminate = isIndeterminate;\n        } // Don't forget to rebuild cache\n\n        if (this.nodes[key].isSelected && (this.selectionType === 'independent' || node.children.length === 0)) this.selectedCache.add(key);\n        if (this.nodes[key].isActive) this.activeCache.add(key);\n        if (this.nodes[key].isOpen) this.openCache.add(key);\n        this.updateVnodeState(key);\n      }\n    },\n    calculateState: function calculateState(node, state) {\n      var children = state[node].children;\n      var counts = children.reduce(function (counts, child) {\n        counts[0] += +Boolean(state[child].isSelected);\n        counts[1] += +Boolean(state[child].isIndeterminate);\n        return counts;\n      }, [0, 0]);\n      var isSelected = !!children.length && counts[0] === children.length;\n      var isIndeterminate = !isSelected && (counts[0] > 0 || counts[1] > 0);\n      return {\n        isSelected: isSelected,\n        isIndeterminate: isIndeterminate\n      };\n    },\n    emitOpen: function emitOpen() {\n      this.emitNodeCache('update:open', this.openCache);\n    },\n    emitSelected: function emitSelected() {\n      this.emitNodeCache('input', this.selectedCache);\n    },\n    emitActive: function emitActive() {\n      this.emitNodeCache('update:active', this.activeCache);\n    },\n    emitNodeCache: function emitNodeCache(event, cache) {\n      var _this6 = this;\n      this.$emit(event, this.returnObject ? _toConsumableArray(cache).map(function (key) {\n        return _this6.nodes[key].item;\n      }) : _toConsumableArray(cache));\n    },\n    handleNodeCacheWatcher: function handleNodeCacheWatcher(value, cache, updateFn, emitFn) {\n      var _this7 = this;\n      value = this.returnObject ? value.map(function (v) {\n        return getObjectValueByPath(v, _this7.itemKey);\n      }) : value;\n      var old = _toConsumableArray(cache);\n      if (deepEqual(old, value)) return;\n      old.forEach(function (key) {\n        return updateFn(key, false);\n      });\n      value.forEach(function (key) {\n        return updateFn(key, true);\n      });\n      emitFn();\n    },\n    getDescendants: function getDescendants(key) {\n      var _descendants;\n      var descendants = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var children = this.nodes[key].children;\n      (_descendants = descendants).push.apply(_descendants, _toConsumableArray(children));\n      for (var i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants);\n      }\n      return descendants;\n    },\n    getParents: function getParents(key) {\n      var parent = this.nodes[key].parent;\n      var parents = [];\n      while (parent !== null) {\n        parents.push(parent);\n        parent = this.nodes[parent].parent;\n      }\n      return parents;\n    },\n    register: function register(node) {\n      var key = getObjectValueByPath(node.item, this.itemKey);\n      this.nodes[key].vnode = node;\n      this.updateVnodeState(key);\n    },\n    unregister: function unregister(node) {\n      var key = getObjectValueByPath(node.item, this.itemKey);\n      if (this.nodes[key]) this.nodes[key].vnode = null;\n    },\n    isParent: function isParent(key) {\n      return this.nodes[key].children && this.nodes[key].children.length;\n    },\n    updateActive: function updateActive(key, isActive) {\n      var _this8 = this;\n      if (!this.nodes.hasOwnProperty(key)) return;\n      if (!this.multipleActive) {\n        this.activeCache.forEach(function (active) {\n          _this8.nodes[active].isActive = false;\n          _this8.updateVnodeState(active);\n          _this8.activeCache.delete(active);\n        });\n      }\n      var node = this.nodes[key];\n      if (!node) return;\n      if (isActive) this.activeCache.add(key);else this.activeCache.delete(key);\n      node.isActive = isActive;\n      this.updateVnodeState(key);\n    },\n    updateSelected: function updateSelected(key, isSelected) {\n      var isForced = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!this.nodes.hasOwnProperty(key)) return;\n      var changed = new Map();\n      if (this.selectionType !== 'independent') {\n        var _iterator3 = _createForOfIteratorHelper(this.getDescendants(key)),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var descendant = _step3.value;\n            if (!getObjectValueByPath(this.nodes[descendant].item, this.itemDisabled) || isForced) {\n              this.nodes[descendant].isSelected = isSelected;\n              this.nodes[descendant].isIndeterminate = false;\n              changed.set(descendant, isSelected);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        var calculated = this.calculateState(key, this.nodes);\n        this.nodes[key].isSelected = isSelected;\n        this.nodes[key].isIndeterminate = calculated.isIndeterminate;\n        changed.set(key, isSelected);\n        var _iterator4 = _createForOfIteratorHelper(this.getParents(key)),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var parent = _step4.value;\n            var _calculated = this.calculateState(parent, this.nodes);\n            this.nodes[parent].isSelected = _calculated.isSelected;\n            this.nodes[parent].isIndeterminate = _calculated.isIndeterminate;\n            changed.set(parent, _calculated.isSelected);\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      } else {\n        this.nodes[key].isSelected = isSelected;\n        this.nodes[key].isIndeterminate = false;\n        changed.set(key, isSelected);\n      }\n      var _iterator5 = _createForOfIteratorHelper(changed.entries()),\n        _step5;\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var _step5$value = _slicedToArray(_step5.value, 2),\n            _key = _step5$value[0],\n            value = _step5$value[1];\n          this.updateVnodeState(_key);\n          if (this.selectionType === 'leaf' && this.isParent(_key)) continue;\n          value === true ? this.selectedCache.add(_key) : this.selectedCache.delete(_key);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    },\n    updateOpen: function updateOpen(key, isOpen) {\n      var _this9 = this;\n      if (!this.nodes.hasOwnProperty(key)) return;\n      var node = this.nodes[key];\n      var children = getObjectValueByPath(node.item, this.itemChildren);\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(function () {\n          return _this9.updateOpen(key, isOpen);\n        });\n      } else if (children && children.length) {\n        node.isOpen = isOpen;\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key);\n        this.updateVnodeState(key);\n      }\n    },\n    updateVnodeState: function updateVnodeState(key) {\n      var node = this.nodes[key];\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected;\n        node.vnode.isIndeterminate = node.isIndeterminate;\n        node.vnode.isActive = node.isActive;\n        node.vnode.isOpen = node.isOpen;\n      }\n    },\n    isExcluded: function isExcluded(key) {\n      return !!this.search && this.excludedItems.has(key);\n    }\n  },\n  render: function render(h) {\n    var _this10 = this;\n    var children = this.items.length ? this.items.filter(function (item) {\n      return !_this10.isExcluded(getObjectValueByPath(item, _this10.itemKey));\n    }).map(function (item) {\n      var genChild = VTreeviewNode.options.methods.genChild.bind(_this10);\n      return genChild(item, _this10.disabled || getObjectValueByPath(item, _this10.itemDisabled));\n    })\n    /* istanbul ignore next */ : this.$slots.default; // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: _objectSpread({\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense\n      }, this.themeClasses)\n    }, children);\n  }\n});","map":{"version":3,"mappings":"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","names":["VTreeviewNode","VTreeviewNodeProps","Themeable","provide","RegistrableProvide","arrayDiff","deepEqual","getObjectValueByPath","mixins","consoleWarn","filterTreeItems","filterTreeItem","extend","name","treeview","props","active","type","Array","default","dense","Boolean","disabled","filter","Function","hoverable","items","multipleActive","open","openAll","returnObject","search","String","value","data","level","activeCache","Set","nodes","openCache","selectedCache","computed","excludedItems","excluded","i","length","itemKey","itemText","itemChildren","watch","handler","oldKeys","Object","keys","map","k","item","newKeys","getKeys","diff","forEach","oldSelectedCache","buildTree","emitSelected","deep","handleNodeCacheWatcher","updateActive","emitActive","updateSelected","updateOpen","emitOpen","created","getValue","key","mounted","$slots","prepend","append","updateAll","methods","push","children","parent","_a","oldNode","hasOwnProperty","isSelected","isIndeterminate","isActive","isOpen","vnode","node","c","selectionType","calculateState","add","updateVnodeState","state","counts","reduce","child","emitNodeCache","event","cache","$emit","updateFn","emitFn","v","old","getDescendants","descendants","getParents","parents","register","unregister","isParent","delete","isForced","changed","Map","descendant","itemDisabled","set","calculated","entries","hasLoaded","checkChildren","then","isExcluded","has","render","h","genChild","options","bind","staticClass","class","themeClasses"],"sourceRoot":"","sources":["../../../src/components/VTreeview/VTreeview.ts"],"sourcesContent":["// Styles\nimport './VTreeview.sass'\n\n// Types\nimport { VNode, VNodeChildrenArrayContents, PropType } from 'vue'\nimport { PropValidator } from 'vue/types/options'\nimport { TreeviewItemFunction } from 'vuetify/types'\n\n// Components\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'\n\n// Mixins\nimport Themeable from '../../mixins/themeable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utils\nimport {\n  arrayDiff,\n  deepEqual,\n  getObjectValueByPath,\n} from '../../util/helpers'\nimport mixins from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\nimport {\n  filterTreeItems,\n  filterTreeItem,\n} from './util/filterTreeItems'\n\ntype VTreeviewNodeInstance = InstanceType<typeof VTreeviewNode>\n\ntype NodeCache = Set<string | number>\ntype NodeArray = (string | number)[]\n\ntype NodeState = {\n  parent: number | string | null\n  children: (number | string)[]\n  vnode: VTreeviewNodeInstance | null\n  isActive: boolean\n  isSelected: boolean\n  isIndeterminate: boolean\n  isOpen: boolean\n  item: any\n}\n\nexport default mixins(\n  RegistrableProvide('treeview'),\n  Themeable\n  /* @vue/component */\n).extend({\n  name: 'v-treeview',\n\n  provide (): object {\n    return { treeview: this }\n  },\n\n  props: {\n    active: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    dense: Boolean,\n    disabled: Boolean,\n    filter: Function as PropType<TreeviewItemFunction>,\n    hoverable: Boolean,\n    items: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<any[]>,\n    multipleActive: Boolean,\n    open: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false, // TODO: Should be true in next major\n    },\n    search: String,\n    value: {\n      type: Array,\n      default: () => ([]),\n    } as PropValidator<NodeArray>,\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    level: -1,\n    activeCache: new Set() as NodeCache,\n    nodes: {} as Record<string | number, NodeState>,\n    openCache: new Set() as NodeCache,\n    selectedCache: new Set() as NodeCache,\n  }),\n\n  computed: {\n    excludedItems (): Set<string | number> {\n      const excluded = new Set<string|number>()\n\n      if (!this.search) return excluded\n\n      for (let i = 0; i < this.items.length; i++) {\n        filterTreeItems(\n          this.filter || filterTreeItem,\n          this.items[i],\n          this.search,\n          this.itemKey,\n          this.itemText,\n          this.itemChildren,\n          excluded\n        )\n      }\n\n      return excluded\n    },\n  },\n\n  watch: {\n    items: {\n      handler () {\n        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey))\n        const newKeys = this.getKeys(this.items)\n        const diff = arrayDiff(newKeys, oldKeys)\n\n        // We only want to do stuff if items have changed\n        if (!diff.length && newKeys.length < oldKeys.length) return\n\n        // If nodes are removed we need to clear them from this.nodes\n        diff.forEach(k => delete this.nodes[k])\n\n        const oldSelectedCache = [...this.selectedCache]\n        this.selectedCache = new Set()\n        this.activeCache = new Set()\n        this.openCache = new Set()\n        this.buildTree(this.items)\n\n        // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected()\n      },\n      deep: true,\n    },\n    active (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive)\n    },\n    value (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected)\n    },\n    open (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen)\n    },\n  },\n\n  created () {\n    const getValue = (key: string | number) => this.returnObject ? getObjectValueByPath(key, this.itemKey) : key\n\n    this.buildTree(this.items)\n\n    for (const value of this.value.map(getValue)) {\n      this.updateSelected(value, true, true)\n    }\n\n    for (const active of this.active.map(getValue)) {\n      this.updateActive(active, true)\n    }\n  },\n\n  mounted () {\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this)\n    }\n\n    if (this.openAll) {\n      this.updateAll(true)\n    } else {\n      this.open.forEach(key => this.updateOpen(this.returnObject ? getObjectValueByPath(key, this.itemKey) : key, true))\n      this.emitOpen()\n    }\n  },\n\n  methods: {\n    /** @public */\n    updateAll (value: boolean) {\n      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value))\n      this.emitOpen()\n    },\n    getKeys (items: any[], keys: any[] = []) {\n      for (let i = 0; i < items.length; i++) {\n        const key = getObjectValueByPath(items[i], this.itemKey)\n        keys.push(key)\n        const children = getObjectValueByPath(items[i], this.itemChildren)\n        if (children) {\n          keys.push(...this.getKeys(children))\n        }\n      }\n\n      return keys\n    },\n    buildTree (items: any[], parent: (string | number | null) = null) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const key = getObjectValueByPath(item, this.itemKey)\n        const children = getObjectValueByPath(item, this.itemChildren) ?? []\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false, isIndeterminate: false, isActive: false, isOpen: false, vnode: null,\n        } as NodeState\n\n        const node: any = {\n          vnode: oldNode.vnode,\n          parent,\n          children: children.map((c: any) => getObjectValueByPath(c, this.itemKey)),\n          item,\n        }\n\n        this.buildTree(children, key)\n\n        // This fixed bug with dynamic children resetting selected parent state\n        if (\n          this.selectionType !== 'independent' &&\n          parent !== null &&\n          !this.nodes.hasOwnProperty(key) &&\n          this.nodes.hasOwnProperty(parent)\n        ) {\n          node.isSelected = this.nodes[parent].isSelected\n        } else {\n          node.isSelected = oldNode.isSelected\n          node.isIndeterminate = oldNode.isIndeterminate\n        }\n\n        node.isActive = oldNode.isActive\n        node.isOpen = oldNode.isOpen\n\n        this.nodes[key] = node\n\n        if (children.length && this.selectionType !== 'independent') {\n          const { isSelected, isIndeterminate } = this.calculateState(key, this.nodes)\n\n          node.isSelected = isSelected\n          node.isIndeterminate = isIndeterminate\n        }\n\n        // Don't forget to rebuild cache\n        if (this.nodes[key].isSelected && (this.selectionType === 'independent' || node.children.length === 0)) this.selectedCache.add(key)\n        if (this.nodes[key].isActive) this.activeCache.add(key)\n        if (this.nodes[key].isOpen) this.openCache.add(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    calculateState (node: string | number, state: Record<string | number, NodeState>) {\n      const children = state[node].children\n      const counts = children.reduce((counts: number[], child: string | number) => {\n        counts[0] += +Boolean(state[child].isSelected)\n        counts[1] += +Boolean(state[child].isIndeterminate)\n\n        return counts\n      }, [0, 0])\n\n      const isSelected = !!children.length && counts[0] === children.length\n      const isIndeterminate = !isSelected && (counts[0] > 0 || counts[1] > 0)\n\n      return {\n        isSelected,\n        isIndeterminate,\n      }\n    },\n    emitOpen () {\n      this.emitNodeCache('update:open', this.openCache)\n    },\n    emitSelected () {\n      this.emitNodeCache('input', this.selectedCache)\n    },\n    emitActive () {\n      this.emitNodeCache('update:active', this.activeCache)\n    },\n    emitNodeCache (event: string, cache: NodeCache) {\n      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache])\n    },\n    handleNodeCacheWatcher (value: any[], cache: NodeCache, updateFn: Function, emitFn: Function) {\n      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value\n      const old = [...cache]\n      if (deepEqual(old, value)) return\n\n      old.forEach(key => updateFn(key, false))\n      value.forEach(key => updateFn(key, true))\n\n      emitFn()\n    },\n    getDescendants (key: string | number, descendants: NodeArray = []) {\n      const children = this.nodes[key].children\n\n      descendants.push(...children)\n\n      for (let i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants)\n      }\n\n      return descendants\n    },\n    getParents (key: string | number) {\n      let parent = this.nodes[key].parent\n\n      const parents = []\n      while (parent !== null) {\n        parents.push(parent)\n        parent = this.nodes[parent].parent\n      }\n\n      return parents\n    },\n    register (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      this.nodes[key].vnode = node\n\n      this.updateVnodeState(key)\n    },\n    unregister (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      if (this.nodes[key]) this.nodes[key].vnode = null\n    },\n    isParent (key: string | number) {\n      return this.nodes[key].children && this.nodes[key].children.length\n    },\n    updateActive (key: string | number, isActive: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(active => {\n          this.nodes[active].isActive = false\n          this.updateVnodeState(active)\n          this.activeCache.delete(active)\n        })\n      }\n\n      const node = this.nodes[key]\n      if (!node) return\n\n      if (isActive) this.activeCache.add(key)\n      else this.activeCache.delete(key)\n\n      node.isActive = isActive\n\n      this.updateVnodeState(key)\n    },\n    updateSelected (key: string | number, isSelected: boolean, isForced = false) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const changed = new Map()\n\n      if (this.selectionType !== 'independent') {\n        for (const descendant of this.getDescendants(key)) {\n          if (!getObjectValueByPath(this.nodes[descendant].item, this.itemDisabled) || isForced) {\n            this.nodes[descendant].isSelected = isSelected\n            this.nodes[descendant].isIndeterminate = false\n            changed.set(descendant, isSelected)\n          }\n        }\n\n        const calculated = this.calculateState(key, this.nodes)\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = calculated.isIndeterminate\n        changed.set(key, isSelected)\n\n        for (const parent of this.getParents(key)) {\n          const calculated = this.calculateState(parent, this.nodes)\n          this.nodes[parent].isSelected = calculated.isSelected\n          this.nodes[parent].isIndeterminate = calculated.isIndeterminate\n          changed.set(parent, calculated.isSelected)\n        }\n      } else {\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = false\n        changed.set(key, isSelected)\n      }\n\n      for (const [key, value] of changed.entries()) {\n        this.updateVnodeState(key)\n\n        if (this.selectionType === 'leaf' && this.isParent(key)) continue\n\n        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key)\n      }\n    },\n    updateOpen (key: string | number, isOpen: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const node = this.nodes[key]\n      const children = getObjectValueByPath(node.item, this.itemChildren)\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen))\n      } else if (children && children.length) {\n        node.isOpen = isOpen\n\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    updateVnodeState (key: string | number) {\n      const node = this.nodes[key]\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected\n        node.vnode.isIndeterminate = node.isIndeterminate\n        node.vnode.isActive = node.isActive\n        node.vnode.isOpen = node.isOpen\n      }\n    },\n    isExcluded (key: string | number) {\n      return !!this.search && this.excludedItems.has(key)\n    },\n  },\n\n  render (h): VNode {\n    const children: VNodeChildrenArrayContents = this.items.length\n      ? this.items.filter(item => {\n        return !this.isExcluded(getObjectValueByPath(item, this.itemKey))\n      }).map(item => {\n        const genChild = VTreeviewNode.options.methods.genChild.bind(this)\n\n        return genChild(item, this.disabled || getObjectValueByPath(item, this.itemDisabled))\n      })\n      /* istanbul ignore next */\n      : this.$slots.default! // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: {\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense,\n        ...this.themeClasses,\n      },\n    }, children)\n  },\n})\n"]},"metadata":{},"sourceType":"module"}