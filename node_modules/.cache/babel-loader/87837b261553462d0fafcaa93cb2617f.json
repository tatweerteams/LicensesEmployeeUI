{"ast":null,"code":"import { insertAccounts } from \"../Apis/index.js\";\nimport { createHelpers } from \"vuex-map-fields\";\nconst {\n  getDataFields,\n  updateDataField\n} = createHelpers({\n  getterType: \"getDataFields\",\n  mutationType: \"updateDataField\"\n});\nexport default {\n  namespaced: true,\n  state: {\n    excelData: [],\n    excelBranchId: null\n  },\n  getters: {\n    getDataFields\n  },\n  mutations: {\n    updateDataField,\n    RESET_EXCEL_DATA(state) {\n      state.excelData = [];\n      state.excelBranchId = null;\n    }\n  },\n  actions: {\n    ClearExcelData({\n      commit\n    }) {\n      commit(\"RESET_EXCEL_DATA\");\n    },\n    InsertListOfAccounts({\n      commit,\n      state\n    }) {\n      return new Promise((resolve, reject) => {\n        let dto = {\n          \"insertModel\": state.excelData,\n          \"branchId\": state.excelBranchId\n        };\n        insertAccounts(dto).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["insertAccounts","createHelpers","getDataFields","updateDataField","getterType","mutationType","namespaced","state","excelData","excelBranchId","getters","mutations","RESET_EXCEL_DATA","actions","ClearExcelData","commit","InsertListOfAccounts","Promise","resolve","reject","dto","then","response","console","log","messages","catch","error"],"sources":["D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/src/views/Account/Stores/excelAccounts.js"],"sourcesContent":["import {\r\n    insertAccounts,\r\n} from \"../Apis/index.js\";\r\n\r\nimport { createHelpers } from \"vuex-map-fields\";\r\nconst { getDataFields, updateDataField } = createHelpers({\r\n    getterType: \"getDataFields\",\r\n    mutationType: \"updateDataField\",\r\n});\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state: {\r\n        excelData: [],\r\n        excelBranchId: null,\r\n    },\r\n\r\n    getters: {\r\n        getDataFields,\r\n    },\r\n\r\n    mutations: {\r\n        updateDataField,\r\n\r\n        RESET_EXCEL_DATA(state) {\r\n            state.excelData = [];\r\n            state.excelBranchId = null;\r\n        },\r\n\r\n    },\r\n\r\n    actions: {\r\n\r\n        ClearExcelData({ commit }) {\r\n            commit(\"RESET_EXCEL_DATA\");\r\n        },\r\n\r\n        InsertListOfAccounts({ commit, state }) {\r\n            return new Promise((resolve, reject) => {\r\n                let dto = {\r\n                    \"insertModel\": state.excelData,\r\n                    \"branchId\": state.excelBranchId\r\n                }\r\n                insertAccounts(dto)\r\n                    .then((response) => {\r\n                        console.log(commit);\r\n                        resolve(response.messages[0]);\r\n                    })\r\n                    .catch((error) => {\r\n                        reject(error);\r\n                    });\r\n            });\r\n        },\r\n\r\n    },\r\n};"],"mappings":"AAAA,SACIA,cAAc,QACX,kBAAkB;AAEzB,SAASC,aAAa,QAAQ,iBAAiB;AAC/C,MAAM;EAAEC,aAAa;EAAEC;AAAgB,CAAC,GAAGF,aAAa,CAAC;EACrDG,UAAU,EAAE,eAAe;EAC3BC,YAAY,EAAE;AAClB,CAAC,CAAC;AAEF,eAAe;EACXC,UAAU,EAAE,IAAI;EAChBC,KAAK,EAAE;IACHC,SAAS,EAAE,EAAE;IACbC,aAAa,EAAE;EACnB,CAAC;EAEDC,OAAO,EAAE;IACLR;EACJ,CAAC;EAEDS,SAAS,EAAE;IACPR,eAAe;IAEfS,gBAAgB,CAACL,KAAK,EAAE;MACpBA,KAAK,CAACC,SAAS,GAAG,EAAE;MACpBD,KAAK,CAACE,aAAa,GAAG,IAAI;IAC9B;EAEJ,CAAC;EAEDI,OAAO,EAAE;IAELC,cAAc,CAAC;MAAEC;IAAO,CAAC,EAAE;MACvBA,MAAM,CAAC,kBAAkB,CAAC;IAC9B,CAAC;IAEDC,oBAAoB,CAAC;MAAED,MAAM;MAAER;IAAM,CAAC,EAAE;MACpC,OAAO,IAAIU,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACpC,IAAIC,GAAG,GAAG;UACN,aAAa,EAAEb,KAAK,CAACC,SAAS;UAC9B,UAAU,EAAED,KAAK,CAACE;QACtB,CAAC;QACDT,cAAc,CAACoB,GAAG,CAAC,CACdC,IAAI,CAAEC,QAAQ,IAAK;UAChBC,OAAO,CAACC,GAAG,CAACT,MAAM,CAAC;UACnBG,OAAO,CAACI,QAAQ,CAACG,QAAQ,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;UACdR,MAAM,CAACQ,KAAK,CAAC;QACjB,CAAC,CAAC;MACV,CAAC,CAAC;IACN;EAEJ;AACJ,CAAC"},"metadata":{},"sourceType":"module"}