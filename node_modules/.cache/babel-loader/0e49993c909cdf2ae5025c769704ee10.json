{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { getBanks, insertBank, updateBank, activationBank, deleteBank } from \"../Apis/index.js\";\nimport { createHelpers } from \"vuex-map-fields\";\nconst {\n  getDataFields,\n  updateDataField\n} = createHelpers({\n  getterType: \"getDataFields\",\n  mutationType: \"updateDataField\"\n});\nexport default {\n  namespaced: true,\n  state: {\n    grids: [],\n    editedItem: {\n      id: null,\n      name: null,\n      bankNo: null,\n      bankRegions: []\n    },\n    defaultItem: {\n      id: null,\n      name: null,\n      bankNo: null,\n      bankRegions: []\n    }\n  },\n  getters: {\n    getDataFields,\n    GET_ACTIVE_BANKS(state) {\n      return state.grids;\n    }\n  },\n  mutations: {\n    updateDataField,\n    SET_DATA_BANKS(state, items) {\n      state.grids = items;\n    },\n    RESET_DATA(state) {\n      state.editedItem = Object.assign({}, state.defaultItem);\n    },\n    SET_ITEM_BANK(state, item) {\n      state.editedItem.id = item.bankId;\n      state.editedItem.bankNo = item.bankNo;\n      state.editedItem.name = item.name;\n    },\n    SET_BANK_ITEM_LIST(state, item) {\n      state.grids = [];\n      state.grids.push(item);\n    }\n  },\n  actions: {\n    ClearDataItem({\n      commit\n    }) {\n      commit(\"RESET_DATA\");\n    },\n    SetDataUpdate({\n      commit\n    }, item) {\n      commit(\"SET_ITEM_BANK\", item);\n    },\n    SetBankItemList({\n      commit\n    }, item) {\n      commit(\"SET_BANK_ITEM_LIST\", item);\n    },\n    GetBanks({\n      commit\n    }, filter) {\n      return new Promise((resolve, reject) => {\n        getBanks(filter).then(response => {\n          commit(\"SET_DATA_BANKS\", response.result);\n          resolve(response);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    InsertBank({\n      commit,\n      state\n    }) {\n      let regionIds = [];\n      state.editedItem.bankRegions.map(item => regionIds.push({\n        regionId: item.regionId\n      }));\n      const data = {\n        name: state.editedItem.name,\n        bankNo: state.editedItem.bankNo,\n        bankRegions: regionIds\n      };\n      return new Promise((resolve, reject) => {\n        insertBank(data).then(response => {\n          commit(\"RESET_DATA\");\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    UpdateBank({\n      commit,\n      state\n    }) {\n      const data = {\n        name: state.editedItem.name,\n        bankNo: state.editedItem.bankNo,\n        id: state.editedItem.id\n      };\n      return new Promise((resolve, reject) => {\n        updateBank(data).then(response => {\n          commit(\"RESET_DATA\");\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    ActivateBank({\n      commit\n    }, item) {\n      const param = {\n        bankId: item.bankId,\n        isActive: item.isActive\n      };\n      return new Promise((resolve, reject) => {\n        activationBank(param).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    DeleteBank({\n      commit\n    }, item) {\n      const param = {\n        bankId: item.bankId\n      };\n      return new Promise((resolve, reject) => {\n        deleteBank(param).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["getBanks","insertBank","updateBank","activationBank","deleteBank","createHelpers","getDataFields","updateDataField","getterType","mutationType","namespaced","state","grids","editedItem","id","name","bankNo","bankRegions","defaultItem","getters","GET_ACTIVE_BANKS","mutations","SET_DATA_BANKS","items","RESET_DATA","Object","assign","SET_ITEM_BANK","item","bankId","SET_BANK_ITEM_LIST","push","actions","ClearDataItem","commit","SetDataUpdate","SetBankItemList","GetBanks","filter","Promise","resolve","reject","then","response","result","catch","error","InsertBank","regionIds","map","regionId","data","messages","UpdateBank","ActivateBank","param","isActive","console","log","DeleteBank"],"sources":["D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/src/views/Bank/Stores/index.js"],"sourcesContent":["import {\r\n  getBanks,\r\n  insertBank,\r\n  updateBank,\r\n  activationBank,\r\n  deleteBank,\r\n} from \"../Apis/index.js\";\r\n\r\nimport { createHelpers } from \"vuex-map-fields\";\r\nconst { getDataFields, updateDataField } = createHelpers({\r\n  getterType: \"getDataFields\",\r\n  mutationType: \"updateDataField\",\r\n});\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    grids: [],\r\n    editedItem: {\r\n      id: null,\r\n      name: null,\r\n      bankNo: null,\r\n      bankRegions: [],\r\n    },\r\n\r\n    defaultItem: {\r\n      id: null,\r\n      name: null,\r\n      bankNo: null,\r\n      bankRegions: [],\r\n    },\r\n  },\r\n\r\n  getters: {\r\n    getDataFields,\r\n    GET_ACTIVE_BANKS(state)\r\n    {\r\n      return state.grids;\r\n    }\r\n  },\r\n\r\n  mutations: {\r\n    updateDataField,\r\n\r\n    SET_DATA_BANKS(state, items) {\r\n      state.grids = items;\r\n    },\r\n    RESET_DATA(state) {\r\n      state.editedItem = Object.assign({}, state.defaultItem);\r\n    },\r\n    SET_ITEM_BANK(state, item) {\r\n      state.editedItem.id = item.bankId;\r\n      state.editedItem.bankNo = item.bankNo;\r\n      state.editedItem.name = item.name;\r\n    },\r\n    SET_BANK_ITEM_LIST(state, item)\r\n    {\r\n      state.grids=[];\r\n      state.grids.push(item);\r\n    }\r\n  },\r\n\r\n  actions: {\r\n    ClearDataItem({ commit }) {\r\n      commit(\"RESET_DATA\");\r\n    },\r\n\r\n    SetDataUpdate({ commit }, item) {\r\n      commit(\"SET_ITEM_BANK\", item);\r\n    },\r\n    \r\n    SetBankItemList({ commit }, item) {\r\n      commit(\"SET_BANK_ITEM_LIST\", item);\r\n    },\r\n\r\n    GetBanks({ commit },filter) {\r\n      return new Promise((resolve, reject) => {\r\n        getBanks(filter)\r\n          .then((response) => {\r\n            commit(\"SET_DATA_BANKS\", response.result);\r\n            resolve(response);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n    InsertBank({ commit, state }) {\r\n      let regionIds = [];\r\n      state.editedItem.bankRegions.map((item) =>\r\n        regionIds.push({\r\n          regionId: item.regionId,\r\n        })\r\n      );\r\n      const data = {\r\n        name: state.editedItem.name,\r\n        bankNo: state.editedItem.bankNo,\r\n        bankRegions: regionIds,\r\n      };\r\n\r\n      return new Promise((resolve, reject) => {\r\n        insertBank(data)\r\n          .then((response) => {\r\n            commit(\"RESET_DATA\");\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    UpdateBank({ commit, state }) {\r\n      const data = {\r\n        name: state.editedItem.name,\r\n        bankNo: state.editedItem.bankNo,\r\n        id: state.editedItem.id,\r\n      };\r\n\r\n      return new Promise((resolve, reject) => {\r\n        updateBank(data)\r\n          .then((response) => {\r\n            commit(\"RESET_DATA\");\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    ActivateBank({ commit }, item) {\r\n      const param = {\r\n        bankId: item.bankId,\r\n        isActive: item.isActive,\r\n      };\r\n      return new Promise((resolve, reject) => {\r\n        activationBank(param)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n    DeleteBank({ commit }, item) {\r\n      const param = {\r\n        bankId: item.bankId\r\n      };\r\n      return new Promise((resolve, reject) => {\r\n        deleteBank(param)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}