{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { mapActions } from \"vuex\";\nimport { validationInput } from \"../../../models/validationInput.js\";\nimport { createHelpers } from \"vuex-map-fields\";\nconst {\n  mapFields\n} = createHelpers({\n  getterType: \"getDataFields\",\n  mutationType: \"updateDataField\"\n});\nexport default {\n  name: \"insert-Or-Update\",\n  props: {\n    updateItemProp: {},\n    dialogProp: {}\n  },\n  data: () => ({\n    banks: [],\n    regions: [],\n    activeBranchs: [],\n    accountNumber: null,\n    accountBranchNumber: null,\n    userInfo: null,\n    selectedBranchNum: null,\n    dialog: false,\n    valid: false,\n    isLoading: false,\n    isLoadingRegion: false,\n    isLoadingBranch: false,\n    validationInput: validationInput,\n    selectedBank: null,\n    selectedBranch: null,\n    selectedRegion: null,\n    searchRegion: null,\n    searchBank: null,\n    searchBranch: null,\n    filterRegionData: {\n      bankId: null,\n      regionName: null\n    },\n    filterBankData: {\n      bankName: null\n    },\n    selectAccountType: null,\n    filterBranchData: {\n      branchRegionId: null,\n      NameOrNumber: null\n    },\n    accountTypeOptions: [{\n      text: \"افراد\",\n      value: 1\n    }, {\n      text: \"شركات\",\n      value: 2\n    }]\n  }),\n  computed: {\n    ...mapFields(\"accountStore\", {\n      id: \"editedItem.id\",\n      accountName: \"editedItem.accountName\",\n      accountNo: \"editedItem.accountNo\",\n      phoneNumber: \"editedItem.phoneNumber\",\n      branchId: \"editedItem.branchId\",\n      accountType: \"editedItem.accountType\",\n      accountState: \"editedItem.accountState\",\n      inputType: \"editedItem.inputType\"\n    }),\n    formTitle() {\n      return this.id ? \"تعديل بيانات الحساب\" : \"إضافة حساب جديد\";\n    }\n  },\n  watch: {\n    dialogProp: {\n      handler(data) {\n        this.dialog = data;\n        this.getUserInfo();\n      },\n      immediate: true\n    },\n    accountNo: {\n      handler(data) {\n        if (data) {\n          this.accountBranchNumber = this.accountNo.substring(0, 3), this.accountNumber = this.accountNo.substring(3);\n        }\n      },\n      immediate: true\n    },\n    selectedBranch: {\n      handler(data) {\n        if (data) {\n          this.accountBranchNumber = this.selectedBranch?.branchNo;\n        }\n      },\n      immediate: true\n    },\n    updateItemProp: {\n      handler(data) {\n        if (data) this.editDialogAppear(data);\n      },\n      immediate: true\n    },\n    selectedBank(val) {\n      if (!val) this.clearRegionData();\n    },\n    selectedRegion(val) {\n      if (!val) this.clearRegionData();\n    },\n    searchBank(val) {\n      if (this.isLoading) return;\n      this.filterBankData.bankName = val;\n      this.getBanks();\n    },\n    searchRegion(val) {\n      if (this.isLoadingRegion) return;\n      if (val === this.selectedRegion?.regionName) return;\n      this.filterRegionData.regionName = val;\n      this.getBankRegions();\n    },\n    searchBranch(val) {\n      if (this.isLoadingBranch) return;\n      if (val === this.selectedBranch?.name) return;\n      this.filterBranchData.branchRegionId = this.selectedRegion?.bankRegionId;\n      this.filterBranchData.NameOrNumber = val;\n      this.GetBranches();\n    }\n  },\n  methods: {\n    ...mapActions({\n      SetDataUpdateStore: \"accountStore/SetDataUpdate\",\n      GetBankStore: \"bankStore/GetBanks\",\n      ClearDataItem: \"accountStore/ClearDataItem\",\n      GetActiveBranchesAction: \"branchStore/GetActiveBranchs\",\n      GetActiveBankRegions: \"bankRegionStore/GetActiveBankRegions\",\n      InsertAccountAction: \"accountStore/InsertAccount\",\n      UpdateAccountAction: \"accountStore/UpdateAccount\",\n      SetBranchItemList: \"branchStore/SetBranchItemList\",\n      SetBankItemList: \"bankStore/SetBankItemList\",\n      SetBankRegionItemList: \"bankRegionStore/SetBankRegionItemList\"\n    }),\n    phoneNumberLength() {\n      if (!this.phoneNumber) return true;\n      if (this.phoneNumber.length === 10) {\n        return true;\n      } else {\n        return ' رقم الهاتف يجب ان يتكون من 10 ارقام';\n      }\n    },\n    phoneNumberOrEmpty() {\n      if (!this.phoneNumber) return true;\n      if (!(this.phoneNumber.substring(0, 3) === \"092\" || this.phoneNumber.substring(0, 3) === \"091\" || this.phoneNumber.substring(0, 3) === \"094\" || this.phoneNumber.substring(0, 3) === \"095\" || this.phoneNumber.substring(0, 3) === \"023\" || this.phoneNumber.substring(0, 3) === \"025\" || this.phoneNumber.substring(0, 3) === \"024\" || this.phoneNumber.substring(0, 3) === \"053\" || this.phoneNumber.substring(0, 3) === \"051\" || this.phoneNumber.substring(0, 3) === \"054\" || this.phoneNumber.substring(0, 3) === \"061\" || this.phoneNumber.substring(0, 3) === \"067\" || this.phoneNumber.substring(0, 3) === \"069\" || this.phoneNumber.substring(0, 3) === \"063\" || this.phoneNumber.substring(0, 3) === \"062\" || this.phoneNumber.substring(0, 3) === \"071\")) {\n        return 'تأكد  من صحة رقم الهاتف ';\n      }\n      return true;\n    },\n    IsvalidAccount() {\n      // if (!this.accountNo) return false;\n      // let branchNo = \"\";\n\n      // if (this.selectedBranch) {\n      //   if (this.selectedBranch?.branchNo) branchNo = this.selectedBranch?.branchNo;\n      // }\n      // else {\n      //   branchNo = this.userInfo.branchNumber;\n      // }\n\n      // if (this.accountNo.substring(0, 3) === branchNo) return true;\n      // else return 'تأكد من رقم الفرع بالحساب';\n      return true;\n    },\n    hasPermission(crrentUser) {\n      this.userPermasstion = this.$store.getters[\"auth/getRole\"];\n      var result = this.userPermasstion.some(item => crrentUser.includes(item));\n      return result;\n    },\n    getUserInfo() {\n      this.userInfo = this.$store.getters[\"auth/getInfo\"];\n    },\n    openDialog() {\n      this.dialog = true;\n      this.getBanks();\n      this.accountBranchNumber = this.selectedBranch ? this.selectedBranch?.branchNumber : this.userInfo.branchNumber;\n    },\n    getBanks() {\n      try {\n        this.isLoading = true;\n        this.GetBankStore(this.filterBankData).then(() => {\n          this.banks = [];\n          this.banks = [...this.$store.getters[\"bankStore/GET_ACTIVE_BANKS\"]];\n          this.isLoading = false;\n        }).catch(error => {\n          this.notify(`${error}`, \"#1d262d\");\n          this.isLoading = false;\n        });\n      } catch (error) {\n        this.isLoading = false;\n        this.notify(error, \"#1d262d\");\n      }\n    },\n    onBankChangeLoadRegions() {\n      this.getBankRegions();\n    },\n    onRegionChangeLoadBranches() {\n      this.filterBranchData.branchRegionId = this.selectedRegion?.bankRegionId;\n      this.GetBranches();\n    },\n    onBranchChanges(item) {\n      this.selectedBranchNum = item?.branchNo;\n    },\n    getBankRegions() {\n      //if (!this.selectedBank) return;\n      this.filterRegionData.bankId = this.selectedBank?.bankId;\n      try {\n        this.isLoadingRegion = true;\n        this.GetActiveBankRegions(this.filterRegionData).then(() => {\n          this.regions = [];\n          this.regions = [...this.$store.getters[\"bankRegionStore/GET_ACTIVE_BANKREGIONS\"]];\n          this.isLoadingRegion = false;\n        }).catch(() => {\n          //this.notify(`${error}`, \"#1d262d\");\n          this.isLoadingRegion = false;\n        });\n      } catch (error) {\n        this.isLoadingRegion = false;\n        //this.notify(error, \"#1d262d\");\n      }\n    },\n\n    GetBranches() {\n      try {\n        //this.isLoadingBranch = true;\n        this.GetActiveBranchesAction(this.filterBranchData).then(() => {\n          this.activeBranchs = [...this.$store.getters[\"branchStore/GET_ACTIVE_BRANCHS\"]];\n          this.isLoadingBranch = false;\n        }).catch(() => {\n          //this.notify(`${error}`, \"#1d262d\");\n          this.isLoadingBranch = false;\n        });\n      } catch (error) {\n        //this.isLoadingBranch = false;\n        this.notify(error, \"#1d262d\");\n      }\n    },\n    editDialogAppear(item) {\n      this.SetDataUpdateStore(item);\n      this.SetBankDetailsWhenEditDialogAppear(item);\n      this.SetBankRegionDetailsWhenEditDialogAppear(item);\n      this.SetBranchDetailsWhenEditDialogAppear(item);\n      this.SetAccountTypeWhenEditDialogAppear(item);\n      if (this.accountNo && this.id) {\n        this.selectedBranchNum = this.accountNo.substring(0, 3);\n      }\n      this.dialog = true;\n    },\n    SetBranchDetailsWhenEditDialogAppear(item) {\n      this.activeBranchs.push({\n        id: item.branchId,\n        name: item.branchName,\n        branchNo: item.branchNo\n      });\n      this.selectedBranch = this.activeBranchs.find(x => x.id == item.branchId);\n    },\n    SetBankDetailsWhenEditDialogAppear(item) {\n      this.banks.push({\n        name: item.bankName,\n        bankId: item.bankId\n      });\n      this.selectedBank = this.banks.find(x => x.bankId == item.bankId);\n    },\n    SetBankRegionDetailsWhenEditDialogAppear(item) {\n      this.regions.push({\n        regionName: item.regionName,\n        bankRegionId: item.bankRegionId\n      });\n      this.selectedRegion = this.regions.find(x => x.bankRegionId == item.bankRegionId);\n    },\n    SetAccountTypeWhenEditDialogAppear(item) {\n      if (item.bankRegionId) {\n        this.selectAccountType = this.accountTypeOptions.find(pred => pred.value == item.accountTypeValue);\n      }\n    },\n    clearRegionData() {\n      this.isLoadingRegion = false;\n      this.regions = [];\n      this.selectedRegion = null;\n      this.searchRegion = null;\n      this.filterRegionData.bankId = null;\n      this.filterRegionData.regionName = null;\n      this.clearBranchData();\n    },\n    clearBranchData() {\n      this.isLoadingBranch = false;\n      this.activeBranchs = [];\n      this.searchBranch = null;\n      this.selectedBranch = null;\n      this.filterBranchData.branchRegionId = null;\n      this.filterBranchData.NameOrNumber = null;\n    },\n    close() {\n      this.dialog = false;\n      this.ClearDataItemStore();\n      this.resetValidation();\n      this.selectedBank = null;\n      this.selectedBranch = null;\n      this.$emit(\"close-edit-account\");\n    },\n    save() {\n      this.branchId = this.selectedBranch?.id;\n      if (this.id) {\n        this.updateAccount();\n      } else {\n        this.insertAccount();\n      }\n    },\n    insertAccount() {\n      this.inputType = 1;\n      this.accountState = 1;\n      this.accountType = this.selectAccountType.value;\n      this.branchId = this.selectedBranch?.id ?? this.userInfo.branchId;\n      this.accountNo = this.accountBranchNumber + this.accountNumber;\n      this.$store.dispatch(\"loading\", true);\n      this.InsertAccountAction().then(res => {\n        this.$emit(\"refresh-data\");\n        this.$store.dispatch(\"loading\", false);\n        this.notify(`${res}`, \"#1d262d\");\n        this.close();\n      }).catch(error => {\n        this.notify(`${error}`, \"#1d262d\");\n        this.$store.dispatch(\"loading\", false);\n      });\n    },\n    updateAccount() {\n      this.accountType = this.selectAccountType.value;\n      this.$store.dispatch(\"loading\", true);\n      this.accountNo = this.accountBranchNumber + this.accountNumber;\n      this.UpdateAccountAction().then(res => {\n        this.$emit(\"refresh-data\");\n        this.notify(`${res}`, \"#1d262d\");\n        this.close();\n      }).catch(error => {\n        this.notify(`${error}`, \"#1d262d\");\n        this.$store.dispatch(\"loading\", false);\n      });\n    },\n    resetValidation() {\n      this.$refs.formAccount?.reset();\n    },\n    ClearDataItemStore() {\n      this.ClearDataItem();\n    },\n    notify(text, color) {\n      this.$store.commit(\"showMessage\", {\n        text: text,\n        color: color\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AAoHA;AACA;AAEA;AACA;EAAAA;AAAA;EACAC;EACAC;AACA;AACA;EACAC;EACAC;IACAC;IACAC;EACA;EAEAC;IAEAC;IACAC;IACAC;IAEAC;IACAC;IAEAC;IACAC;IAEAC;IACAC;IACAC;IACAC;IACAC;IAEAC;IAEAC;IACAC;IACAC;IAEAC;IACAC;IACAC;IAEAC;MACAC;MACAC;IACA;IAEAC;MACAC;IACA;IAEAC;IAEAC;MACAC;MACAC;IACA;IAEAC,qBACA;MAAAC;MAAAC;IAAA,GACA;MAAAD;MAAAC;IAAA;EAGA;EAEAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;IAEAC;MACA;IACA;EAEA;EAEAC;IAEA3C;MACA4C;QACA;QACA;MACA;MACAC;IACA;IAEAT;MACAQ;QACA;UACA,2DACA;QACA;MACA;MACAC;IACA;IAEA7B;MACA4B;QACA;UACA;QACA;MACA;MACAC;IACA;IAEA9C;MACA6C;QACA;MACA;MACAC;IACA;IAEA9B;MACA;IACA;IAEAE;MACA;IACA;IAEAE;MACA;MACA;MACA;IACA;IAEAD;MACA;MACA;MACA;MACA;IACA;IAEAE;MACA;MACA;MACA;MACA;MACA;IACA;EAEA;EAEA0B;IAEA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;IAEAC;MACA,uBACA;MAEA;QACA;MACA;QACA;MACA;IACA;IAEAC;MACA;MAEA,MACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,8CACA,2CAEA;QACA;MACA;MAEA;IACA;IAEAC;MACA;MACA;;MAEA;MACA;MACA;MACA;MACA;MACA;;MAEA;MACA;MACA;IACA;IAEAC;MACA;MACA,+CACAC,0BACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACA;MACA;IACA;IAEAC;MACA;QACA;QACA,uCACAC;UACA;UACA,cACA,qDACA;UACA;QACA,GACAC;UACA;UACA;QACA;MACA;QACA;QACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACA;MACA;QACA;QACA,iDACAL;UACA;UACA;UACA;QACA,GACAC;UACA;UACA;QACA;MACA;QACA;QACA;MACA;IACA;;IAEAK;MACA;QACA;QACA,oDACAN;UACA,sBACA,yDACA;UACA;QACA,GACAC;UACA;UACA;QACA;MACA;QACA;QACA;MACA;IACA;IAEAM;MACA;MACA;MACA;MACA;MACA;MACA;QACA;MACA;MACA;IACA;IAEAC;MACA;QACAvC;QACArC;QACA6E;MACA;MACA;IACA;IAEAC;MACA;QACA9E;QACAyB;MACA;MACA;IACA;IAEAsD;MACA;QACArD;QACAsD;MACA;MACA;IACA;IAEAC;MACA;QACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;MAEA;IACA;IAEAC;MACA;MACA;QACA;MACA;QACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;MAEA;MACA,2BACAlB;QACA;QACA;QACA;QACA;MACA,GACAC;QACA;QACA;MACA;IACA;IAEAkB;MACA;MACA;MAEA;MAEA,2BACAnB;QACA;QACA;QACA;MACA,GACAC;QACA;QACA;MACA;IACA;IAEAmB;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;QAAAxD;QAAAyD;MAAA;IACA;EAEA;AACA","names":["mapFields","getterType","mutationType","name","props","updateItemProp","dialogProp","data","banks","regions","activeBranchs","accountNumber","accountBranchNumber","userInfo","selectedBranchNum","dialog","valid","isLoading","isLoadingRegion","isLoadingBranch","validationInput","selectedBank","selectedBranch","selectedRegion","searchRegion","searchBank","searchBranch","filterRegionData","bankId","regionName","filterBankData","bankName","selectAccountType","filterBranchData","branchRegionId","NameOrNumber","accountTypeOptions","text","value","computed","id","accountName","accountNo","phoneNumber","branchId","accountType","accountState","inputType","formTitle","watch","handler","immediate","methods","SetDataUpdateStore","GetBankStore","ClearDataItem","GetActiveBranchesAction","GetActiveBankRegions","InsertAccountAction","UpdateAccountAction","SetBranchItemList","SetBankItemList","SetBankRegionItemList","phoneNumberLength","phoneNumberOrEmpty","IsvalidAccount","hasPermission","crrentUser","getUserInfo","openDialog","getBanks","then","catch","onBankChangeLoadRegions","onRegionChangeLoadBranches","onBranchChanges","getBankRegions","GetBranches","editDialogAppear","SetBranchDetailsWhenEditDialogAppear","branchNo","SetBankDetailsWhenEditDialogAppear","SetBankRegionDetailsWhenEditDialogAppear","bankRegionId","SetAccountTypeWhenEditDialogAppear","clearRegionData","clearBranchData","close","save","insertAccount","updateAccount","resetValidation","ClearDataItemStore","notify","color"],"sourceRoot":"src/views/Account/Components","sources":["InsertOrUpdateComponent.vue"],"sourcesContent":["<template>\r\n  <v-dialog v-model=\"dialog\" max-width=\"800px\" persistent>\r\n    <template v-slot:activator=\"{ on }\">\r\n      <template>\r\n        <v-btn color=\"#536DFE\" class=\"white--text \" @click=\"openDialog\" v-on=\"on\" elevation=\"5\">\r\n          <v-icon class=\"ml-2\">mdi-plus-circle</v-icon><span> إضافة حساب جديد</span>\r\n        </v-btn>\r\n      </template>\r\n    </template>\r\n    <v-card>\r\n      <v-card-title>\r\n        <span class=\"headline\">{{ formTitle }}</span>\r\n      </v-card-title>\r\n\r\n      <v-divider></v-divider>\r\n      <v-card-text>\r\n        <v-container>\r\n          <v-form ref=\"formAccount\" v-model=\"valid\">\r\n\r\n            <v-row>\r\n              <v-col cols=\"12\" sm=\"6\" v-if=\"hasPermission(['AdminSystem']) && !id\">\r\n                <v-autocomplete v-model=\"selectedBank\" :items=\"banks\" :loading=\"isLoading\" single-line dense\r\n                  :search-input.sync=\"searchBank\" item-text=\"name\" item-value=\"bankId\" label=\"اختر المصرف\"\r\n                  placeholder=\"بحث عن المصرف\" return-object no-data-text=\" ابحث عن اسم المصرف\" clearable\r\n                  prepend-icon=\"mdi-bank\" @change=\"onBankChangeLoadRegions\">\r\n                </v-autocomplete>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\" v-if=\"hasPermission(['AdminSystem', 'AddAccountsToOtherBranches'])\">\r\n                <v-autocomplete v-model=\"selectedRegion\" :items=\"regions\" :loading=\"isLoadingRegion\" single-line dense\r\n                  required :search-input.sync=\"searchRegion\" item-text=\"regionName\" item-value=\"bankRegionId\"\r\n                  label=\"اختر المنطقة\" placeholder=\"بحث عن المنطقة\" return-object no-data-text=\"لايوجد بيانات\" clearable\r\n                  prepend-icon=\"mdi-map-marker\" @change=\"onRegionChangeLoadBranches\">\r\n                </v-autocomplete>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\" v-if=\"hasPermission(['AdminSystem', 'AddAccountsToOtherBranches'])\">\r\n                <v-autocomplete v-model=\"selectedBranch\" :items=\"activeBranchs\" :loading=\"isLoadingBranch\" single-line\r\n                  dense :search-input.sync=\"searchBranch\" item-text=\"name\" item-value=\"id\" label=\"اختر الفرع\"\r\n                  allow-overflowplaceholder=\"بحث عن الفرع\" return-object no-data-text=\"لايوجد بيانات\" clearable\r\n                  prepend-icon=\"mdi-bank\" @change=\"onBranchChanges\">\r\n                </v-autocomplete>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-select v-model=\"selectAccountType\" :items=\"accountTypeOptions\" item-text=\"text\" item-value=\"value\"\r\n                  dense label=\"نوع الحساب\" placeholder=\"نوع الحساب\" no-data-text=\"لايوجد بيانات\" return-object single-line\r\n                  prepend-icon=\"mdi-bank\" clearable>\r\n                </v-select>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-text-field prepend-icon=\"smartphone\" v-model=\"phoneNumber\" label=\"رقم الهاتف\" :maxlength=\"10\" :rules=\"[\r\n                  validationInput.numbersOrEmpty,\r\n                  phoneNumberOrEmpty(),\r\n                  phoneNumberLength()\r\n                  //validationInput.phoneNumberOrEmpty,\r\n                  //validationInput.phoneLengthOrEmpty,\r\n                ]\" dense>\r\n                </v-text-field>\r\n              </v-col>\r\n\r\n              <v-col cols=\"8\" sm=\"6\">\r\n                <v-row>\r\n                  <v-col cols=\"8\">\r\n                    <v-text-field prepend-icon=\"mdi-bank\" v-model=\"accountNumber\" label=\"رقم الحساب\" dense :maxlength=\"11\"\r\n                      :rules=\"[\r\n                        validationInput.numberOnly,\r\n                        validationInput.minLengthAccount,\r\n                        IsvalidAccount()\r\n                      ]\" required>\r\n                    </v-text-field>\r\n                  </v-col>\r\n\r\n                  <v-col cols=\"4\">\r\n                    <v-text-field v-model=\"accountBranchNumber\" dense :maxlength=\"3\" required disabled>\r\n                    </v-text-field>\r\n                  </v-col>\r\n\r\n                </v-row>\r\n              </v-col>\r\n\r\n              <v-col cols=\"8\" sm=\"6\">\r\n                <v-text-field prepend-icon=\"person\" v-model=\"accountName\" label=\"إسم الحساب\" dense :maxlength=\"150\"\r\n                  :rules=\"[\r\n                    validationInput.isEmpty,\r\n                    validationInput.currectInput,\r\n                    validationInput.minLength,\r\n                    validationInput.numEngAr,\r\n                  ]\" required>\r\n                </v-text-field>\r\n              </v-col>\r\n\r\n            </v-row>\r\n\r\n          </v-form>\r\n        </v-container>\r\n      </v-card-text>\r\n\r\n      <v-card-actions>\r\n        <div style=\"width: 100%;text-align: center;\">\r\n          <v-btn @click=\"save\" class=\"mx-2 white--text\" :disabled=\"!valid\" color=\"#536DFE\">\r\n            <v-icon>save</v-icon>\r\n            <span>حفظ البيانات</span>\r\n          </v-btn>\r\n          <v-btn class=\"ma-3\" @click=\"close\" outlined color=\"#E91D62\">\r\n            <v-icon dark>clear</v-icon><span>رجوع</span>\r\n          </v-btn>\r\n\r\n        </div>\r\n      </v-card-actions>\r\n    </v-card>\r\n  </v-dialog>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from \"vuex\";\r\nimport { validationInput } from \"../../../models/validationInput.js\";\r\n\r\nimport { createHelpers } from \"vuex-map-fields\";\r\nconst { mapFields } = createHelpers({\r\n  getterType: \"getDataFields\",\r\n  mutationType: \"updateDataField\",\r\n});\r\nexport default {\r\n  name: \"insert-Or-Update\",\r\n  props: {\r\n    updateItemProp: {},\r\n    dialogProp: {},\r\n  },\r\n\r\n  data: () => ({\r\n\r\n    banks: [],\r\n    regions: [],\r\n    activeBranchs: [],\r\n\r\n    accountNumber: null,\r\n    accountBranchNumber: null,\r\n\r\n    userInfo: null,\r\n    selectedBranchNum: null,\r\n\r\n    dialog: false,\r\n    valid: false,\r\n    isLoading: false,\r\n    isLoadingRegion: false,\r\n    isLoadingBranch: false,\r\n\r\n    validationInput: validationInput,\r\n\r\n    selectedBank: null,\r\n    selectedBranch: null,\r\n    selectedRegion: null,\r\n\r\n    searchRegion: null,\r\n    searchBank: null,\r\n    searchBranch: null,\r\n\r\n    filterRegionData: {\r\n      bankId: null,\r\n      regionName: null,\r\n    },\r\n\r\n    filterBankData: {\r\n      bankName: null,\r\n    },\r\n\r\n    selectAccountType: null,\r\n\r\n    filterBranchData: {\r\n      branchRegionId: null,\r\n      NameOrNumber: null,\r\n    },\r\n\r\n    accountTypeOptions: [\r\n      { text: \"افراد\", value: 1 },\r\n      { text: \"شركات\", value: 2 },\r\n    ],\r\n\r\n  }),\r\n\r\n  computed: {\r\n    ...mapFields(\"accountStore\", {\r\n      id: \"editedItem.id\",\r\n      accountName: \"editedItem.accountName\",\r\n      accountNo: \"editedItem.accountNo\",\r\n      phoneNumber: \"editedItem.phoneNumber\",\r\n      branchId: \"editedItem.branchId\",\r\n      accountType: \"editedItem.accountType\",\r\n      accountState: \"editedItem.accountState\",\r\n      inputType: \"editedItem.inputType\",\r\n    }),\r\n\r\n    formTitle() {\r\n      return this.id ? \"تعديل بيانات الحساب\" : \"إضافة حساب جديد\";\r\n    },\r\n\r\n  },\r\n\r\n  watch: {\r\n\r\n    dialogProp: {\r\n      handler(data) {\r\n        this.dialog = data;\r\n        this.getUserInfo();\r\n      },\r\n      immediate: true,\r\n    },\r\n\r\n    accountNo: {\r\n      handler(data) {\r\n        if (data) {\r\n          this.accountBranchNumber = this.accountNo.substring(0, 3),\r\n            this.accountNumber = this.accountNo.substring(3)\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n\r\n    selectedBranch: {\r\n      handler(data) {\r\n        if (data) {\r\n          this.accountBranchNumber = this.selectedBranch?.branchNo\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n\r\n    updateItemProp: {\r\n      handler(data) {\r\n        if (data) this.editDialogAppear(data)\r\n      },\r\n      immediate: true,\r\n    },\r\n\r\n    selectedBank(val) {\r\n      if (!val) this.clearRegionData();\r\n    },\r\n\r\n    selectedRegion(val) {\r\n      if (!val) this.clearRegionData();\r\n    },\r\n\r\n    searchBank(val) {\r\n      if (this.isLoading) return;\r\n      this.filterBankData.bankName = val;\r\n      this.getBanks();\r\n    },\r\n\r\n    searchRegion(val) {\r\n      if (this.isLoadingRegion) return;\r\n      if (val === this.selectedRegion?.regionName) return;\r\n      this.filterRegionData.regionName = val;\r\n      this.getBankRegions();\r\n    },\r\n\r\n    searchBranch(val) {\r\n      if (this.isLoadingBranch) return;\r\n      if (val === this.selectedBranch?.name) return;\r\n      this.filterBranchData.branchRegionId = this.selectedRegion?.bankRegionId;\r\n      this.filterBranchData.NameOrNumber = val;\r\n      this.GetBranches();\r\n    },\r\n\r\n  },\r\n\r\n  methods: {\r\n\r\n    ...mapActions({\r\n      SetDataUpdateStore: \"accountStore/SetDataUpdate\",\r\n      GetBankStore: \"bankStore/GetBanks\",\r\n      ClearDataItem: \"accountStore/ClearDataItem\",\r\n      GetActiveBranchesAction: \"branchStore/GetActiveBranchs\",\r\n      GetActiveBankRegions: \"bankRegionStore/GetActiveBankRegions\",\r\n      InsertAccountAction: \"accountStore/InsertAccount\",\r\n      UpdateAccountAction: \"accountStore/UpdateAccount\",\r\n      SetBranchItemList: \"branchStore/SetBranchItemList\",\r\n      SetBankItemList: \"bankStore/SetBankItemList\",\r\n      SetBankRegionItemList: \"bankRegionStore/SetBankRegionItemList\",\r\n    }),\r\n\r\n    phoneNumberLength() {\r\n      if (!this.phoneNumber)\r\n        return true;\r\n\r\n      if (this.phoneNumber.length === 10) {\r\n        return true;\r\n      } else {\r\n        return ' رقم الهاتف يجب ان يتكون من 10 ارقام';\r\n      }\r\n    },\r\n\r\n    phoneNumberOrEmpty() {\r\n      if (!this.phoneNumber) return true;\r\n\r\n      if (!(\r\n        this.phoneNumber.substring(0, 3) === \"092\" ||\r\n        this.phoneNumber.substring(0, 3) === \"091\" ||\r\n        this.phoneNumber.substring(0, 3) === \"094\" ||\r\n        this.phoneNumber.substring(0, 3) === \"095\" ||\r\n        this.phoneNumber.substring(0, 3) === \"023\" ||\r\n        this.phoneNumber.substring(0, 3) === \"025\" ||\r\n        this.phoneNumber.substring(0, 3) === \"024\" ||\r\n        this.phoneNumber.substring(0, 3) === \"053\" ||\r\n        this.phoneNumber.substring(0, 3) === \"051\" ||\r\n        this.phoneNumber.substring(0, 3) === \"054\" ||\r\n        this.phoneNumber.substring(0, 3) === \"061\" ||\r\n        this.phoneNumber.substring(0, 3) === \"067\" ||\r\n        this.phoneNumber.substring(0, 3) === \"069\" ||\r\n        this.phoneNumber.substring(0, 3) === \"063\" ||\r\n        this.phoneNumber.substring(0, 3) === \"062\" ||\r\n        this.phoneNumber.substring(0, 3) === \"071\"\r\n\r\n      )) {\r\n        return 'تأكد  من صحة رقم الهاتف ';\r\n      }\r\n\r\n      return true;\r\n    },\r\n\r\n    IsvalidAccount() {\r\n      // if (!this.accountNo) return false;\r\n      // let branchNo = \"\";\r\n\r\n      // if (this.selectedBranch) {\r\n      //   if (this.selectedBranch?.branchNo) branchNo = this.selectedBranch?.branchNo;\r\n      // }\r\n      // else {\r\n      //   branchNo = this.userInfo.branchNumber;\r\n      // }\r\n\r\n      // if (this.accountNo.substring(0, 3) === branchNo) return true;\r\n      // else return 'تأكد من رقم الفرع بالحساب';\r\n      return true;\r\n    },\r\n\r\n    hasPermission(crrentUser) {\r\n      this.userPermasstion = this.$store.getters[\"auth/getRole\"];\r\n      var result = this.userPermasstion.some((item) =>\r\n        crrentUser.includes(item)\r\n      );\r\n      return result;\r\n    },\r\n\r\n    getUserInfo() {\r\n      this.userInfo = this.$store.getters[\"auth/getInfo\"];\r\n    },\r\n\r\n    openDialog() {\r\n      this.dialog = true;\r\n      this.getBanks();\r\n      this.accountBranchNumber = this.selectedBranch ? this.selectedBranch?.branchNumber : this.userInfo.branchNumber\r\n    },\r\n\r\n    getBanks() {\r\n      try {\r\n        this.isLoading = true;\r\n        this.GetBankStore(this.filterBankData)\r\n          .then(() => {\r\n            this.banks = [];\r\n            this.banks = [\r\n              ...this.$store.getters[\"bankStore/GET_ACTIVE_BANKS\"],\r\n            ];\r\n            this.isLoading = false;\r\n          })\r\n          .catch((error) => {\r\n            this.notify(`${error}`, \"#1d262d\");\r\n            this.isLoading = false;\r\n          });\r\n      } catch (error) {\r\n        this.isLoading = false;\r\n        this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n\r\n    onBankChangeLoadRegions() {\r\n      this.getBankRegions();\r\n    },\r\n\r\n    onRegionChangeLoadBranches() {\r\n      this.filterBranchData.branchRegionId = this.selectedRegion?.bankRegionId;\r\n      this.GetBranches();\r\n    },\r\n\r\n    onBranchChanges(item) {\r\n      this.selectedBranchNum = item?.branchNo;\r\n    },\r\n\r\n    getBankRegions() {\r\n      //if (!this.selectedBank) return;\r\n      this.filterRegionData.bankId = this.selectedBank?.bankId;\r\n      try {\r\n        this.isLoadingRegion = true;\r\n        this.GetActiveBankRegions(this.filterRegionData)\r\n          .then(() => {\r\n            this.regions = [];\r\n            this.regions = [...this.$store.getters[\"bankRegionStore/GET_ACTIVE_BANKREGIONS\"],];\r\n            this.isLoadingRegion = false;\r\n          })\r\n          .catch(() => {\r\n            //this.notify(`${error}`, \"#1d262d\");\r\n            this.isLoadingRegion = false;\r\n          });\r\n      } catch (error) {\r\n        this.isLoadingRegion = false;\r\n        //this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n\r\n    GetBranches() {\r\n      try {\r\n        //this.isLoadingBranch = true;\r\n        this.GetActiveBranchesAction(this.filterBranchData)\r\n          .then(() => {\r\n            this.activeBranchs = [\r\n              ...this.$store.getters[\"branchStore/GET_ACTIVE_BRANCHS\"],\r\n            ];\r\n            this.isLoadingBranch = false;\r\n          })\r\n          .catch(() => {\r\n            //this.notify(`${error}`, \"#1d262d\");\r\n            this.isLoadingBranch = false;\r\n          });\r\n      } catch (error) {\r\n        //this.isLoadingBranch = false;\r\n        this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n\r\n    editDialogAppear(item) {\r\n      this.SetDataUpdateStore(item);\r\n      this.SetBankDetailsWhenEditDialogAppear(item);\r\n      this.SetBankRegionDetailsWhenEditDialogAppear(item);\r\n      this.SetBranchDetailsWhenEditDialogAppear(item);\r\n      this.SetAccountTypeWhenEditDialogAppear(item);\r\n      if (this.accountNo && this.id) {\r\n        this.selectedBranchNum = this.accountNo.substring(0, 3);\r\n      }\r\n      this.dialog = true;\r\n    },\r\n\r\n    SetBranchDetailsWhenEditDialogAppear(item) {\r\n      this.activeBranchs.push({\r\n        id: item.branchId,\r\n        name: item.branchName,\r\n        branchNo: item.branchNo,\r\n      });\r\n      this.selectedBranch = this.activeBranchs.find((x) => x.id == item.branchId);\r\n    },\r\n\r\n    SetBankDetailsWhenEditDialogAppear(item) {\r\n      this.banks.push({\r\n        name: item.bankName,\r\n        bankId: item.bankId,\r\n      });\r\n      this.selectedBank = this.banks.find((x) => x.bankId == item.bankId);\r\n    },\r\n\r\n    SetBankRegionDetailsWhenEditDialogAppear(item) {\r\n      this.regions.push({\r\n        regionName: item.regionName,\r\n        bankRegionId: item.bankRegionId,\r\n      });\r\n      this.selectedRegion = this.regions.find((x) => x.bankRegionId == item.bankRegionId);\r\n    },\r\n\r\n    SetAccountTypeWhenEditDialogAppear(item) {\r\n      if (item.bankRegionId) {\r\n        this.selectAccountType = this.accountTypeOptions.find((pred) => pred.value == item.accountTypeValue);\r\n      }\r\n    },\r\n\r\n    clearRegionData() {\r\n      this.isLoadingRegion = false;\r\n      this.regions = [];\r\n      this.selectedRegion = null;\r\n      this.searchRegion = null;\r\n      this.filterRegionData.bankId = null;\r\n      this.filterRegionData.regionName = null;\r\n      this.clearBranchData();\r\n    },\r\n\r\n    clearBranchData() {\r\n      this.isLoadingBranch = false;\r\n      this.activeBranchs = [];\r\n      this.searchBranch = null;\r\n      this.selectedBranch = null;\r\n      this.filterBranchData.branchRegionId = null;\r\n      this.filterBranchData.NameOrNumber = null;\r\n    },\r\n\r\n    close() {\r\n      this.dialog = false;\r\n      this.ClearDataItemStore();\r\n      this.resetValidation();\r\n      this.selectedBank = null;\r\n      this.selectedBranch = null;\r\n\r\n      this.$emit(\"close-edit-account\");\r\n    },\r\n\r\n    save() {\r\n      this.branchId = this.selectedBranch?.id\r\n      if (this.id) {\r\n        this.updateAccount();\r\n      } else {\r\n        this.insertAccount();\r\n      }\r\n    },\r\n\r\n    insertAccount() {\r\n      this.inputType = 1;\r\n      this.accountState = 1;\r\n      this.accountType = this.selectAccountType.value;\r\n      this.branchId = this.selectedBranch?.id ?? this.userInfo.branchId;\r\n      this.accountNo = this.accountBranchNumber + this.accountNumber\r\n\r\n      this.$store.dispatch(\"loading\", true);\r\n      this.InsertAccountAction()\r\n        .then((res) => {\r\n          this.$emit(\"refresh-data\");\r\n          this.$store.dispatch(\"loading\", false);\r\n          this.notify(`${res}`, \"#1d262d\");\r\n          this.close();\r\n        })\r\n        .catch((error) => {\r\n          this.notify(`${error}`, \"#1d262d\");\r\n          this.$store.dispatch(\"loading\", false);\r\n        });\r\n    },\r\n\r\n    updateAccount() {\r\n      this.accountType = this.selectAccountType.value;\r\n      this.$store.dispatch(\"loading\", true);\r\n\r\n      this.accountNo = this.accountBranchNumber + this.accountNumber\r\n\r\n      this.UpdateAccountAction()\r\n        .then((res) => {\r\n          this.$emit(\"refresh-data\");\r\n          this.notify(`${res}`, \"#1d262d\");\r\n          this.close();\r\n        })\r\n        .catch((error) => {\r\n          this.notify(`${error}`, \"#1d262d\");\r\n          this.$store.dispatch(\"loading\", false);\r\n        });\r\n    },\r\n\r\n    resetValidation() {\r\n      this.$refs.formAccount?.reset();\r\n    },\r\n\r\n    ClearDataItemStore() {\r\n      this.ClearDataItem();\r\n    },\r\n\r\n    notify(text, color) {\r\n      this.$store.commit(\"showMessage\", { text: text, color: color });\r\n    },\r\n\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module"}