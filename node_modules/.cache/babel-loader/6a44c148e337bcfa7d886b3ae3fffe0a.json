{"ast":null,"code":"import _toConsumableArray from \"D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\n// import XLSX from \"xlsx\";\nimport * as XLSX from 'xlsx';\nimport { createHelpers } from \"vuex-map-fields\";\nimport { mapActions } from \"vuex\";\nvar _createHelpers = createHelpers({\n    getterType: \"getDataFields\",\n    mutationType: \"updateDataField\"\n  }),\n  mapFields = _createHelpers.mapFields;\nexport default {\n  name: \"Add-accounts-File\",\n  props: {\n    dlgInsertFileProp: {}\n  },\n  data: function data() {\n    return {\n      dialogUploadData: false,\n      loading: false,\n      errorMessageLabel: \"\",\n      userInfo: null,\n      banks: [],\n      regions: [],\n      activeBranchs: [],\n      isLoadingBanks: false,\n      isLoadingRegion: false,\n      isLoadingBranch: false,\n      searchRegion: null,\n      searchBank: null,\n      searchBranch: null,\n      selectedBank: null,\n      selectedBranch: null,\n      selectedRegion: null,\n      filterRegionData: {\n        bankId: null,\n        regionName: null\n      },\n      filterBankData: {\n        bankName: null\n      },\n      filterBranchData: {\n        branchRegionId: null,\n        NameOrNumber: null\n      },\n      //\n\n      selectAccountType: null,\n      accountTypeOptions: [{\n        text: \"افراد\",\n        value: 1\n      }, {\n        text: \"شركات\",\n        value: 2\n      }],\n      headersDataFromExcel: [{\n        text: \"اسم الحساب\",\n        value: \"accountName\",\n        sortable: true,\n        align: \"right\"\n      }, {\n        text: \"رقم الحساب\",\n        value: \"accountNo\",\n        sortable: true,\n        align: \"center\"\n      }, {\n        text: \"رقم الهاتف\",\n        value: \"phoneNumber\",\n        sortable: false,\n        align: \"center\"\n      }, {\n        text: \"\",\n        value: \"message\",\n        sortable: true,\n        align: \"center\"\n      }]\n    };\n  },\n  watch: {\n    dlgInsertFileProp: {\n      handler: function handler(data) {\n        this.dialogUploadData = data;\n        this.getUserInfo();\n        // console.log(this.userInfo)\n      },\n\n      immediate: true\n    },\n    searchBank: function searchBank(val) {\n      if (this.isLoadingBanks) return;\n      this.filterBankData.bankName = val;\n      this.getBanks();\n    },\n    searchRegion: function searchRegion(val) {\n      var _this$selectedRegion;\n      if (this.isLoadingRegion) return;\n      if (val === ((_this$selectedRegion = this.selectedRegion) === null || _this$selectedRegion === void 0 ? void 0 : _this$selectedRegion.regionName)) return;\n      this.filterRegionData.regionName = val;\n      this.getBankRegions();\n    },\n    searchBranch: function searchBranch(val) {\n      var _this$selectedBranch, _this$selectedRegion2;\n      if (this.isLoadingBranch) return;\n      if (val === ((_this$selectedBranch = this.selectedBranch) === null || _this$selectedBranch === void 0 ? void 0 : _this$selectedBranch.name)) return;\n      this.filterBranchData.branchRegionId = (_this$selectedRegion2 = this.selectedRegion) === null || _this$selectedRegion2 === void 0 ? void 0 : _this$selectedRegion2.bankRegionId;\n      this.filterBranchData.NameOrNumber = val;\n      this.GetBranches();\n    }\n  },\n  computed: _objectSpread(_objectSpread({}, mapFields(\"excelAccountsStore\", {\n    excelData: \"excelData\",\n    excelBranchId: \"excelBranchId\"\n  })), {}, {\n    // isValidExcelData() {\n    //   return this.excelData.some(s => !s?.message)\n    // },\n    isValidExcelData: function isValidExcelData() {\n      var _this$excelData$find;\n      var result = (_this$excelData$find = this.excelData.find(function (s) {\n        return (s === null || s === void 0 ? void 0 : s.message) != null;\n      })) !== null && _this$excelData$find !== void 0 ? _this$excelData$find : null;\n      if (result) {\n        return false;\n      } else {\n        return true;\n      }\n    }\n  }),\n  methods: _objectSpread(_objectSpread({\n    openDialog: function openDialog() {\n      this.dialogUploadData = true;\n    }\n  }, mapActions({\n    InsertListOfAccountsAction: \"excelAccountsStore/InsertListOfAccounts\",\n    ClearExcelDataAction: \"excelAccountsStore/ClearExcelData\",\n    GetBankStore: \"bankStore/GetBanks\",\n    GetActiveBankRegions: \"bankRegionStore/GetActiveBankRegions\",\n    GetActiveBranchesAction: \"branchStore/GetActiveBranchs\"\n  })), {}, {\n    hasPermassion: function hasPermassion(crrentUser) {\n      this.userPermasstion = this.$store.getters[\"auth/getRole\"];\n      var result = this.userPermasstion.some(function (item) {\n        return crrentUser.includes(item);\n      });\n      return result;\n    },\n    isExcel: function isExcel(file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name);\n    },\n    // Bank /region /branch dropdown list functions\n    getUserInfo: function getUserInfo() {\n      this.userInfo = this.$store.getters[\"auth/getInfo\"];\n    },\n    onBankChangeLoadRegions: function onBankChangeLoadRegions() {\n      this.getBankRegions();\n    },\n    onRegionChangeLoadBranches: function onRegionChangeLoadBranches() {\n      var _this$selectedRegion3;\n      this.clearUploadData();\n      this.filterBranchData.branchRegionId = (_this$selectedRegion3 = this.selectedRegion) === null || _this$selectedRegion3 === void 0 ? void 0 : _this$selectedRegion3.bankRegionId;\n      this.GetBranches();\n    },\n    getBankRegions: function getBankRegions() {\n      var _this$selectedBank,\n        _this = this;\n      this.filterRegionData.bankId = (_this$selectedBank = this.selectedBank) === null || _this$selectedBank === void 0 ? void 0 : _this$selectedBank.bankId;\n      try {\n        this.isLoadingRegion = true;\n        this.GetActiveBankRegions(this.filterRegionData).then(function () {\n          _this.regions = [];\n          _this.regions = _toConsumableArray(_this.$store.getters[\"bankRegionStore/GET_ACTIVE_BANKREGIONS\"]);\n          _this.isLoadingRegion = false;\n        }).catch(function () {\n          //this.notify(`${error}`, \"#1d262d\");\n          _this.isLoadingRegion = false;\n        });\n      } catch (error) {\n        this.isLoadingRegion = false;\n        //this.notify(error, \"#1d262d\");\n      }\n    },\n    getBanks: function getBanks() {\n      var _this2 = this;\n      try {\n        this.isLoading = true;\n        this.GetBankStore(this.filterBankData).then(function () {\n          _this2.banks = [];\n          _this2.banks = _toConsumableArray(_this2.$store.getters[\"bankStore/GET_ACTIVE_BANKS\"]);\n          _this2.isLoading = false;\n        }).catch(function (error) {\n          _this2.notify(\"\".concat(error), \"#1d262d\");\n          _this2.isLoading = false;\n        });\n      } catch (error) {\n        this.isLoading = false;\n        this.notify(error, \"#1d262d\");\n      }\n    },\n    GetBranches: function GetBranches() {\n      var _this3 = this;\n      try {\n        //this.isLoadingBranch = true;\n        this.GetActiveBranchesAction(this.filterBranchData).then(function () {\n          _this3.activeBranchs = _toConsumableArray(_this3.$store.getters[\"branchStore/GET_ACTIVE_BRANCHS\"]);\n          _this3.isLoadingBranch = false;\n        }).catch(function () {\n          //this.notify(`${error}`, \"#1d262d\");\n          _this3.isLoadingBranch = false;\n        });\n      } catch (error) {\n        //this.isLoadingBranch = false;\n        this.notify(error, \"#1d262d\");\n      }\n    },\n    onBranchChanges: function onBranchChanges(item) {\n      this.clearUploadData();\n      this.selectedBranchNum = item === null || item === void 0 ? void 0 : item.branchNo;\n    },\n    //end Bank /region /branch dropdown list functions\n    onAccountTypeChanged: function onAccountTypeChanged() {\n      this.ClearExcelDataAction();\n      this.errorMessageLabel = \"\";\n    },\n    handleDrop: function handleDrop(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      if (this.loading) return;\n      var files = e.dataTransfer.files;\n      if (files.length !== 1) {\n        this.notify(\"قم باختيار ملف واحد فقط\", \"#1d262d\");\n        return;\n      }\n      var rawFile = files[0]; // only use files[0]\n\n      if (!this.isExcel(rawFile)) {\n        this.notify(\"يجب رفع ملف اكسل فقط\", \"#1d262d\");\n        return false;\n      }\n      this.upload(rawFile);\n      e.stopPropagation();\n      e.preventDefault();\n    },\n    upload: function upload(rawFile) {\n      this.$refs[\"excel-upload-input\"].value = null; // fix can't select the same excel\n      if (!this.beforeUpload) {\n        this.readerData(rawFile);\n        return;\n      }\n      var before = this.beforeUpload(rawFile);\n      if (before) {\n        this.readerData(rawFile);\n      }\n    },\n    beforeUpload: function beforeUpload(file) {\n      var _this$selectAccountTy, _this$selectAccountTy2, _this$userInfo;\n      var isLessThan10M = file.size / 1024 / 1024 < 10;\n      if (isLessThan10M == false) {\n        this.notify(\"حجم ملف الاكسل يجب ان يكون اقل من 10 ميجابايت\", \"#1d262d\");\n        return false;\n      }\n      if (!(((_this$selectAccountTy = this.selectAccountType) === null || _this$selectAccountTy === void 0 ? void 0 : _this$selectAccountTy.value) === 1 || ((_this$selectAccountTy2 = this.selectAccountType) === null || _this$selectAccountTy2 === void 0 ? void 0 : _this$selectAccountTy2.value) === 2)) {\n        this.notify(\"الرجاء اختيار نوع الحسابات أفراد او شركات\", \"#1d262d\");\n        return false;\n      }\n      if (((_this$userInfo = this.userInfo) === null || _this$userInfo === void 0 ? void 0 : _this$userInfo.branchId) === null && this.selectedBranch === null) {\n        this.notify(\"الرجاء اختيار الفرع قبل رفع ملف الاكسل\", \"#1d262d\");\n        return false;\n      }\n      return true;\n    },\n    readerData: function readerData(rawFile) {\n      var _this$userInfo2,\n        _this4 = this;\n      this.loading = true;\n      this.excelBranchId = this.selectedBranch ? this.selectedBranch.id : (_this$userInfo2 = this.userInfo) === null || _this$userInfo2 === void 0 ? void 0 : _this$userInfo2.branchId;\n      return new Promise(function (resolve) {\n        var reader = new FileReader();\n        reader.onload = function (e) {\n          var data = e.target.result;\n          var workbook = XLSX.read(data, {\n            type: \"array\"\n          });\n          var firstSheetName = workbook.SheetNames[0];\n          var worksheet = workbook.Sheets[firstSheetName];\n          var results = XLSX.utils.sheet_to_json(worksheet);\n          var filterData = results.filter(function (row) {\n            if (Object.keys(row).length > 1) return row;\n          }).map(function (item) {\n            var _this4$selectAccountT, _this4$validateData;\n            var newitem = {\n              accountName: item.accountName ? item.accountName : \"\",\n              accountNo: item.accountNumber ? _this4.addLeadingZeros(item.accountNumber, 14) : \"\",\n              phoneNumber: item.phoneNumber ? _this4.addLeadingZeros(item.phoneNumber, 10) : \"\",\n              accountType: _this4.selectAccountType ? (_this4$selectAccountT = _this4.selectAccountType) === null || _this4$selectAccountT === void 0 ? void 0 : _this4$selectAccountT.value : 0,\n              message: (_this4$validateData = _this4.validateData(item)) !== null && _this4$validateData !== void 0 ? _this4$validateData : null,\n              accountState: 1\n            };\n            return newitem;\n          });\n          _this4.excelData = filterData;\n          _this4.loading = false;\n          resolve();\n        };\n        reader.readAsArrayBuffer(rawFile);\n      });\n    },\n    validateData: function validateData(element) {\n      var _this$userInfo3;\n      var branchNumber = this.selectedBranch ? this.selectedBranch.branchNo : (_this$userInfo3 = this.userInfo) === null || _this$userInfo3 === void 0 ? void 0 : _this$userInfo3.branchNumber;\n      if (element.accountNumber.length < 14) {\n        return \"طول الحساب اقل من 14 رقم\";\n      }\n      if (this.addLeadingZeros(element.accountNumber, 14).substring(0, 3) != branchNumber) {\n        return \" رقم الحساب لا ينتمي للفرع\";\n      }\n      if (!(!element.phoneNumber || this.addLeadingZeros(element.phoneNumber, 10).length === 10)) {\n        return \" خطأ في رقم الهاتف \";\n      }\n      if (element.phoneNumber) {\n        if (!(this.addLeadingZeros(element.phoneNumber, 10).substring(0, 3) === \"091\" || this.addLeadingZeros(element.phoneNumber, 10).substring(0, 3) === \"092\" || this.addLeadingZeros(element.phoneNumber, 10).substring(0, 3) === \"094\")) {\n          return \" خطأ في رقم الهاتف \";\n        }\n      }\n    },\n    addLeadingZeros: function addLeadingZeros(num, totalLength) {\n      return String(num).padStart(totalLength, '0');\n    },\n    handleDragover: function handleDragover(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      e.dataTransfer.dropEffect = \"copy\";\n    },\n    handleClick: function handleClick(e) {\n      var files = e.target.files;\n      var rawFile = files[0];\n      if (!rawFile) return;\n      this.upload(rawFile);\n    },\n    handleUpload: function handleUpload() {\n      this.$refs[\"excel-upload-input\"].click();\n    },\n    closeDialogUploadData: function closeDialogUploadData() {\n      this.dialogUploadData = false;\n      this.clearUploadData();\n      this.clearInput();\n    },\n    clearInput: function clearInput() {\n      this.banks = [];\n      this.regions = [];\n      this.activeBranchs = [];\n      this.selectAccountType = null;\n      this.selectedBank = null;\n      this.selectedBranch = null;\n      this.selectedRegion = null;\n      this.searchRegion = null;\n      this.searchBank = null;\n      this.earchBranch = null;\n    },\n    clearUploadData: function clearUploadData() {\n      this.ClearExcelDataAction();\n      this.errorMessageLabel = \"\";\n      this.$refs[\"excel-upload-input\"].value = \"\";\n    },\n    SaveData: function SaveData() {\n      var _this5 = this;\n      if (this.excelData.length == 0) {\n        this.notify(\"الرجاء اختيار ملف الاكسل \", \"#1d262d\");\n        return;\n      }\n      this.$store.dispatch(\"loading\", true);\n      this.InsertListOfAccountsAction().then(function (res) {\n        //this.$emit(\"refresh-data\");\n        _this5.$store.dispatch(\"loading\", false);\n        _this5.notify(\"\".concat(res), \"#1d262d\");\n        _this5.close();\n      }).catch(function (error) {\n        _this5.notify(\"\".concat(error), \"#1d262d\");\n        _this5.$store.dispatch(\"loading\", false);\n      });\n    },\n    close: function close() {\n      var _this6 = this;\n      this.dialogUploadData = false;\n      this.clearInput();\n      setTimeout(function () {\n        _this6.clearUploadData();\n      }, 300);\n    },\n    notify: function notify(text, color) {\n      this.$store.commit(\"showMessage\", {\n        text: text,\n        color: color\n      });\n    }\n  })\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;AAiGA;AACA;AAEA;AACA;AAEA;IACAA;IACAC;EACA;EAHAC;AAKA;EACAC;EACAC;IACAC;EACA;EACAC;IAAA;MACAC;MACAC;MAEAC;MAEAC;MAEAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;QACAC;QACAC;MACA;MAEAC;QACAC;MACA;MAEAC;QACAC;QACAC;MACA;MACA;;MAEAC;MACAC,qBACA;QAAAC;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA,EACA;MAEAC,uBACA;QAAAF;QAAAC;QAAAE;QAAAC;MAAA,GACA;QAAAJ;QAAAC;QAAAE;QAAAC;MAAA,GACA;QAAAJ;QAAAC;QAAAE;QAAAC;MAAA,GACA;QAAAJ;QAAAC;QAAAE;QAAAC;MAAA;IAEA;EAAA;EAEAC;IACAjC;MACAkC;QACA;QACA;QACA;MACA;;MACAC;IACA;IACAtB;MACA;MACA;MACA;IACA;IACAD;MAAA;MACA;MACA;MACA;MACA;IACA;IAEAE;MAAA;MACA;MACA;MACA;MACA;MACA;IACA;EACA;EAEAsB,0CACAvC;IACAwC;IACAC;EACA;IACA;IACA;IACA;IACAC;MAAA;MACA;QAAA;MAAA;MACA;QACA;MACA;QACA;MACA;IACA;EAAA,EACA;EAEAC;IACAC;MACA;IACA;EAAA,GAEAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;IAEAC;MACA;MACA;QAAA,OACAC;MAAA,EACA;MACA;IACA;IACAC;MACA;IACA;IAGA;IAEAC;MACA;IACA;IACAC;MACA;IACA;IACAC;MAAA;MACA;MACA;MACA;IACA;IAEAC;MAAA;QAAA;MACA;MACA;QACA;QACA,iDACAC;UACA;UACA;UACA;QACA,GACAC;UACA;UACA;QACA;MACA;QACA;QACA;MACA;IACA;IACAC;MAAA;MACA;QACA;QACA,uCACAF;UACA;UACA,kCACA,oDACA;UACA;QACA,GACAC;UACA;UACA;QACA;MACA;QACA;QACA;MACA;IACA;IACAE;MAAA;MACA;QACA;QACA,oDACAH;UACA,0CACA,wDACA;UACA;QACA,GACAC;UACA;UACA;QACA;MACA;QACA;QACA;MACA;IACA;IAEAG;MACA;MACA;IACA;IAEA;IAGAC;MACA;MACA;IACA;IAEAC;MACAC;MACAA;MACA;MAEA;MAEA;QACA;QACA;MACA;MACA;;MAEA;QACA;QACA;MACA;MACA;MACAA;MACAA;IACA;IAEAC;MACA;MACA;QACA;QACA;MACA;MACA;MACA;QACA;MACA;IACA;IAEAC;MAAA;MACA;MAEA;QACA;QACA;MACA;MAEA;QACA;QACA;MACA;MAEA;QACA;QACA;MACA;MACA;IACA;IAEAC;MAAA;QAAA;MACA;MACA;MAEA;QACA;QACAC;UACA;UACA;YAAAC;UAAA;UACA;UACA;UACA;UACA,yBACAC;YACA;UACA,GACAC;YAAA;YACA;cACAC;cACAC;cACAC;cACAC;cACAC;cACAC;YACA;YACA;UACA;UAEA;UACA;UACAC;QACA;QACAV;MACA;IACA;IAEAW;MAAA;MACA;MACA;QACA;MACA;MACA;QACA;MACA;MACA;QACA;MACA;MACA;QACA,MACA,2EACA,2EACA,wEACA;UACA;QACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACAjB;MACAA;MACAA;IACA;IAEAkB;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MAEA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;IACA;IAEAC;MAAA;MACA;QACA;QACA;MACA;MACA;MACA,kCACA9B;QACA;QACA;QACA;QACA;MACA,GACAC;QACA;QACA;MACA;IAEA;IAEA8B;MAAA;MACA;MACA;MACAC;QACA;MACA;IACA;IAEAC;MACA;QAAA5D;QAAA6D;MAAA;IACA;EAAA;AAEA","names":["getterType","mutationType","mapFields","name","props","dlgInsertFileProp","data","dialogUploadData","loading","errorMessageLabel","userInfo","banks","regions","activeBranchs","isLoadingBanks","isLoadingRegion","isLoadingBranch","searchRegion","searchBank","searchBranch","selectedBank","selectedBranch","selectedRegion","filterRegionData","bankId","regionName","filterBankData","bankName","filterBranchData","branchRegionId","NameOrNumber","selectAccountType","accountTypeOptions","text","value","headersDataFromExcel","sortable","align","watch","handler","immediate","computed","excelData","excelBranchId","isValidExcelData","methods","openDialog","mapActions","InsertListOfAccountsAction","ClearExcelDataAction","GetBankStore","GetActiveBankRegions","GetActiveBranchesAction","hasPermassion","crrentUser","isExcel","getUserInfo","onBankChangeLoadRegions","onRegionChangeLoadBranches","getBankRegions","then","catch","getBanks","GetBranches","onBranchChanges","onAccountTypeChanged","handleDrop","e","upload","beforeUpload","readerData","reader","type","filter","map","accountName","accountNo","phoneNumber","accountType","message","accountState","resolve","validateData","addLeadingZeros","handleDragover","handleClick","handleUpload","closeDialogUploadData","clearInput","clearUploadData","SaveData","close","setTimeout","notify","color"],"sourceRoot":"src/views/Account/Components","sources":["uploadExcelComponent.vue"],"sourcesContent":["<template >\r\n  <v-dialog v-model=\"dialogUploadData\" max-width fullscreen scrollable hide-overlay transition=\"dialog-bottom-transition\"\r\n    persistent>\r\n\r\n    <template v-slot:activator=\"{ on }\">\r\n      <template>\r\n        <v-btn color=\"#536DFE\" @click=\"openDialog\" v-on=\"on\" class=\"white--text  mr-2\">\r\n          <v-icon>mdi-file-upload-outline</v-icon>\r\n          <span class=\"mr-2\">رفع ملف اكسل الحسابات</span>\r\n        </v-btn>\r\n      </template>\r\n    </template>\r\n\r\n    <v-card>\r\n      <v-card-title class=\"ma-0 pa-0\">\r\n\r\n      </v-card-title>\r\n\r\n      <v-card-text>\r\n        <v-container>\r\n\r\n          <template>\r\n            <v-row>\r\n              <v-col cols=\"12\" sm=\"6\" v-if=\"hasPermassion(['AdminSystem'])\">\r\n                <v-autocomplete v-model=\"selectedBank\" :items=\"banks\" :loading=\"isLoadingBanks\" single-line dense\r\n                  :search-input.sync=\"searchBank\" item-text=\"name\" item-value=\"bankId\" label=\"اختر المصرف\"\r\n                  placeholder=\"بحث عن المصرف\" return-object no-data-text=\" ابحث عن اسم المصرف\" clearable\r\n                  prepend-icon=\"mdi-bank\" @change=\"onBankChangeLoadRegions\">\r\n                </v-autocomplete>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\" v-if=\"hasPermassion(['AdminSystem', 'AddAccountsToOtherBranches'])\">\r\n                <v-autocomplete v-model=\"selectedRegion\" :items=\"regions\" :loading=\"isLoadingRegion\" single-line dense\r\n                  required :search-input.sync=\"searchRegion\" item-text=\"regionName\" item-value=\"bankRegionId\"\r\n                  label=\"اختر المنطقة\" placeholder=\"بحث عن المنطقة\" return-object no-data-text=\"لايوجد بيانات\" clearable\r\n                  prepend-icon=\"mdi-map-marker\" @change=\"onRegionChangeLoadBranches\">\r\n                </v-autocomplete>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\" v-if=\"hasPermassion(['AdminSystem', 'AddAccountsToOtherBranches'])\">\r\n                <v-autocomplete v-model=\"selectedBranch\" :items=\"activeBranchs\" :loading=\"isLoadingBranch\" single-line\r\n                  dense :search-input.sync=\"searchBranch\" item-text=\"name\" item-value=\"id\" label=\"اختر الفرع\"\r\n                  allow-overflowplaceholder=\"بحث عن الفرع\" return-object no-data-text=\"لايوجد بيانات\" clearable\r\n                  prepend-icon=\"mdi-bank\" @change=\"onBranchChanges\">\r\n                </v-autocomplete>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-select v-model=\"selectAccountType\" :items=\"accountTypeOptions\" item-text=\"text\" item-value=\"value\"\r\n                  dense label=\"نوع الحساب\" placeholder=\"نوع الحساب\" no-data-text=\"لايوجد بيانات\" return-object single-line\r\n                  prepend-icon=\"mdi-bank\" @change=\"onAccountTypeChanged\">\r\n                </v-select>\r\n              </v-col>\r\n            </v-row>\r\n          </template>\r\n        </v-container>\r\n\r\n        <template>\r\n          <div class=\"mt-3\">\r\n            <input ref=\"excel-upload-input\" class=\"excel-upload-input\" type=\"file\" accept=\".xlsx, .xls\"\r\n              @change=\"handleClick\" />\r\n            <div class=\"drop\" @drop=\"handleDrop\" @dragover=\"handleDragover\" @dragenter=\"handleDragover\">\r\n              اسحب وافلت ملف اكسل الحسابات هنا\r\n              <el-button :loading=\"loading\" style=\"margin-left: 16px\" size=\"mini\" type=\"primary\" @click=\"handleUpload\">\r\n                اختر ملف\r\n              </el-button>\r\n            </div>\r\n          </div>\r\n        </template>\r\n\r\n        <template>\r\n          <div class=\"text-center\">\r\n            <v-btn color=\"#E91D62\" outlined @click=\"closeDialogUploadData\" class=\"ma-3\">\r\n              <v-icon>mdi-close</v-icon> <span class=\"mr-2\">اغلاق</span>\r\n            </v-btn>\r\n            <v-btn color=\"#536DFE\" outlined @click=\"clearUploadData\" class=\"ma-3\" v-if=\"!isValidExcelData\">\r\n              <v-icon>clear</v-icon> <span class=\"mr-2\">تفريغ البيانات </span>\r\n            </v-btn>\r\n            <v-btn color=\"#536DFE\" @click=\"SaveData\" class=\"white--text  mr-2\" v-if=\"isValidExcelData\">\r\n              حفظ الحسابات</v-btn>\r\n          </div>\r\n\r\n          <div class=\"text-center\">\r\n            <label color=\"#536DFE\"> {{ this.errorMessageLabel }} </label>\r\n          </div>\r\n\r\n          <v-data-table :headers=\"headersDataFromExcel\" :items=\"excelData\" class=\"elevation-5 ma-3\">\r\n          </v-data-table>\r\n\r\n        </template>\r\n      </v-card-text>\r\n\r\n    </v-card>\r\n  </v-dialog>\r\n</template>\r\n  \r\n<script>\r\n// import XLSX from \"xlsx\";\r\nimport * as XLSX from 'xlsx'\r\n\r\nimport { createHelpers } from \"vuex-map-fields\";\r\nimport { mapActions } from \"vuex\";\r\n\r\nconst { mapFields } = createHelpers({\r\n  getterType: \"getDataFields\",\r\n  mutationType: \"updateDataField\",\r\n});\r\n\r\nexport default {\r\n  name: \"Add-accounts-File\",\r\n  props: {\r\n    dlgInsertFileProp: {},\r\n  },\r\n  data: () => ({\r\n    dialogUploadData: false,\r\n    loading: false,\r\n\r\n    errorMessageLabel: \"\",\r\n\r\n    userInfo: null,\r\n\r\n    banks: [],\r\n    regions: [],\r\n    activeBranchs: [],\r\n    isLoadingBanks: false,\r\n    isLoadingRegion: false,\r\n    isLoadingBranch: false,\r\n    searchRegion: null,\r\n    searchBank: null,\r\n    searchBranch: null,\r\n    selectedBank: null,\r\n    selectedBranch: null,\r\n    selectedRegion: null,\r\n    filterRegionData: {\r\n      bankId: null,\r\n      regionName: null,\r\n    },\r\n\r\n    filterBankData: {\r\n      bankName: null,\r\n    },\r\n\r\n    filterBranchData: {\r\n      branchRegionId: null,\r\n      NameOrNumber: null,\r\n    },\r\n    //\r\n\r\n    selectAccountType: null,\r\n    accountTypeOptions: [\r\n      { text: \"افراد\", value: 1 },\r\n      { text: \"شركات\", value: 2 },\r\n    ],\r\n\r\n    headersDataFromExcel: [\r\n      { text: \"اسم الحساب\", value: \"accountName\", sortable: true, align: \"right\", },\r\n      { text: \"رقم الحساب\", value: \"accountNo\", sortable: true, align: \"center\" },\r\n      { text: \"رقم الهاتف\", value: \"phoneNumber\", sortable: false, align: \"center\" },\r\n      { text: \"\", value: \"message\", sortable: true, align: \"center\", },\r\n    ],\r\n  }),\r\n\r\n  watch: {\r\n    dlgInsertFileProp: {\r\n      handler(data) {\r\n        this.dialogUploadData = data;\r\n        this.getUserInfo();\r\n        // console.log(this.userInfo)\r\n      },\r\n      immediate: true,\r\n    },\r\n    searchBank(val) {\r\n      if (this.isLoadingBanks) return;\r\n      this.filterBankData.bankName = val;\r\n      this.getBanks();\r\n    },\r\n    searchRegion(val) {\r\n      if (this.isLoadingRegion) return;\r\n      if (val === this.selectedRegion?.regionName) return;\r\n      this.filterRegionData.regionName = val;\r\n      this.getBankRegions();\r\n    },\r\n\r\n    searchBranch(val) {\r\n      if (this.isLoadingBranch) return;\r\n      if (val === this.selectedBranch?.name) return;\r\n      this.filterBranchData.branchRegionId = this.selectedRegion?.bankRegionId;\r\n      this.filterBranchData.NameOrNumber = val;\r\n      this.GetBranches();\r\n    },\r\n  },\r\n\r\n  computed: {\r\n    ...mapFields(\"excelAccountsStore\", {\r\n      excelData: \"excelData\",\r\n      excelBranchId: \"excelBranchId\",\r\n    }),\r\n    // isValidExcelData() {\r\n    //   return this.excelData.some(s => !s?.message)\r\n    // },\r\n    isValidExcelData() {\r\n      let result = this.excelData.find(s => s?.message != null) ?? null\r\n      if(result){\r\n        return false;\r\n      }else{\r\n        return true;\r\n      }\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    openDialog() {\r\n      this.dialogUploadData = true;\r\n    },\r\n\r\n    ...mapActions({\r\n      InsertListOfAccountsAction: \"excelAccountsStore/InsertListOfAccounts\",\r\n      ClearExcelDataAction: \"excelAccountsStore/ClearExcelData\",\r\n      GetBankStore: \"bankStore/GetBanks\",\r\n      GetActiveBankRegions: \"bankRegionStore/GetActiveBankRegions\",\r\n      GetActiveBranchesAction: \"branchStore/GetActiveBranchs\",\r\n    }),\r\n\r\n    hasPermassion(crrentUser) {\r\n      this.userPermasstion = this.$store.getters[\"auth/getRole\"];\r\n      var result = this.userPermasstion.some((item) =>\r\n        crrentUser.includes(item)\r\n      );\r\n      return result;\r\n    },\r\n    isExcel(file) {\r\n      return /\\.(xlsx|xls|csv)$/.test(file.name);\r\n    },\r\n\r\n\r\n    // Bank /region /branch dropdown list functions\r\n\r\n    getUserInfo() {\r\n      this.userInfo = this.$store.getters[\"auth/getInfo\"];\r\n    },\r\n    onBankChangeLoadRegions() {\r\n      this.getBankRegions();\r\n    },\r\n    onRegionChangeLoadBranches() {\r\n      this.clearUploadData();\r\n      this.filterBranchData.branchRegionId = this.selectedRegion?.bankRegionId;\r\n      this.GetBranches();\r\n    },\r\n\r\n    getBankRegions() {\r\n      this.filterRegionData.bankId = this.selectedBank?.bankId;\r\n      try {\r\n        this.isLoadingRegion = true;\r\n        this.GetActiveBankRegions(this.filterRegionData)\r\n          .then(() => {\r\n            this.regions = [];\r\n            this.regions = [...this.$store.getters[\"bankRegionStore/GET_ACTIVE_BANKREGIONS\"],];\r\n            this.isLoadingRegion = false;\r\n          })\r\n          .catch(() => {\r\n            //this.notify(`${error}`, \"#1d262d\");\r\n            this.isLoadingRegion = false;\r\n          });\r\n      } catch (error) {\r\n        this.isLoadingRegion = false;\r\n        //this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n    getBanks() {\r\n      try {\r\n        this.isLoading = true;\r\n        this.GetBankStore(this.filterBankData)\r\n          .then(() => {\r\n            this.banks = [];\r\n            this.banks = [\r\n              ...this.$store.getters[\"bankStore/GET_ACTIVE_BANKS\"],\r\n            ];\r\n            this.isLoading = false;\r\n          })\r\n          .catch((error) => {\r\n            this.notify(`${error}`, \"#1d262d\");\r\n            this.isLoading = false;\r\n          });\r\n      } catch (error) {\r\n        this.isLoading = false;\r\n        this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n    GetBranches() {\r\n      try {\r\n        //this.isLoadingBranch = true;\r\n        this.GetActiveBranchesAction(this.filterBranchData)\r\n          .then(() => {\r\n            this.activeBranchs = [\r\n              ...this.$store.getters[\"branchStore/GET_ACTIVE_BRANCHS\"],\r\n            ];\r\n            this.isLoadingBranch = false;\r\n          })\r\n          .catch(() => {\r\n            //this.notify(`${error}`, \"#1d262d\");\r\n            this.isLoadingBranch = false;\r\n          });\r\n      } catch (error) {\r\n        //this.isLoadingBranch = false;\r\n        this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n\r\n    onBranchChanges(item) {\r\n      this.clearUploadData();\r\n      this.selectedBranchNum = item?.branchNo;\r\n    },\r\n\r\n    //end Bank /region /branch dropdown list functions\r\n\r\n\r\n    onAccountTypeChanged() {\r\n      this.ClearExcelDataAction();\r\n      this.errorMessageLabel = \"\";\r\n    },\r\n\r\n    handleDrop(e) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      if (this.loading) return;\r\n\r\n      const files = e.dataTransfer.files;\r\n\r\n      if (files.length !== 1) {\r\n        this.notify(\"قم باختيار ملف واحد فقط\", \"#1d262d\");\r\n        return;\r\n      }\r\n      const rawFile = files[0]; // only use files[0]\r\n\r\n      if (!this.isExcel(rawFile)) {\r\n        this.notify(\"يجب رفع ملف اكسل فقط\", \"#1d262d\");\r\n        return false;\r\n      }\r\n      this.upload(rawFile);\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n    },\r\n\r\n    upload(rawFile) {\r\n      this.$refs[\"excel-upload-input\"].value = null; // fix can't select the same excel\r\n      if (!this.beforeUpload) {\r\n        this.readerData(rawFile);\r\n        return;\r\n      }\r\n      const before = this.beforeUpload(rawFile);\r\n      if (before) {\r\n        this.readerData(rawFile);\r\n      }\r\n    },\r\n\r\n    beforeUpload(file) {\r\n      const isLessThan10M = file.size / 1024 / 1024 < 10;\r\n\r\n      if (isLessThan10M == false) {\r\n        this.notify(\"حجم ملف الاكسل يجب ان يكون اقل من 10 ميجابايت\", \"#1d262d\");\r\n        return false;\r\n      }\r\n\r\n      if (!(this.selectAccountType?.value === 1 || this.selectAccountType?.value === 2)) {\r\n        this.notify(\"الرجاء اختيار نوع الحسابات أفراد او شركات\", \"#1d262d\");\r\n        return false;\r\n      }\r\n\r\n      if (this.userInfo?.branchId === null && this.selectedBranch === null) {\r\n        this.notify(\"الرجاء اختيار الفرع قبل رفع ملف الاكسل\", \"#1d262d\");\r\n        return false;\r\n      }\r\n      return true;\r\n    },\r\n\r\n    readerData(rawFile) {\r\n      this.loading = true;\r\n      this.excelBranchId = this.selectedBranch ? this.selectedBranch.id : this.userInfo?.branchId;\r\n\r\n      return new Promise((resolve) => {\r\n        const reader = new FileReader();\r\n        reader.onload = (e) => {\r\n          const data = e.target.result;\r\n          const workbook = XLSX.read(data, { type: \"array\" });\r\n          const firstSheetName = workbook.SheetNames[0];\r\n          const worksheet = workbook.Sheets[firstSheetName];\r\n          const results = XLSX.utils.sheet_to_json(worksheet);\r\n          let filterData = results\r\n            .filter((row) => {\r\n              if (Object.keys(row).length > 1) return row;\r\n            })\r\n            .map((item) => {\r\n              var newitem = {\r\n                accountName: item.accountName ? item.accountName : \"\",\r\n                accountNo: item.accountNumber ? this.addLeadingZeros(item.accountNumber, 14) : \"\",\r\n                phoneNumber: item.phoneNumber ? this.addLeadingZeros(item.phoneNumber, 10) : \"\",\r\n                accountType: this.selectAccountType ? this.selectAccountType?.value : 0,\r\n                message: this.validateData(item) ?? null,\r\n                accountState: 1\r\n              };\r\n              return newitem;\r\n            });\r\n\r\n          this.excelData = filterData;\r\n          this.loading = false;\r\n          resolve();\r\n        };\r\n        reader.readAsArrayBuffer(rawFile);\r\n      });\r\n    },\r\n\r\n    validateData(element) {\r\n      let branchNumber = this.selectedBranch ? this.selectedBranch.branchNo : this.userInfo?.branchNumber;\r\n      if (element.accountNumber.length < 14) {\r\n        return \"طول الحساب اقل من 14 رقم\"\r\n      }\r\n      if (this.addLeadingZeros(element.accountNumber, 14).substring(0, 3) != branchNumber) {\r\n        return \" رقم الحساب لا ينتمي للفرع\"\r\n      }\r\n      if (!(!element.phoneNumber || this.addLeadingZeros(element.phoneNumber, 10).length === 10)) {\r\n        return \" خطأ في رقم الهاتف \"\r\n      }\r\n      if (element.phoneNumber) {\r\n        if (!(\r\n          this.addLeadingZeros(element.phoneNumber, 10).substring(0, 3) === \"091\" ||\r\n          this.addLeadingZeros(element.phoneNumber, 10).substring(0, 3) === \"092\" ||\r\n          this.addLeadingZeros(element.phoneNumber, 10).substring(0, 3) === \"094\"\r\n        )) {\r\n          return \" خطأ في رقم الهاتف \"\r\n        }\r\n      }\r\n    },\r\n\r\n    addLeadingZeros(num, totalLength) {\r\n      return String(num).padStart(totalLength, '0');\r\n    },\r\n\r\n    handleDragover(e) {\r\n      e.stopPropagation();\r\n      e.preventDefault();\r\n      e.dataTransfer.dropEffect = \"copy\";\r\n    },\r\n\r\n    handleClick(e) {\r\n      const files = e.target.files;\r\n      const rawFile = files[0];\r\n      if (!rawFile) return;\r\n      this.upload(rawFile);\r\n    },\r\n\r\n    handleUpload() {\r\n      this.$refs[\"excel-upload-input\"].click();\r\n    },\r\n\r\n    closeDialogUploadData() {\r\n      this.dialogUploadData = false;\r\n      this.clearUploadData();\r\n      this.clearInput();\r\n    },\r\n\r\n    clearInput() {\r\n      this.banks = [];\r\n      this.regions = [];\r\n      this.activeBranchs = [];\r\n      this.selectAccountType = null;\r\n\r\n      this.selectedBank = null;\r\n      this.selectedBranch = null;\r\n      this.selectedRegion = null;\r\n\r\n      this.searchRegion = null;\r\n      this.searchBank = null;\r\n      this.earchBranch = null;\r\n    },\r\n\r\n    clearUploadData() {\r\n      this.ClearExcelDataAction();\r\n      this.errorMessageLabel = \"\";\r\n      this.$refs[\"excel-upload-input\"].value = \"\";\r\n    },\r\n\r\n    SaveData() {\r\n      if (this.excelData.length == 0) {\r\n        this.notify(\"الرجاء اختيار ملف الاكسل \", \"#1d262d\");\r\n        return;\r\n      }\r\n      this.$store.dispatch(\"loading\", true);\r\n      this.InsertListOfAccountsAction()\r\n        .then((res) => {\r\n          //this.$emit(\"refresh-data\");\r\n          this.$store.dispatch(\"loading\", false);\r\n          this.notify(`${res}`, \"#1d262d\");\r\n          this.close();\r\n        })\r\n        .catch((error) => {\r\n          this.notify(`${error}`, \"#1d262d\");\r\n          this.$store.dispatch(\"loading\", false);\r\n        });\r\n\r\n    },\r\n\r\n    close() {\r\n      this.dialogUploadData = false;\r\n      this.clearInput();\r\n      setTimeout(() => {\r\n        this.clearUploadData();\r\n      }, 300);\r\n    },\r\n\r\n    notify(text, color) {\r\n      this.$store.commit(\"showMessage\", { text: text, color: color });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.excel-upload-input {\r\n  display: none;\r\n  z-index: -9999;\r\n}\r\n\r\n.drop {\r\n  border: 2px dashed #bbb;\r\n  width: 600px;\r\n  height: 150px;\r\n  line-height: 150px;\r\n  margin: 0 auto;\r\n  font-size: 24px;\r\n  border-radius: 5px;\r\n  text-align: center;\r\n  color: #bbb;\r\n  position: relative;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}