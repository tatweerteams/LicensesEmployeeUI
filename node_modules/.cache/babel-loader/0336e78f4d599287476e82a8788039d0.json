{"ast":null,"code":"import \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nexport var validationInput = {\n  isEmpty: function isEmpty(v) {\n    return v && !!(v !== null && v !== void 0 && v.trim()) || \"الرجاء إدخال هذا الحقل\";\n  },\n  numberOnly: function numberOnly(v) {\n    return /^[0-9]*$/.test(v) || \"الرجاء ادخال أرقام فقط\";\n  },\n  numberNotZero: function numberNotZero(v) {\n    return !isNaN(parseInt(v)) && v >= 1 || \"يجب إدخال بطريقة صحيحة\";\n  },\n  currectInput: function currectInput(v) {\n    return !!v && !(v !== null && v !== void 0 && v.includes(\"ـ\")) || \"يجب ادخال بطريقة الصحيحة\";\n  },\n  isArabic: function isArabic(v) {\n    return /^[\\u0621-\\u064A ]*$/.test(v) || \"الرجاء إدخال باللغة العربية\";\n  },\n  numberAndArabic: function numberAndArabic(v) {\n    return /^[\\u0621-\\u064A0-9\\s]*$/.test(v) || \"الرجاء إدخال بطريقة الصحيحة\";\n  },\n  phoneLength: function phoneLength(v) {\n    return (v === null || v === void 0 ? void 0 : v.length) == 10 || \"رقم الهاتف يجب ان يتكون من 10 أرقام\";\n  },\n  phoneNumber: function phoneNumber(v) {\n    return (v === null || v === void 0 ? void 0 : v.startsWith(\"092\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"091\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"094\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"095\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"021\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"023\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"025\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"024\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"053\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"051\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"054\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"057\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"064\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"061\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"067\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"069\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"063\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"062\", 0)) || (v === null || v === void 0 ? void 0 : v.startsWith(\"071\", 0)) || \"يجب إدخال رقم الهاتف بطريقة الصحيحة \";\n  },\n  phoneNumberNotZero: function phoneNumberNotZero(v) {\n    return !isNaN(parseInt(v)) && parseInt(v === null || v === void 0 ? void 0 : v.substring(3, v === null || v === void 0 ? void 0 : v.length)) >= 1 || \"يجب إدخال رقم الهاتف بطريقة الصحيحة \";\n  },\n  selectedValidation: function selectedValidation(v) {\n    return !!v || \"الرجاء إختيار هذا الحقل\";\n  },\n  selectedListValidation: function selectedListValidation(v) {\n    return !!v.length > 0 || \"الرجاء إختيار هذا الحقل\";\n  },\n  minLength: function minLength(v) {\n    return v && v.trim().length >= 3 || \"الرجاء إدخال 3 خانات\";\n  },\n  minLengthAccount: function minLengthAccount(v) {\n    return v && (v.trim().length == 14 || v.trim().length == 15) || \"الرجاء إدخال 14 او 15 خانة\";\n  },\n  numberAndEng: function numberAndEng(v) {\n    return /^[a-zA-z0-9]*$/.test(v) || \"يجب ان يتكون من أرقام وحروف لاتينية فقط\";\n  },\n  englishOnly: function englishOnly(v) {\n    return /^[a-zA-Z\\s]*$/.test(v) || \"يجب ان يتكون من حروف لاتينية فقط\";\n  },\n  maxNumberCheckBook: function maxNumberCheckBook(v) {\n    return !isNaN(parseInt(v)) && v <= 99 || \"يجب ان تكون الكمية الدفاتر أقل من 99 دفتر \";\n  },\n  numEngAr: function numEngAr(v) {\n    return /^[a-zA-z0-9-\\u0621-\\u064A]*$/.test(v) || \"يجب ان لا يتحوي علي رموز \";\n  }\n};","map":{"version":3,"names":["validationInput","isEmpty","v","trim","numberOnly","test","numberNotZero","isNaN","parseInt","currectInput","includes","isArabic","numberAndArabic","phoneLength","length","phoneNumber","startsWith","phoneNumberNotZero","substring","selectedValidation","selectedListValidation","minLength","minLengthAccount","numberAndEng","englishOnly","maxNumberCheckBook","numEngAr"],"sources":["D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/src/models/validationInput.js"],"sourcesContent":["export const validationInput = {\r\n  isEmpty: (v) => (v && !!v?.trim()) || \"الرجاء إدخال هذا الحقل\",\r\n  numberOnly: (v) => /^[0-9]*$/.test(v) || \"الرجاء ادخال أرقام فقط\",\r\n  numberNotZero: (v) =>\r\n    (!isNaN(parseInt(v)) && v >= 1) || \"يجب إدخال بطريقة صحيحة\",\r\n  currectInput: (v) => (!!v && !v?.includes(\"ـ\")) || \"يجب ادخال بطريقة الصحيحة\",\r\n  isArabic: (v) =>\r\n    /^[\\u0621-\\u064A ]*$/.test(v) || \"الرجاء إدخال باللغة العربية\",\r\n  numberAndArabic: (v) =>\r\n    /^[\\u0621-\\u064A0-9\\s]*$/.test(v) || \"الرجاء إدخال بطريقة الصحيحة\",\r\n  phoneLength: (v) => v?.length == 10 || \"رقم الهاتف يجب ان يتكون من 10 أرقام\",\r\n  phoneNumber: (v) =>\r\n    v?.startsWith(\"092\", 0) ||\r\n    v?.startsWith(\"091\", 0) ||\r\n    v?.startsWith(\"094\", 0) ||\r\n    v?.startsWith(\"095\", 0) ||\r\n    v?.startsWith(\"021\", 0) ||\r\n    v?.startsWith(\"023\", 0) ||\r\n    v?.startsWith(\"025\", 0) ||\r\n    v?.startsWith(\"024\", 0) ||\r\n    v?.startsWith(\"053\", 0) ||\r\n    v?.startsWith(\"051\", 0) ||\r\n    v?.startsWith(\"054\", 0) ||\r\n    v?.startsWith(\"057\", 0) ||\r\n    v?.startsWith(\"064\", 0) ||\r\n    v?.startsWith(\"061\", 0) ||\r\n    v?.startsWith(\"067\", 0) ||\r\n    v?.startsWith(\"069\", 0) ||\r\n    v?.startsWith(\"063\", 0) ||\r\n    v?.startsWith(\"062\", 0) ||\r\n    v?.startsWith(\"071\", 0) ||\r\n    \"يجب إدخال رقم الهاتف بطريقة الصحيحة \",\r\n\r\n  phoneNumberNotZero: (v) =>\r\n    (!isNaN(parseInt(v)) && parseInt(v?.substring(3, v?.length)) >= 1) ||\r\n    \"يجب إدخال رقم الهاتف بطريقة الصحيحة \",\r\n\r\n  selectedValidation: (v) => !!v || \"الرجاء إختيار هذا الحقل\",\r\n  selectedListValidation: (v) => !!v.length > 0 || \"الرجاء إختيار هذا الحقل\",\r\n  minLength: (v) => (v && v.trim().length >= 3) || \"الرجاء إدخال 3 خانات\",\r\n\r\n  minLengthAccount: (v) =>\r\n    (v && (v.trim().length == 14 || v.trim().length == 15)) ||\r\n    \"الرجاء إدخال 14 او 15 خانة\",\r\n\r\n  numberAndEng: (v) =>\r\n    /^[a-zA-z0-9]*$/.test(v) || \"يجب ان يتكون من أرقام وحروف لاتينية فقط\",\r\n\r\n  englishOnly: (v) =>\r\n    /^[a-zA-Z\\s]*$/.test(v) || \"يجب ان يتكون من حروف لاتينية فقط\",\r\n\r\n  maxNumberCheckBook: (v) =>\r\n    (!isNaN(parseInt(v)) && v <= 99) ||\r\n    \"يجب ان تكون الكمية الدفاتر أقل من 99 دفتر \",\r\n    \r\n  numEngAr: (v) =>\r\n    /^[a-zA-z0-9-\\u0621-\\u064A]*$/.test(v) || \"يجب ان لا يتحوي علي رموز \",\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}