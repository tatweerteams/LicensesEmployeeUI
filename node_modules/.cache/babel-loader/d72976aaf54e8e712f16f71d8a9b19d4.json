{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport { getRegions, insertRegion, updateRegion, deleteRegion, getRegionUnSelectedBank } from \"../Apis/index.js\";\nimport { createHelpers } from \"vuex-map-fields\";\nvar _createHelpers = createHelpers({\n    getterType: \"getDataFields\",\n    mutationType: \"updateDataField\"\n  }),\n  getDataFields = _createHelpers.getDataFields,\n  updateDataField = _createHelpers.updateDataField;\nexport default {\n  namespaced: true,\n  state: {\n    regions: [],\n    regionUnSelectBank: [],\n    editedItem: {\n      regionName: null,\n      regionNumber: null,\n      regionId: null\n    },\n    defaultItem: {\n      regionName: null,\n      regionNumber: null,\n      regionId: null\n    }\n  },\n  getters: {\n    getDataFields: getDataFields\n  },\n  mutations: {\n    updateDataField: updateDataField,\n    SET_DATA_REGIONS: function SET_DATA_REGIONS(state, regions) {\n      state.regions = regions;\n    },\n    SET_DATA_REGION_UN_SELECTED: function SET_DATA_REGION_UN_SELECTED(state, regions) {\n      state.regionUnSelectBank = regions;\n    },\n    RESET_DATA: function RESET_DATA(state) {\n      state.editedItem = Object.assign({}, state.defaultItem);\n    },\n    SET_DATA_REGION: function SET_DATA_REGION(state, itemRegion) {\n      state.editedItem = Object.assign({}, itemRegion);\n    }\n  },\n  actions: {\n    ClearDataItem: function ClearDataItem(_ref) {\n      var commit = _ref.commit;\n      commit(\"RESET_DATA\");\n    },\n    SetDataUpdate: function SetDataUpdate(_ref2, itemRegion) {\n      var commit = _ref2.commit;\n      commit(\"SET_DATA_REGION\", itemRegion);\n    },\n    GetRegions: function GetRegions(_ref3, filter) {\n      var commit = _ref3.commit;\n      return new Promise(function (resolve, reject) {\n        getRegions(filter).then(function (response) {\n          commit(\"SET_DATA_REGIONS\", response.result);\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    GetRegionsUnSelected: function GetRegionsUnSelected(_ref4, filter) {\n      var commit = _ref4.commit;\n      return new Promise(function (resolve, reject) {\n        getRegionUnSelectedBank(filter).then(function (response) {\n          commit(\"SET_DATA_REGION_UN_SELECTED\", response.result);\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    InsertRegion: function InsertRegion(_ref5) {\n      var commit = _ref5.commit,\n        state = _ref5.state;\n      var data = {\n        name: state.editedItem.regionName,\n        regionNo: state.editedItem.regionNumber\n      };\n      return new Promise(function (resolve, reject) {\n        insertRegion(data).then(function (response) {\n          // commit(\"RESET_DATA\");\n          alert(\"insertRegion\");\n          resolve(response.messages[0]);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    UpdateRegion: function UpdateRegion(_ref6) {\n      var commit = _ref6.commit,\n        state = _ref6.state;\n      var data = {\n        name: state.editedItem.regionName,\n        regionNo: state.editedItem.regionNumber,\n        regionId: state.editedItem.regionId\n      };\n      return new Promise(function (resolve, reject) {\n        updateRegion(data).then(function (response) {\n          commit(\"RESET_DATA\");\n          resolve(response.messages[0]);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    },\n    DeleteRegion: function DeleteRegion(_ref7, regionId) {\n      var commit = _ref7.commit;\n      var param = {\n        regionId: regionId\n      };\n      return new Promise(function (resolve, reject) {\n        deleteRegion(param).then(function (response) {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["getRegions","insertRegion","updateRegion","deleteRegion","getRegionUnSelectedBank","createHelpers","getterType","mutationType","getDataFields","updateDataField","namespaced","state","regions","regionUnSelectBank","editedItem","regionName","regionNumber","regionId","defaultItem","getters","mutations","SET_DATA_REGIONS","SET_DATA_REGION_UN_SELECTED","RESET_DATA","Object","assign","SET_DATA_REGION","itemRegion","actions","ClearDataItem","commit","SetDataUpdate","GetRegions","filter","Promise","resolve","reject","then","response","result","catch","error","GetRegionsUnSelected","InsertRegion","data","name","regionNo","alert","messages","UpdateRegion","DeleteRegion","param","console","log"],"sources":["D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/src/views/Region/Stores/index.js"],"sourcesContent":["import {\r\n  getRegions,\r\n  insertRegion,\r\n  updateRegion,\r\n  deleteRegion,\r\n  getRegionUnSelectedBank,\r\n} from \"../Apis/index.js\";\r\n\r\nimport { createHelpers } from \"vuex-map-fields\";\r\nconst { getDataFields, updateDataField } = createHelpers({\r\n  getterType: \"getDataFields\",\r\n  mutationType: \"updateDataField\",\r\n});\r\nexport default {\r\n  namespaced: true,\r\n  state: {\r\n    regions: [],\r\n    regionUnSelectBank: [],\r\n    editedItem: {\r\n      regionName: null,\r\n      regionNumber: null,\r\n      regionId: null,\r\n    },\r\n    defaultItem: {\r\n      regionName: null,\r\n      regionNumber: null,\r\n      regionId: null,\r\n    },\r\n  },\r\n\r\n  getters: {\r\n    getDataFields,\r\n  },\r\n\r\n  mutations: {\r\n    updateDataField,\r\n\r\n    SET_DATA_REGIONS(state, regions) {\r\n      state.regions = regions;\r\n    },\r\n    SET_DATA_REGION_UN_SELECTED(state, regions) {\r\n      state.regionUnSelectBank = regions;\r\n    },\r\n    RESET_DATA(state) {\r\n      state.editedItem = Object.assign({}, state.defaultItem);\r\n    },\r\n    SET_DATA_REGION(state, itemRegion) {\r\n      state.editedItem = Object.assign({}, itemRegion);\r\n    },\r\n  },\r\n\r\n  actions: {\r\n    ClearDataItem({ commit }) {\r\n      commit(\"RESET_DATA\");\r\n    },\r\n\r\n    SetDataUpdate({ commit }, itemRegion) {\r\n      commit(\"SET_DATA_REGION\", itemRegion);\r\n    },\r\n\r\n    GetRegions({ commit }, filter) {\r\n      return new Promise((resolve, reject) => {\r\n        getRegions(filter)\r\n          .then((response) => {\r\n            commit(\"SET_DATA_REGIONS\", response.result);\r\n            resolve(response);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n    GetRegionsUnSelected({ commit }, filter) {\r\n      return new Promise((resolve, reject) => {\r\n        getRegionUnSelectedBank(filter)\r\n          .then((response) => {\r\n            commit(\"SET_DATA_REGION_UN_SELECTED\", response.result);\r\n            resolve(response);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n    InsertRegion({ commit, state }) {\r\n      const data = {\r\n        name: state.editedItem.regionName,\r\n        regionNo: state.editedItem.regionNumber,\r\n      };\r\n\r\n      return new Promise((resolve, reject) => {\r\n        insertRegion(data)\r\n          .then((response) => {\r\n            // commit(\"RESET_DATA\");\r\n            alert(\"insertRegion\")\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n    UpdateRegion({ commit, state }) {\r\n      const data = {\r\n        name: state.editedItem.regionName,\r\n        regionNo: state.editedItem.regionNumber,\r\n        regionId: state.editedItem.regionId,\r\n      };\r\n\r\n      return new Promise((resolve, reject) => {\r\n        updateRegion(data)\r\n          .then((response) => {\r\n            commit(\"RESET_DATA\");\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n\r\n    DeleteRegion({ commit }, regionId) {\r\n      const param = {\r\n        regionId: regionId,\r\n      };\r\n      return new Promise((resolve, reject) => {\r\n        deleteRegion(param)\r\n          .then((response) => {\r\n            console.log(commit);\r\n            resolve(response.messages[0]);\r\n          })\r\n          .catch((error) => {\r\n            reject(error);\r\n          });\r\n      });\r\n    },\r\n  },\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}