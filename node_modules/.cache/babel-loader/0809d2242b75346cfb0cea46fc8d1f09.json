{"ast":null,"code":"import { getAccounts, insertAccount, updateAccount, deleteAccount, activateAccount } from \"../Apis/index.js\";\nimport { createHelpers } from \"vuex-map-fields\";\nconst {\n  getDataFields,\n  updateDataField\n} = createHelpers({\n  getterType: \"getDataFields\",\n  mutationType: \"updateDataField\"\n});\nexport default {\n  namespaced: true,\n  state: {\n    grids: [],\n    activeBranchs: [],\n    pageCount: 0,\n    editedItem: {\n      id: null,\n      accountName: null,\n      accountNo: null,\n      branchId: null,\n      accountType: null,\n      accountState: null,\n      phoneNumber: null,\n      inputType: null\n    },\n    defaultItem: {\n      id: null,\n      accountName: null,\n      accountNo: null,\n      branchId: null,\n      accountType: null,\n      accountState: null,\n      phoneNumber: null,\n      inputType: null\n    }\n  },\n  getters: {\n    getDataFields\n  },\n  mutations: {\n    updateDataField,\n    SET_DATA_ACCOUNTS(state, items) {\n      state.grids = items;\n    },\n    SET_DATA_ACTIVE_ACCOUNTS(state, items) {\n      state.activeBranchs = items;\n    },\n    SET_PAGE_COUNT(state, pageCount) {\n      state.pageCount = pageCount;\n    },\n    RESET_DATA(state) {\n      state.editedItem = Object.assign({}, state.defaultItem);\n    },\n    SET_ITEM_ACCOUNTS(state, item) {\n      state.editedItem.id = item.id;\n      state.editedItem.accountName = item.accountName;\n      state.editedItem.accountNo = item.accountNo;\n      state.editedItem.branchId = item.branchId;\n      state.editedItem.accountType = item.accountTypeValue;\n      state.editedItem.accountState = item.accountState;\n      state.editedItem.phoneNumber = item.phoneNumber;\n    }\n  },\n  actions: {\n    ClearDataItem({\n      commit\n    }) {\n      commit(\"RESET_DATA\");\n    },\n    InsertAccount({\n      commit,\n      state\n    }) {\n      return new Promise((resolve, reject) => {\n        insertAccount(state.editedItem).then(response => {\n          commit(\"RESET_DATA\");\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    UpdateAccount({\n      commit,\n      state\n    }) {\n      let updateModel = {\n        Id: state.editedItem.id,\n        AccountName: state.editedItem.accountName,\n        AccountNo: state.editedItem.accountNo,\n        BranchId: state.editedItem.branchId,\n        AccountType: state.editedItem.accountType,\n        PhoneNumber: state.editedItem.phoneNumber\n      };\n      return new Promise((resolve, reject) => {\n        updateAccount(updateModel).then(response => {\n          commit(\"RESET_DATA\");\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    DeleteAccount({\n      commit\n    }, item) {\n      const param = {\n        id: item.id\n      };\n      return new Promise((resolve, reject) => {\n        deleteAccount(param).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    ActivateAccount({\n      commit\n    }, item) {\n      const param = {\n        id: item.id,\n        accountState: item.accountStateValue\n      };\n      return new Promise((resolve, reject) => {\n        activateAccount(param).then(response => {\n          console.log(commit);\n          resolve(response.messages[0]);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    },\n    SetDataUpdate({\n      commit\n    }, item) {\n      commit(\"SET_ITEM_ACCOUNTS\", item);\n    },\n    GetAccounts({\n      commit\n    }, filter) {\n      return new Promise((resolve, reject) => {\n        getAccounts(filter).then(response => {\n          commit(\"SET_DATA_ACCOUNTS\", response.result.data);\n          commit(\"SET_PAGE_COUNT\", response.result.pageCount);\n          resolve(response);\n        }).catch(error => {\n          reject(error);\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["getAccounts","insertAccount","updateAccount","deleteAccount","activateAccount","createHelpers","getDataFields","updateDataField","getterType","mutationType","namespaced","state","grids","activeBranchs","pageCount","editedItem","id","accountName","accountNo","branchId","accountType","accountState","phoneNumber","inputType","defaultItem","getters","mutations","SET_DATA_ACCOUNTS","items","SET_DATA_ACTIVE_ACCOUNTS","SET_PAGE_COUNT","RESET_DATA","Object","assign","SET_ITEM_ACCOUNTS","item","accountTypeValue","actions","ClearDataItem","commit","InsertAccount","Promise","resolve","reject","then","response","messages","catch","error","UpdateAccount","updateModel","Id","AccountName","AccountNo","BranchId","AccountType","PhoneNumber","DeleteAccount","param","console","log","ActivateAccount","accountStateValue","SetDataUpdate","GetAccounts","filter","result","data"],"sources":["D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/src/views/Account/Stores/index.js"],"sourcesContent":["import {\r\n    getAccounts,\r\n    insertAccount,\r\n    updateAccount,\r\n    deleteAccount,\r\n    activateAccount,\r\n  } from \"../Apis/index.js\";\r\n\r\nimport { createHelpers } from \"vuex-map-fields\";\r\nconst { getDataFields, updateDataField } = createHelpers({\r\n  getterType: \"getDataFields\",\r\n  mutationType: \"updateDataField\",\r\n});\r\n\r\nexport default {\r\n    namespaced: true,\r\n    state: {\r\n      grids: [],\r\n      activeBranchs: [],\r\n      pageCount: 0,\r\n\r\n      editedItem: {\r\n        id: null,\r\n        accountName: null,\r\n        accountNo: null,\r\n        branchId:null,\r\n        accountType: null,\r\n        accountState:null,\r\n        phoneNumber:null,\r\n        inputType:null,\r\n      },\r\n  \r\n      defaultItem: {\r\n        id: null,\r\n        accountName: null,\r\n        accountNo: null,\r\n        branchId:null,\r\n        accountType: null,\r\n        accountState:null,\r\n        phoneNumber:null,\r\n        inputType:null,\r\n      },\r\n    },\r\n  \r\n    getters: {\r\n      getDataFields,\r\n    },\r\n  \r\n    mutations: {\r\n      updateDataField,\r\n  \r\n      SET_DATA_ACCOUNTS(state, items) {\r\n        state.grids = items;\r\n      },\r\n  \r\n      SET_DATA_ACTIVE_ACCOUNTS(state, items) {\r\n        state.activeBranchs = items;\r\n      },\r\n  \r\n      SET_PAGE_COUNT(state, pageCount) {\r\n        state.pageCount = pageCount;\r\n      },\r\n  \r\n      RESET_DATA(state) {\r\n        state.editedItem = Object.assign({}, state.defaultItem);\r\n      },\r\n      \r\n      SET_ITEM_ACCOUNTS(state, item) {\r\n        state.editedItem.id = item.id;\r\n        state.editedItem.accountName = item.accountName;\r\n        state.editedItem.accountNo = item.accountNo;\r\n        state.editedItem.branchId = item.branchId;\r\n        state.editedItem.accountType = item.accountTypeValue;\r\n        state.editedItem.accountState = item.accountState;\r\n        state.editedItem.phoneNumber = item.phoneNumber;\r\n      },\r\n\r\n    },\r\n  \r\n    actions: {\r\n\r\n      ClearDataItem({ commit }) {\r\n        commit(\"RESET_DATA\");\r\n      },\r\n  \r\n      InsertAccount({ commit, state }) {\r\n        return new Promise((resolve, reject) => {\r\n          insertAccount(state.editedItem)\r\n            .then((response) => {\r\n              commit(\"RESET_DATA\");\r\n              resolve(response.messages[0]);\r\n            })\r\n            .catch((error) => {\r\n              reject(error);\r\n            });\r\n        });\r\n      },\r\n\r\n      UpdateAccount({ commit, state }) {\r\n        let updateModel = {\r\n          Id : state.editedItem.id,\r\n          AccountName : state.editedItem.accountName,\r\n          AccountNo : state.editedItem.accountNo,\r\n          BranchId : state.editedItem.branchId,\r\n          AccountType : state.editedItem.accountType,\r\n          PhoneNumber : state.editedItem.phoneNumber,\r\n        };\r\n\r\n        return new Promise((resolve, reject) => {\r\n          updateAccount(updateModel)\r\n            .then((response) => {\r\n              commit(\"RESET_DATA\");\r\n              resolve(response.messages[0]);\r\n            })\r\n            .catch((error) => {\r\n              reject(error);\r\n            });\r\n        });\r\n      },\r\n\r\n      DeleteAccount({ commit }, item) {\r\n        const param = {\r\n          id: item.id\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n          deleteAccount(param)\r\n            .then((response) => {\r\n              console.log(commit);\r\n              resolve(response.messages[0]);\r\n            })\r\n            .catch((error) => {\r\n              reject(error);\r\n            });\r\n        });\r\n      },\r\n\r\n      ActivateAccount({ commit }, item) {\r\n        const param = {\r\n          id: item.id,\r\n          accountState: item.accountStateValue\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n          activateAccount(param)\r\n            .then((response) => {\r\n              console.log(commit);\r\n              resolve(response.messages[0]);\r\n            })\r\n            .catch((error) => {\r\n              reject(error);\r\n            });\r\n        });\r\n      },\r\n\r\n      SetDataUpdate({ commit }, item) {\r\n        commit(\"SET_ITEM_ACCOUNTS\", item);\r\n      },\r\n  \r\n      GetAccounts({ commit }, filter) {\r\n        return new Promise((resolve, reject) => {\r\n          getAccounts(filter)\r\n            .then((response) => {\r\n              commit(\"SET_DATA_ACCOUNTS\", response.result.data);\r\n              commit(\"SET_PAGE_COUNT\", response.result.pageCount);\r\n              resolve(response);\r\n            })\r\n            .catch((error) => {\r\n              reject(error);\r\n            });\r\n        });\r\n      },\r\n\r\n    },\r\n  };"],"mappings":"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"},"metadata":{},"sourceType":"module"}