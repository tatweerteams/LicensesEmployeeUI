{"ast":null,"code":"import _toConsumableArray from \"D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"D:/repo Tatweer/tatweerteams/CheckbooksOrderingUI/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { mapActions } from \"vuex\";\nimport { validationInput } from \"../../../models/validationInput.js\";\nimport { createHelpers } from \"vuex-map-fields\";\nvar _createHelpers = createHelpers({\n    getterType: \"getDataFields\",\n    mutationType: \"updateDataField\"\n  }),\n  mapFields = _createHelpers.mapFields;\nexport default {\n  name: \"insert-Or-Update\",\n  props: {\n    updateItemProp: {},\n    dialogProp: {}\n  },\n  data: function data() {\n    return {\n      banks: [],\n      regions: [],\n      activeBranchs: [],\n      dialog: false,\n      valid: false,\n      isLoading: false,\n      isLoadingRegion: false,\n      isLoadingBranch: false,\n      validationInput: validationInput,\n      selectedBank: null,\n      selectedBranch: null,\n      selectedRegion: null,\n      searchRegion: null,\n      searchBank: null,\n      searchBranch: null,\n      filterRegionData: {\n        bankId: null,\n        regionName: null\n      },\n      filterBankData: {\n        bankName: null\n      },\n      selectAccountType: null,\n      filterBranchData: {\n        branchRegionId: null,\n        NameOrNumber: null\n      },\n      accountTypeOptions: [{\n        text: \"افراد\",\n        value: 1\n      }, {\n        text: \"شركات\",\n        value: 2\n      }]\n    };\n  },\n  computed: _objectSpread(_objectSpread({}, mapFields(\"accountStore\", {\n    id: \"editedItem.id\",\n    accountName: \"editedItem.accountName\",\n    accountNo: \"editedItem.accountNo\",\n    phoneNumber: \"editedItem.phoneNumber\",\n    branchId: \"editedItem.branchId\",\n    accountType: \"editedItem.accountType\",\n    accountState: \"editedItem.accountState\",\n    inputType: \"editedItem.inputType\"\n  })), {}, {\n    formTitle: function formTitle() {\n      return this.id ? \"تعديل بيانات الحساب\" : \"إضافة حساب جديد\";\n    }\n  }),\n  watch: {\n    dialogProp: {\n      handler: function handler(data) {\n        this.dialog = data;\n      },\n      immediate: true\n    },\n    updateItemProp: {\n      handler: function handler(data) {\n        if (data) this.editDialogAppear(data);\n      },\n      immediate: true\n    },\n    selectedBank: function selectedBank(val) {\n      if (!val) this.clearRegionData();\n    },\n    selectedRegion: function selectedRegion(val) {\n      if (!val) this.clearRegionData();\n    },\n    searchBank: function searchBank(val) {\n      if (this.isLoading) return;\n      this.filterBankData.bankName = val;\n      this.getBanks();\n    },\n    searchRegion: function searchRegion(val) {\n      var _this$selectedRegion;\n      if (this.isLoadingRegion) return;\n      if (val === ((_this$selectedRegion = this.selectedRegion) === null || _this$selectedRegion === void 0 ? void 0 : _this$selectedRegion.regionName)) return;\n      this.filterRegionData.regionName = val;\n      this.getBankRegions();\n    },\n    searchBranch: function searchBranch(val) {\n      var _this$selectedBranch, _this$selectedRegion2;\n      if (this.isLoadingBranch) return;\n      if (val === ((_this$selectedBranch = this.selectedBranch) === null || _this$selectedBranch === void 0 ? void 0 : _this$selectedBranch.name)) return;\n      this.filterBranchData.branchRegionId = (_this$selectedRegion2 = this.selectedRegion) === null || _this$selectedRegion2 === void 0 ? void 0 : _this$selectedRegion2.bankRegionId;\n      this.filterBranchData.NameOrNumber = val;\n      this.GetBranches();\n    }\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions({\n    SetDataUpdateStore: \"accountStore/SetDataUpdate\",\n    GetBankStore: \"bankStore/GetBanks\",\n    ClearDataItem: \"accountStore/ClearDataItem\",\n    GetActiveBranchesAction: \"branchStore/GetActiveBranchs\",\n    GetActiveBankRegions: \"bankRegionStore/GetActiveBankRegions\",\n    InsertAccountAction: \"accountStore/InsertAccount\",\n    UpdateAccountAction: \"accountStore/UpdateAccount\",\n    SetBranchItemList: \"branchStore/SetBranchItemList\",\n    SetBankItemList: \"bankStore/SetBankItemList\",\n    SetBankRegionItemList: \"bankRegionStore/SetBankRegionItemList\"\n  })), {}, {\n    IsvalidAccount: function IsvalidAccount() {\n      if (!this.accountNo || !this.selectedBranch) return false;\n      if (this.accountNo.substring(0, 3) === this.selectedBranch.branchNo) return true;else return \"تأكد من رقم الفرع بالحساب\";\n    },\n    openDialog: function openDialog() {\n      this.dialog = true;\n      this.getBanks();\n    },\n    getBanks: function getBanks() {\n      var _this = this;\n      try {\n        this.isLoading = true;\n        this.GetBankStore(this.filterBankData).then(function () {\n          _this.banks = [];\n          _this.banks = _toConsumableArray(_this.$store.getters[\"bankStore/GET_ACTIVE_BANKS\"]);\n          _this.isLoading = false;\n        }).catch(function (error) {\n          _this.notify(\"\".concat(error), \"#1d262d\");\n          _this.isLoading = false;\n        });\n      } catch (error) {\n        this.isLoading = false;\n        this.notify(error, \"#1d262d\");\n      }\n    },\n    onBranchChangeLoadRegions: function onBranchChangeLoadRegions() {\n      this.getBankRegions();\n    },\n    onRegionChangeLoadBranches: function onRegionChangeLoadBranches() {\n      var _this$selectedRegion3;\n      this.filterBranchData.branchRegionId = (_this$selectedRegion3 = this.selectedRegion) === null || _this$selectedRegion3 === void 0 ? void 0 : _this$selectedRegion3.bankRegionId;\n      this.GetBranches();\n    },\n    getBankRegions: function getBankRegions() {\n      var _this$selectedBank,\n        _this2 = this;\n      if (!this.selectedBank) return;\n      this.filterRegionData.bankId = (_this$selectedBank = this.selectedBank) === null || _this$selectedBank === void 0 ? void 0 : _this$selectedBank.bankId;\n      try {\n        this.isLoadingRegion = true;\n        this.GetActiveBankRegions(this.filterRegionData).then(function () {\n          _this2.regions = [];\n          _this2.regions = _toConsumableArray(_this2.$store.getters[\"bankRegionStore/GET_ACTIVE_BANKREGIONS\"]);\n          _this2.isLoadingRegion = false;\n        }).catch(function (error) {\n          _this2.notify(\"\".concat(error), \"#1d262d\");\n          _this2.isLoadingRegion = false;\n        });\n      } catch (error) {\n        this.isLoadingRegion = false;\n        this.notify(error, \"#1d262d\");\n      }\n    },\n    GetBranches: function GetBranches() {\n      var _this3 = this;\n      try {\n        this.isLoadingBranch = true;\n        this.GetActiveBranchesAction(this.filterBranchData).then(function () {\n          _this3.activeBranchs = _toConsumableArray(_this3.$store.getters[\"branchStore/GET_ACTIVE_BRANCHS\"]);\n          _this3.isLoadingBranch = false;\n        }).catch(function (error) {\n          _this3.notify(\"\".concat(error), \"#1d262d\");\n          _this3.isLoadingBranch = false;\n        });\n      } catch (error) {\n        this.isLoadingBranch = false;\n        this.notify(error, \"#1d262d\");\n      }\n    },\n    editDialogAppear: function editDialogAppear(item) {\n      this.SetDataUpdateStore(item);\n      this.SetBankDetailsWhenEditDialogAppear(item);\n      this.SetBankRegionDetailsWhenEditDialogAppear(item);\n      this.SetBranchDetailsWhenEditDialogAppear(item);\n      this.SetAccountTypeWhenEditDialogAppear(item);\n      this.dialog = true;\n    },\n    SetBranchDetailsWhenEditDialogAppear: function SetBranchDetailsWhenEditDialogAppear(item) {\n      this.activeBranchs.push({\n        id: item.branchId,\n        name: item.branchName,\n        branchNo: item.branchNo\n      });\n      this.selectedBranch = this.activeBranchs.find(function (x) {\n        return x.id == item.branchId;\n      });\n    },\n    SetBankDetailsWhenEditDialogAppear: function SetBankDetailsWhenEditDialogAppear(item) {\n      this.banks.push({\n        name: item.bankName,\n        bankId: item.bankId\n      });\n      this.selectedBank = this.banks.find(function (x) {\n        return x.bankId == item.bankId;\n      });\n    },\n    SetBankRegionDetailsWhenEditDialogAppear: function SetBankRegionDetailsWhenEditDialogAppear(item) {\n      this.regions.push({\n        regionName: item.regionName,\n        bankRegionId: item.bankRegionId\n      });\n      this.selectedRegion = this.regions.find(function (x) {\n        return x.bankRegionId == item.bankRegionId;\n      });\n    },\n    SetAccountTypeWhenEditDialogAppear: function SetAccountTypeWhenEditDialogAppear(item) {\n      if (item.bankRegionId) {\n        this.selectAccountType = this.accountTypeOptions.find(function (pred) {\n          return pred.value == item.accountTypeValue;\n        });\n      }\n    },\n    clearRegionData: function clearRegionData() {\n      this.isLoadingRegion = false;\n      this.regions = [];\n      this.selectedRegion = null;\n      this.searchRegion = null;\n      this.filterRegionData.bankId = null;\n      this.filterRegionData.regionName = null;\n      this.clearBranchData();\n    },\n    clearBranchData: function clearBranchData() {\n      this.isLoadingBranch = false;\n      this.activeBranchs = [];\n      this.searchBranch = null;\n      this.selectedBranch = null;\n      this.filterBranchData.branchRegionId = null;\n      this.filterBranchData.NameOrNumber = null;\n    },\n    close: function close() {\n      this.dialog = false;\n      this.ClearDataItemStore();\n      this.resetValidation();\n      this.selectedBank = null;\n      this.$emit(\"close-edit-account\");\n    },\n    save: function save() {\n      var _this$selectedBranch2;\n      this.branchId = (_this$selectedBranch2 = this.selectedBranch) === null || _this$selectedBranch2 === void 0 ? void 0 : _this$selectedBranch2.id;\n      if (this.id) {\n        this.updateAccount();\n      } else {\n        this.insertAccount();\n      }\n    },\n    insertAccount: function insertAccount() {\n      var _this4 = this;\n      this.inputType = 1;\n      this.accountState = 1;\n      this.accountType = this.selectAccountType.value;\n      this.branchId = this.selectedBranch.id;\n      this.$store.dispatch(\"loading\", true);\n      this.InsertAccountAction().then(function (res) {\n        _this4.$emit(\"refresh-data\");\n        _this4.notify(\"\".concat(res), \"#1d262d\");\n        _this4.close();\n      }).catch(function (error) {\n        _this4.notify(\"\".concat(error), \"#1d262d\");\n        _this4.$store.dispatch(\"loading\", false);\n      });\n    },\n    updateAccount: function updateAccount() {\n      var _this5 = this;\n      this.accountType = this.selectAccountType.value;\n      this.$store.dispatch(\"loading\", true);\n      this.UpdateAccountAction().then(function (res) {\n        _this5.$emit(\"refresh-data\");\n        _this5.notify(\"\".concat(res), \"#1d262d\");\n        // this.$store.dispatch(\"loading\", false);\n        _this5.close();\n      }).catch(function (error) {\n        _this5.notify(\"\".concat(error), \"#1d262d\");\n        _this5.$store.dispatch(\"loading\", false);\n      });\n    },\n    resetValidation: function resetValidation() {\n      var _this$$refs$formAccou;\n      (_this$$refs$formAccou = this.$refs.formAccount) === null || _this$$refs$formAccou === void 0 ? void 0 : _this$$refs$formAccou.reset();\n    },\n    ClearDataItemStore: function ClearDataItemStore() {\n      this.ClearDataItem();\n    },\n    notify: function notify(text, color) {\n      this.$store.commit(\"showMessage\", {\n        text: text,\n        color: color\n      });\n    }\n  })\n};","map":{"version":3,"mappings":";;;;;;AAyLA;AACA;AAEA;AACA;IACAA;IACAC;EACA;EAHAC;AAIA;EACAC;EACAC;IACAC;IACAC;EACA;EAEAC;IAAA;MACAC;MACAC;MACAC;MAEAC;MACAC;MACAC;MACAC;MACAC;MAEAC;MAEAC;MACAC;MACAC;MAEAC;MACAC;MACAC;MAEAC;QACAC;QACAC;MACA;MAEAC;QACAC;MACA;MAEAC;MAEAC;QACAC;QACAC;MACA;MAEAC,qBACA;QAAAC;QAAAC;MAAA,GACA;QAAAD;QAAAC;MAAA;IAEA;EAAA;EAEAC,0CACAjC;IACAkC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;EACA;IAEAC;MACA;IACA;EAAA,EACA;EAEAC;IACAvC;MACAwC;QACA;MACA;MACAC;IACA;IAEA1C;MACAyC;QACA;MACA;MACAC;IACA;IAEA9B;MACA;IACA;IAEAE;MACA;IACA;IAEAE;MACA;MACA;MACA;IACA;IAEAD;MAAA;MACA;MACA;MACA;MACA;IACA;IAEAE;MAAA;MACA;MACA;MACA;MACA;MACA;IACA;EACA;EAEA0B,yCACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IACAC;IAEAC;IACAC;IACAC;EACA;IAEAC;MACA;MACA,qEACA,iBACA;IACA;IAEAC;MACA;MACA;IACA;IAEAC;MAAA;MACA;QACA;QACA,uCACAC;UACA;UACA;UACA;QACA,GACAC;UACA;UACA;QACA;MACA;QACA;QACA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MAAA;MACA;MACA;IACA;IAEAC;MAAA;QAAA;MACA;MACA;MACA;QACA;QACA,iDACAJ;UACA;UACA,oCACA,gEACA;UACA;QACA,GACAC;UACA;UACA;QACA;MACA;QACA;QACA;MACA;IACA;IAEAI;MAAA;MACA;QACA;QACA,oDACAL;UACA,0CACA,wDACA;UACA;QACA,GACAC;UACA;UACA;QACA;MACA;QACA;QACA;MACA;IACA;IAEAK;MACA;MACA;MACA;MACA;MACA;MAEA;IACA;IAEAC;MACA;QACAlC;QACAjC;QACAoE;MACA;MACA,8CACA;QAAA;MAAA,EACA;IACA;IAEAC;MACA;QACArE;QACAqB;MACA;MACA;QAAA;MAAA;IACA;IAEAiD;MACA;QACAhD;QACAiD;MACA;MACA,wCACA;QAAA;MAAA,EACA;IACA;IAEAC;MACA;QACA,sDACA;UAAA;QAAA,EACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MACA;MACA;MACA;MACA;MACA;IACA;IAEAC;MAAA;MACA;MACA;QACA;MACA;QACA;MACA;IACA;IAEAC;MAAA;MACA;MACA;MACA;MACA;MAEA;MACA,2BACAjB;QACA;QACA;QACA;MACA,GACAC;QACA;QACA;MACA;IACA;IAEAiB;MAAA;MACA;MAEA;MACA,2BACAlB;QACA;QACA;QACA;QACA;MACA,GACAC;QACA;QACA;MACA;IACA;IAEAkB;MAAA;MACA;IACA;IAEAC;MACA;IACA;IAEAC;MACA;QAAAnD;QAAAoD;MAAA;IACA;EAAA;AAEA","names":["getterType","mutationType","mapFields","name","props","updateItemProp","dialogProp","data","banks","regions","activeBranchs","dialog","valid","isLoading","isLoadingRegion","isLoadingBranch","validationInput","selectedBank","selectedBranch","selectedRegion","searchRegion","searchBank","searchBranch","filterRegionData","bankId","regionName","filterBankData","bankName","selectAccountType","filterBranchData","branchRegionId","NameOrNumber","accountTypeOptions","text","value","computed","id","accountName","accountNo","phoneNumber","branchId","accountType","accountState","inputType","formTitle","watch","handler","immediate","methods","mapActions","SetDataUpdateStore","GetBankStore","ClearDataItem","GetActiveBranchesAction","GetActiveBankRegions","InsertAccountAction","UpdateAccountAction","SetBranchItemList","SetBankItemList","SetBankRegionItemList","IsvalidAccount","openDialog","getBanks","then","catch","onBranchChangeLoadRegions","onRegionChangeLoadBranches","getBankRegions","GetBranches","editDialogAppear","SetBranchDetailsWhenEditDialogAppear","branchNo","SetBankDetailsWhenEditDialogAppear","SetBankRegionDetailsWhenEditDialogAppear","bankRegionId","SetAccountTypeWhenEditDialogAppear","clearRegionData","clearBranchData","close","save","insertAccount","updateAccount","resetValidation","ClearDataItemStore","notify","color"],"sourceRoot":"src/views/Account/Components","sources":["InsertOrUpdateComponent.vue"],"sourcesContent":["<template>\r\n  <v-dialog v-model=\"dialog\" max-width=\"800px\" persistent>\r\n    <template v-slot:activator=\"{ on }\">\r\n      <template>\r\n        <v-btn\r\n          color=\"#536DFE\"\r\n          class=\"white--text \"\r\n          @click=\"openDialog\"\r\n          v-on=\"on\"\r\n          elevation=\"5\"\r\n        >\r\n          <v-icon class=\"ml-2\">mdi-plus-circle</v-icon\r\n          ><span> إضافة حساب جديد</span>\r\n        </v-btn>\r\n      </template>\r\n    </template>\r\n    <v-card>\r\n      <v-card-title>\r\n        <span class=\"headline\">{{ formTitle }}</span>\r\n      </v-card-title>\r\n\r\n      <v-divider></v-divider>\r\n\r\n      <v-card-text>\r\n        <v-container>\r\n          <v-form ref=\"formAccount\" v-model=\"valid\">\r\n            <v-row>\r\n              <v-col cols=\"12\" sm=\"6\" v-if=\"!id\">\r\n                <v-autocomplete\r\n                  v-model=\"selectedBank\"\r\n                  :items=\"banks\"\r\n                  :loading=\"isLoading\"\r\n                  single-line\r\n                  dense\r\n                  :search-input.sync=\"searchBank\"\r\n                  item-text=\"name\"\r\n                  item-value=\"bankId\"\r\n                  label=\"اختر المصرف\"\r\n                  placeholder=\"بحث عن المصرف\"\r\n                  return-object\r\n                  no-data-text=\" ابحث عن اسم المصرف\"\r\n                  clearable\r\n                  prepend-icon=\"mdi-bank\"\r\n                  @change=\"onBranchChangeLoadRegions\"\r\n                >\r\n                </v-autocomplete>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-autocomplete\r\n                  v-model=\"selectedRegion\"\r\n                  :items=\"regions\"\r\n                  :loading=\"isLoadingRegion\"\r\n                  single-line\r\n                  dense\r\n                  required\r\n                  :search-input.sync=\"searchRegion\"\r\n                  item-text=\"regionName\"\r\n                  item-value=\"bankRegionId\"\r\n                  label=\"اختر المنطقة\"\r\n                  placeholder=\"بحث عن المنطقة\"\r\n                  return-object\r\n                  no-data-text=\"لايوجد بيانات\"\r\n                  clearable\r\n                  prepend-icon=\"mdi-map-marker\"\r\n                  @change=\"onRegionChangeLoadBranches\"\r\n                >\r\n                </v-autocomplete>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-autocomplete\r\n                  v-model=\"selectedBranch\"\r\n                  :items=\"activeBranchs\"\r\n                  :loading=\"isLoadingBranch\"\r\n                  single-line\r\n                  dense\r\n                  :search-input.sync=\"searchBranch\"\r\n                  item-text=\"name\"\r\n                  item-value=\"id\"\r\n                  label=\"اختر الفرع\"\r\n                  allow-overflowplaceholder=\"بحث عن الفرع\"\r\n                  return-object\r\n                  no-data-text=\"لايوجد بيانات\"\r\n                  clearable\r\n                  prepend-icon=\"mdi-bank\"\r\n                >\r\n                </v-autocomplete>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-select\r\n                  v-model=\"selectAccountType\"\r\n                  :items=\"accountTypeOptions\"\r\n                  item-text=\"text\"\r\n                  item-value=\"value\"\r\n                  dense\r\n                  label=\"نوع الحساب\"\r\n                  placeholder=\"نوع الحساب\"\r\n                  no-data-text=\"لايوجد بيانات\"\r\n                  return-object\r\n                  single-line\r\n                  prepend-icon=\"mdi-bank\"\r\n                  clearable\r\n                >\r\n                </v-select>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-text-field\r\n                  prepend-icon=\"smartphone\"\r\n                  v-model=\"phoneNumber\"\r\n                  label=\"رقم الهاتف\"\r\n                  :maxlength=\"10\"\r\n                  :rules=\"phoneNumber ?[\r\n                    validationInput.isEmpty,\r\n                    validationInput.numberOnly,\r\n                    validationInput.phoneNumber,\r\n                    validationInput.phoneLength,\r\n                  ] : []\"\r\n                  required\r\n                  dense\r\n                >\r\n                </v-text-field>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-text-field\r\n                  prepend-icon=\"mdi-bank\"\r\n                  v-model=\"accountNo\"\r\n                  label=\"رقم الحساب\"\r\n                  dense\r\n                  :maxlength=\"15\"\r\n                  :rules=\"[\r\n                    validationInput.numberOnly,\r\n                    validationInput.minLengthAccount,\r\n                    IsvalidAccount(),\r\n                  ]\"\r\n                  required\r\n                ></v-text-field>\r\n              </v-col>\r\n\r\n              <v-col cols=\"12\" sm=\"6\">\r\n                <v-text-field\r\n                  prepend-icon=\"person\"\r\n                  v-model=\"accountName\"\r\n                  label=\"إسم الحساب\"\r\n                  dense\r\n                  :maxlength=\"150\"\r\n                  :rules=\"[\r\n                    validationInput.isEmpty,\r\n                    validationInput.currectInput,\r\n                    validationInput.minLength,\r\n                    validationInput.numEngAr,\r\n                  ]\"\r\n                  required\r\n                ></v-text-field>\r\n              </v-col>\r\n            </v-row>\r\n          </v-form>\r\n        </v-container>\r\n      </v-card-text>\r\n\r\n      <v-card-actions>\r\n        <div style=\"width: 100%;text-align: center;\">\r\n          <v-btn\r\n            @click=\"save\"\r\n            class=\"mx-2 white--text\"\r\n            :disabled=\"!valid\"\r\n            color=\"#536DFE\"\r\n          >\r\n            <v-icon>save</v-icon>\r\n            <span>حفظ البيانات</span>\r\n          </v-btn>\r\n          <v-btn class=\"mx-2 white--text\" @click=\"close\" color=\"#E91D62\">\r\n            <v-icon dark>clear</v-icon>\r\n            <span>إلغاء</span>\r\n          </v-btn>\r\n        </div>\r\n      </v-card-actions>\r\n    </v-card>\r\n  </v-dialog>\r\n</template>\r\n\r\n<script>\r\nimport { mapActions } from \"vuex\";\r\nimport { validationInput } from \"../../../models/validationInput.js\";\r\n\r\nimport { createHelpers } from \"vuex-map-fields\";\r\nconst { mapFields } = createHelpers({\r\n  getterType: \"getDataFields\",\r\n  mutationType: \"updateDataField\",\r\n});\r\nexport default {\r\n  name: \"insert-Or-Update\",\r\n  props: {\r\n    updateItemProp: {},\r\n    dialogProp: {},\r\n  },\r\n\r\n  data: () => ({\r\n    banks: [],\r\n    regions: [],\r\n    activeBranchs: [],\r\n\r\n    dialog: false,\r\n    valid: false,\r\n    isLoading: false,\r\n    isLoadingRegion: false,\r\n    isLoadingBranch: false,\r\n\r\n    validationInput: validationInput,\r\n\r\n    selectedBank: null,\r\n    selectedBranch: null,\r\n    selectedRegion: null,\r\n\r\n    searchRegion: null,\r\n    searchBank: null,\r\n    searchBranch: null,\r\n\r\n    filterRegionData: {\r\n      bankId: null,\r\n      regionName: null,\r\n    },\r\n\r\n    filterBankData: {\r\n      bankName: null,\r\n    },\r\n\r\n    selectAccountType: null,\r\n\r\n    filterBranchData: {\r\n      branchRegionId: null,\r\n      NameOrNumber: null,\r\n    },\r\n\r\n    accountTypeOptions: [\r\n      { text: \"افراد\", value: 1 },\r\n      { text: \"شركات\", value: 2 },\r\n    ],\r\n  }),\r\n\r\n  computed: {\r\n    ...mapFields(\"accountStore\", {\r\n      id: \"editedItem.id\",\r\n      accountName: \"editedItem.accountName\",\r\n      accountNo: \"editedItem.accountNo\",\r\n      phoneNumber: \"editedItem.phoneNumber\",\r\n      branchId: \"editedItem.branchId\",\r\n      accountType: \"editedItem.accountType\",\r\n      accountState: \"editedItem.accountState\",\r\n      inputType: \"editedItem.inputType\",\r\n    }),\r\n\r\n    formTitle() {\r\n      return this.id ? \"تعديل بيانات الحساب\" : \"إضافة حساب جديد\";\r\n    },\r\n  },\r\n\r\n  watch: {\r\n    dialogProp: {\r\n      handler(data) {\r\n        this.dialog = data;\r\n      },\r\n      immediate: true,\r\n    },\r\n\r\n    updateItemProp: {\r\n      handler(data) {\r\n        if (data) this.editDialogAppear(data);\r\n      },\r\n      immediate: true,\r\n    },\r\n\r\n    selectedBank(val) {\r\n      if (!val) this.clearRegionData();\r\n    },\r\n\r\n    selectedRegion(val) {\r\n      if (!val) this.clearRegionData();\r\n    },\r\n\r\n    searchBank(val) {\r\n      if (this.isLoading) return;\r\n      this.filterBankData.bankName = val;\r\n      this.getBanks();\r\n    },\r\n\r\n    searchRegion(val) {\r\n      if (this.isLoadingRegion) return;\r\n      if (val === this.selectedRegion?.regionName) return;\r\n      this.filterRegionData.regionName = val;\r\n      this.getBankRegions();\r\n    },\r\n\r\n    searchBranch(val) {\r\n      if (this.isLoadingBranch) return;\r\n      if (val === this.selectedBranch?.name) return;\r\n      this.filterBranchData.branchRegionId = this.selectedRegion?.bankRegionId;\r\n      this.filterBranchData.NameOrNumber = val;\r\n      this.GetBranches();\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    ...mapActions({\r\n      SetDataUpdateStore: \"accountStore/SetDataUpdate\",\r\n      GetBankStore: \"bankStore/GetBanks\",\r\n      ClearDataItem: \"accountStore/ClearDataItem\",\r\n      GetActiveBranchesAction: \"branchStore/GetActiveBranchs\",\r\n      GetActiveBankRegions: \"bankRegionStore/GetActiveBankRegions\",\r\n      InsertAccountAction: \"accountStore/InsertAccount\",\r\n      UpdateAccountAction: \"accountStore/UpdateAccount\",\r\n\r\n      SetBranchItemList: \"branchStore/SetBranchItemList\",\r\n      SetBankItemList: \"bankStore/SetBankItemList\",\r\n      SetBankRegionItemList: \"bankRegionStore/SetBankRegionItemList\",\r\n    }),\r\n\r\n    IsvalidAccount() {\r\n      if (!this.accountNo || !this.selectedBranch) return false;\r\n      if (this.accountNo.substring(0, 3) === this.selectedBranch.branchNo)\r\n        return true;\r\n      else return \"تأكد من رقم الفرع بالحساب\";\r\n    },\r\n\r\n    openDialog() {\r\n      this.dialog = true;\r\n      this.getBanks();\r\n    },\r\n\r\n    getBanks() {\r\n      try {\r\n        this.isLoading = true;\r\n        this.GetBankStore(this.filterBankData)\r\n          .then(() => {\r\n            this.banks = [];\r\n            this.banks = [...this.$store.getters[\"bankStore/GET_ACTIVE_BANKS\"]];\r\n            this.isLoading = false;\r\n          })\r\n          .catch((error) => {\r\n            this.notify(`${error}`, \"#1d262d\");\r\n            this.isLoading = false;\r\n          });\r\n      } catch (error) {\r\n        this.isLoading = false;\r\n        this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n\r\n    onBranchChangeLoadRegions() {\r\n      this.getBankRegions();\r\n    },\r\n\r\n    onRegionChangeLoadBranches() {\r\n      this.filterBranchData.branchRegionId = this.selectedRegion?.bankRegionId;\r\n      this.GetBranches();\r\n    },\r\n\r\n    getBankRegions() {\r\n      if (!this.selectedBank) return;\r\n      this.filterRegionData.bankId = this.selectedBank?.bankId;\r\n      try {\r\n        this.isLoadingRegion = true;\r\n        this.GetActiveBankRegions(this.filterRegionData)\r\n          .then(() => {\r\n            this.regions = [];\r\n            this.regions = [\r\n              ...this.$store.getters[\"bankRegionStore/GET_ACTIVE_BANKREGIONS\"],\r\n            ];\r\n            this.isLoadingRegion = false;\r\n          })\r\n          .catch((error) => {\r\n            this.notify(`${error}`, \"#1d262d\");\r\n            this.isLoadingRegion = false;\r\n          });\r\n      } catch (error) {\r\n        this.isLoadingRegion = false;\r\n        this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n\r\n    GetBranches() {\r\n      try {\r\n        this.isLoadingBranch = true;\r\n        this.GetActiveBranchesAction(this.filterBranchData)\r\n          .then(() => {\r\n            this.activeBranchs = [\r\n              ...this.$store.getters[\"branchStore/GET_ACTIVE_BRANCHS\"],\r\n            ];\r\n            this.isLoadingBranch = false;\r\n          })\r\n          .catch((error) => {\r\n            this.notify(`${error}`, \"#1d262d\");\r\n            this.isLoadingBranch = false;\r\n          });\r\n      } catch (error) {\r\n        this.isLoadingBranch = false;\r\n        this.notify(error, \"#1d262d\");\r\n      }\r\n    },\r\n\r\n    editDialogAppear(item) {\r\n      this.SetDataUpdateStore(item);\r\n      this.SetBankDetailsWhenEditDialogAppear(item);\r\n      this.SetBankRegionDetailsWhenEditDialogAppear(item);\r\n      this.SetBranchDetailsWhenEditDialogAppear(item);\r\n      this.SetAccountTypeWhenEditDialogAppear(item);\r\n\r\n      this.dialog = true;\r\n    },\r\n\r\n    SetBranchDetailsWhenEditDialogAppear(item) {\r\n      this.activeBranchs.push({\r\n        id: item.branchId,\r\n        name: item.branchName,\r\n        branchNo: item.branchNo,\r\n      });\r\n      this.selectedBranch = this.activeBranchs.find(\r\n        (x) => x.id == item.branchId\r\n      );\r\n    },\r\n\r\n    SetBankDetailsWhenEditDialogAppear(item) {\r\n      this.banks.push({\r\n        name: item.bankName,\r\n        bankId: item.bankId,\r\n      });\r\n      this.selectedBank = this.banks.find((x) => x.bankId == item.bankId);\r\n    },\r\n\r\n    SetBankRegionDetailsWhenEditDialogAppear(item) {\r\n      this.regions.push({\r\n        regionName: item.regionName,\r\n        bankRegionId: item.bankRegionId,\r\n      });\r\n      this.selectedRegion = this.regions.find(\r\n        (x) => x.bankRegionId == item.bankRegionId\r\n      );\r\n    },\r\n\r\n    SetAccountTypeWhenEditDialogAppear(item) {\r\n      if (item.bankRegionId) {\r\n        this.selectAccountType = this.accountTypeOptions.find(\r\n          (pred) => pred.value == item.accountTypeValue\r\n        );\r\n      }\r\n    },\r\n\r\n    clearRegionData() {\r\n      this.isLoadingRegion = false;\r\n      this.regions = [];\r\n      this.selectedRegion = null;\r\n      this.searchRegion = null;\r\n      this.filterRegionData.bankId = null;\r\n      this.filterRegionData.regionName = null;\r\n      this.clearBranchData();\r\n    },\r\n\r\n    clearBranchData() {\r\n      this.isLoadingBranch = false;\r\n      this.activeBranchs = [];\r\n      this.searchBranch = null;\r\n      this.selectedBranch = null;\r\n      this.filterBranchData.branchRegionId = null;\r\n      this.filterBranchData.NameOrNumber = null;\r\n    },\r\n\r\n    close() {\r\n      this.dialog = false;\r\n      this.ClearDataItemStore();\r\n      this.resetValidation();\r\n      this.selectedBank = null;\r\n      this.$emit(\"close-edit-account\");\r\n    },\r\n\r\n    save() {\r\n      this.branchId = this.selectedBranch?.id;\r\n      if (this.id) {\r\n        this.updateAccount();\r\n      } else {\r\n        this.insertAccount();\r\n      }\r\n    },\r\n\r\n    insertAccount() {\r\n      this.inputType = 1;\r\n      this.accountState = 1;\r\n      this.accountType = this.selectAccountType.value;\r\n      this.branchId = this.selectedBranch.id;\r\n\r\n      this.$store.dispatch(\"loading\", true);\r\n      this.InsertAccountAction()\r\n        .then((res) => {\r\n          this.$emit(\"refresh-data\");\r\n          this.notify(`${res}`, \"#1d262d\");\r\n          this.close();\r\n        })\r\n        .catch((error) => {\r\n          this.notify(`${error}`, \"#1d262d\");\r\n          this.$store.dispatch(\"loading\", false);\r\n        });\r\n    },\r\n\r\n    updateAccount() {\r\n      this.accountType = this.selectAccountType.value;\r\n\r\n      this.$store.dispatch(\"loading\", true);\r\n      this.UpdateAccountAction()\r\n        .then((res) => {\r\n          this.$emit(\"refresh-data\");\r\n          this.notify(`${res}`, \"#1d262d\");\r\n          // this.$store.dispatch(\"loading\", false);\r\n          this.close();\r\n        })\r\n        .catch((error) => {\r\n          this.notify(`${error}`, \"#1d262d\");\r\n          this.$store.dispatch(\"loading\", false);\r\n        });\r\n    },\r\n\r\n    resetValidation() {\r\n      this.$refs.formAccount?.reset();\r\n    },\r\n\r\n    ClearDataItemStore() {\r\n      this.ClearDataItem();\r\n    },\r\n\r\n    notify(text, color) {\r\n      this.$store.commit(\"showMessage\", { text: text, color: color });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style></style>\r\n"]},"metadata":{},"sourceType":"module"}